import './Video.less';

import { Component, E, block } from '../../utils';
import { PageGrid, YoutubeVideo } from '../../components';
import { Lang } from '../../blocks';

const b = block('video');

export const Video = Component.Video(() => {
    return () => {
        return E.div.class(b())(
            E.h2(Lang.token`menu/video`),
            E.div(
                E.div.class(b('video'))(
                    E.h3(
                        'Школа разработки интерфейсов Яндекса. Лекция о типизации'
                    ),
                    E.p(`На лекции мы поговорим о том, для чего нужна типизация в современном вебе, об ее истоках и развитии. Разберем подробно TypeScript — систему типов, которая победила остальные. Остановимся на общих концепциях типизации и особенностях устройства самого TypeScript, типизации структур, контроле над типами и даже дженериках (чуть-чуть).

                    И, конечно, вы увидите, как применять типизацию в бою — на практической секции проведем миграцию проекта с JavaScript!`),
                    E.br,
                    YoutubeVideo.id`i-1PqnzaxrI`
                ),
                E.div.class(b('video'))(
                    E.h3('Продвинутые дженерики в TypeScript'),
                    E.p('Дженерики, или параметризованные типы, позволяют писать более гибкие функции и интерфейсы. Чтобы зайти дальше, чем параметризация одним типом, необходимо понять лишь несколько общих принципов составления дженериков — и TypeScript раскроется перед вами, как шкатулка с секретом. Расскажу, как не бояться вкладывать дженерики друг в друга и как использовать автоматический вывод типов в ваших проектах.'),
                    E.br,
                    E.p(E.a.href('https://habr.com/ru/company/yandex/blog/555520/')`Текстовая расшифровка`),
                    E.br,
                    YoutubeVideo.id`YDTZpQrBXjc`
                ),
                E.div.class(b('video'))(
                    E.h3(
                        'Магия современных возможностей JavaScript для работающего программиста'
                    ),
                    E.p('Расскажу о таких современных возможностях JavaScript, как лямбда-функции, символы и прокси-объекты. Их использование позволяет писать лаконичный код и избегать лишних абстракций, особенно для сложных структур типа деревьев и графов. Как типовой рабочий пример — обогащение ответа API дополнительными знаниями о своей структуре. Затрону также метапрограммирование и связь между формальными языками и прокси-объектами.'),
                    E.br,
                    YoutubeVideo.id`CBHoYfLMVKs`
                ),
            )
        );
    };
});
