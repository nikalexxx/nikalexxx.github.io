{
  "blocks": [
    {
      "text": "ЛЕКЦИИ ПО МАТЕМАТИЧЕСКОЙ ЛОГИКЕ И ТЕОРИИ АЛГОРИТМОВ\n\n\n"
    },
    {
      "tag": {
        "name": "authors",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "link",
                "body": {
                  "blocks": [
                    {
                      "text": "Н. К. Верещагин"
                    }
                  ]
                },
                "attrList": [
                  {
                    "name": "href",
                    "value": "http://lpcs.math.msu.su/~ver/",
                    "empty": false
                  }
                ],
                "separator": " "
              }
            },
            {
              "text": ",\n"
            },
            {
              "tag": {
                "name": "link",
                "body": {
                  "blocks": [
                    {
                      "text": "А.Шень"
                    }
                  ]
                },
                "attrList": [
                  {
                    "name": "href",
                    "value": "https://ru.wikipedia.org/wiki/Шень,_Александр_Ханиевич",
                    "empty": false
                  }
                ],
                "separator": " "
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "title",
        "body": {
          "blocks": [
            {
              "text": "Языки и исчисления"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "Электронная версия в процессе адаптации, это предупреждение будет убрано по окончанию (Николаичев А.С.)"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:chapter",
        "body": {
          "blocks": [
            {
              "text": "Логика высказываний"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "def:section",
        "body": {
          "blocks": [
            {
              "text": "Высказывания и операции"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n«Если число "
    },
    {
      "include": {
        "value": "\\pi"
      }
    },
    {
      "text": " рационально, то "
    },
    {
      "include": {
        "value": "\\pi"
      }
    },
    {
      "text": " — алгебраическое число.\nНо оно не алгебраическое. Значит, "
    },
    {
      "include": {
        "value": "\\pi"
      }
    },
    {
      "text": " не рационально.»\nМы не обязаны знать, что такое число "
    },
    {
      "include": {
        "value": "\\pi"
      }
    },
    {
      "text": ", какие числа называют рациональными и какие алгебраическими, чтобы признать, что это рассуждение правильно — в том смысле, что из двух сформулированных посылок действительно вытекает заключение.\nТакого рода ситуации — когда некоторое утверждение верно независимо от смысла входящих в него высказываний — составляют предмет "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "логики высказываний"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Логика высказываний|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\nТакое начало (особенно если учесть, что курс логики входил в программу философского факультета, где также изучалась «диалектическая логика») настораживает, но на самом деле наши\n"
    },
    {
      "tag": {
        "name": "#comment",
        "body": {
          "blocks": [
            {
              "text": "% в каком-то из ленинских музеев висела копия его\n% гимназического табеля: по закону Божьему у него\n% была пятёрка, а по логике - четвёрка...\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\nрассмотрения будут иметь вполне точный математический характер, хотя мы начнём с неформальных мотивировок.\n\n\n"
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "Высказывания"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Высказывание|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " могут быть\n"
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "истинными"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Истинное высказывание|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Высказывание!истинное|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nи "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "ложными"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Ложное высказывание|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Высказывание!ложное|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nНапример, «"
    },
    {
      "include": {
        "value": "2^{16}+1"
      }
    },
    {
      "text": " — простое число» — истинное высказывание, а «"
    },
    {
      "include": {
        "value": "2^{32}+1"
      }
    },
    {
      "text": " — простое число» — ложное (это число делится на "
    },
    {
      "include": {
        "value": "641"
      }
    },
    {
      "text": ").\nПро высказывание «существует бесконечно много простых "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": ", для которых "
    },
    {
      "include": {
        "value": "p+2"
      }
    },
    {
      "text": " — также простое» никто не берётся сказать наверняка, истинно оно или ложно.\nЗаметим, что «"
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " делится на "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": "» в этом смысле не является высказыванием, пока не сказано, чему равно "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": "; при разных "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " получаются разные высказывания, одни истинные (при чётном "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": "), другие — ложные (при нечётном "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": ").\n\n\nВысказывания можно соединять друг с другом с помощью «логических связок».\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Связки (логические)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Логические связки|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nЭти связки имеют довольно странные, но традиционные названия и обозначения (табл. "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "logic-connectives-names"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ").\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:table",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "align",
            "value": "center",
            "empty": false
          },
          {
            "name": "key",
            "value": "logic-connectives-names",
            "empty": false
          },
          {
            "name": "name",
            "value": "Логические связки, обозначения и названия.",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " связка "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " обозначение "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " название"
            }
          ]
        },
        "attrList": [
          {
            "name": "head",
            "value": "",
            "empty": true
          }
        ],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "A\\& B"
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "A\\land B"
              }
            },
            {
              "text": "\n\n\n"
            },
            {
              "include": {
                "value": "A\\texttt{ and }B"
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "конъюнкция\n"
            },
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Конъюнкция|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " или "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": " "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "A\\lor B"
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "A\\texttt{ or }B"
              }
            },
            {
              "text": " "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " дизъюнкция\n"
            },
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Дизъюнкция|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "не "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " неверно\n"
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "\n"
            },
            {
              "include": {
                "value": "\\lnot A"
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "\\sim\\!A"
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "\\overline{A} "
              }
            },
            {
              "text": "\n\n"
            },
            {
              "include": {
                "value": "\\texttt{not} A"
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "\nотрицание\n"
            },
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Отрицание|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "из "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " следует "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": "\n\nесли "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": ", то "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " влечёт "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": " — следствие "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "\n"
            },
            {
              "include": {
                "value": "A\\rightarrow B"
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "A\\Rightarrow B"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "include": {
                "value": "A\\supset B"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "include": {
                "value": "\\texttt{if }A\\texttt{ then }B"
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "\nимпликация\n\nследование\n"
            },
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Импликация (следование)|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Конъюнкция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Дизъюнкция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Отрицание|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Импликация (следование)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "#end:def:table",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nОтметим также, что в импликации "
    },
    {
      "include": {
        "value": "A\\Rightarrow B"
      }
    },
    {
      "text": " высказывание "
    },
    {
      "include": {
        "value": "A"
      }
    },
    {
      "text": " называют "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "посылкой"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Посылка импликации|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nили "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "антецедентом импликации"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Антецедент импликации|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nа "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " — "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "заключением"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Заключение импликации|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nили "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "консеквентом"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Консеквент импликации|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "#comment",
        "body": {
          "blocks": [
            {
              "text": "% омонимия с УК: заключение, следствие, посылка - случайна?"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\nГоворят также, что высказывание имеет "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "истинностное значение"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Истинностное значение высказывания|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Высказывание!истинностное значение|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "И"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " (истина),\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "И (истина)@"
            },
            {
              "tag": {
                "name": "format:b",
                "body": {
                  "blocks": [
                    {
                      "text": "И"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": " (истина)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли оно истинно, или "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "Л"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " (ложь),\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Л (ложь)@"
            },
            {
              "tag": {
                "name": "format:b",
                "body": {
                  "blocks": [
                    {
                      "text": "Л"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": " (ложь)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли оно ложно.\nИногда вместо "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "И"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " употребляется буква "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "T"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " (true) или число "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "T (true)@"
            },
            {
              "tag": {
                "name": "format:b",
                "body": {
                  "blocks": [
                    {
                      "text": "T"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": " (true)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "F (true)@"
            },
            {
              "tag": {
                "name": "format:b",
                "body": {
                  "blocks": [
                    {
                      "text": "F"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": " (false)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nа вместо "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "Л"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " — буква "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "F"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " (false) или число "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": ".\n(С первого взгляда идея произвольным образом выбрать числа "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": " кажется дикой — какая бы польза могла быть от, скажем, сложения истинностных значений?\nУдивительным образом в последние годы обнаружилось, что такая польза есть, и если оперировать с истиной и ложью как элементами конечного поля, можно получить много неожиданных результатов.\nНо это выходит за рамки нашей книги.)\n\n\nЛогические связки позволяют составлять сложные высказывания из простых.\nПри этом истинность составного высказывания определяется истинностью его частей в соответствии с таблицей "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "truth-tables"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n\n\n"
    },
    {
      "tag": {
        "name": "area",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "table",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "A"
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "B"
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "A\\land B"
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "A\\lor B"
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "A \\to B"
                              }
                            }
                          ]
                        },
                        "attrList": [
                          {
                            "name": "head",
                            "value": "",
                            "empty": true
                          }
                        ],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    },
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    },
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    },
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    },
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "tag": {
                "name": "table",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "A"
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "\\lnot A"
                              }
                            }
                          ]
                        },
                        "attrList": [
                          {
                            "name": "head",
                            "value": "",
                            "empty": true
                          }
                        ],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    },
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    },
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "tag": {
                "name": "area",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "format:small",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "format:i",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Таблица "
                                    },
                                    {
                                      "tag": {
                                        "name": "area",
                                        "body": {
                                          "blocks": [
                                            {
                                              "tag": {
                                                "name": "counter",
                                                "body": {
                                                  "blocks": []
                                                },
                                                "attrList": [
                                                  {
                                                    "name": "last",
                                                    "value": "chapter",
                                                    "empty": false
                                                  }
                                                ],
                                                "separator": ""
                                              }
                                            },
                                            {
                                              "text": "."
                                            },
                                            {
                                              "tag": {
                                                "name": "counter",
                                                "body": {
                                                  "blocks": []
                                                },
                                                "attrList": [
                                                  {
                                                    "name": "use",
                                                    "value": "table",
                                                    "empty": false
                                                  }
                                                ],
                                                "separator": ""
                                              }
                                            }
                                          ]
                                        },
                                        "attrList": [
                                          {
                                            "name": "inline",
                                            "value": "",
                                            "empty": true
                                          },
                                          {
                                            "name": "key",
                                            "value": "truth-tables_link",
                                            "empty": false
                                          }
                                        ],
                                        "separator": " "
                                      }
                                    },
                                    {
                                      "text": ". Таблицы истинности для логических связок"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": "\n"
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": "\n"
                      }
                    }
                  ]
                },
                "attrList": [
                  {
                    "name": "position",
                    "value": "center",
                    "empty": false
                  }
                ],
                "separator": "\n"
              }
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "truth-tables",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\nТе же правила можно изложить словесно.\nВысказывание "
    },
    {
      "include": {
        "value": "A\\land B"
      }
    },
    {
      "text": " истинно, если оба высказывания "
    },
    {
      "include": {
        "value": "A"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " истинны.\nВысказывание "
    },
    {
      "include": {
        "value": "A\\lor B"
      }
    },
    {
      "text": " истинно, если хотя бы одно из высказываний "
    },
    {
      "include": {
        "value": "A"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " истинно.\nВысказывание "
    },
    {
      "include": {
        "value": "A\\to B"
      }
    },
    {
      "text": " ложно в единственном случае: если "
    },
    {
      "include": {
        "value": "A"
      }
    },
    {
      "text": " истинно, а "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " ложно.\nНаконец, "
    },
    {
      "include": {
        "value": "\\lnot A"
      }
    },
    {
      "text": " истинно в том и только том случае, когда "
    },
    {
      "include": {
        "value": "A"
      }
    },
    {
      "text": " ложно.\n\n\nИз всех связок больше всего вопросов вызывает импликация.\nВ самом деле, не очень понятно, почему надо считать, скажем, высказывания «если "
    },
    {
      "include": {
        "value": "2\\times 2=5"
      }
    },
    {
      "text": ", то "
    },
    {
      "include": {
        "value": "2\\times 2=4"
      }
    },
    {
      "text": "» и «если "
    },
    {
      "include": {
        "value": "2\\times 2=5"
      }
    },
    {
      "text": ", то "
    },
    {
      "include": {
        "value": "3\\times 3=1"
      }
    },
    {
      "text": "» истинными.\n(Именно так говорят наши таблицы: "
    },
    {
      "include": {
        "value": "Л\\toИ = Л\\toЛ = И"
      }
    },
    {
      "text": ".)\nНа самом деле  в таком определении есть свой резон.\nВсе согласны, что если число "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " делится на "
    },
    {
      "include": {
        "value": "4"
      }
    },
    {
      "text": ", то оно делится на "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ".\nЭто означает, что высказывание\n\n\n("
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " делится на "
    },
    {
      "include": {
        "value": "4"
      }
    },
    {
      "text": ") "
    },
    {
      "include": {
        "value": "\\to"
      }
    },
    {
      "text": " ("
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " делится на "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ")\n\n\nистинно при всех "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": ".\n\nПодставим сюда "
    },
    {
      "include": {
        "value": "x=5"
      }
    },
    {
      "text": ": обе части ложны, а утверждение в целом истинно.\nПри "
    },
    {
      "include": {
        "value": "x=6"
      }
    },
    {
      "text": " посылка импликации ложна, а заключение истинно, и вся импликация истинна.\nНаконец, при "
    },
    {
      "include": {
        "value": "x=8"
      }
    },
    {
      "text": " посылка и заключение истинны и импликация в целом истинна.\nС другой стороны, обратное утверждение (если "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " делится на "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ", то "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " делится на "
    },
    {
      "include": {
        "value": "4"
      }
    },
    {
      "text": ") неверно, и число "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": " является контрпримером.\nПри этом посылка импликации истинна, заключение ложно, и сама импликация ложна.\nТаким образом, если считать, что истинность импликации определяется истинностью её частей (а не наличием между ними каких-то причинно-следственных связей), то все строки таблицы истинности обоснованы.\nЧтобы подчеркнуть такое узко-формальное понимание импликации, философски настроенные логики называют её «материальной импликацией».\n\n\nТеперь от неформальных разговоров перейдём к определениям.\nЭлементарные высказывания (из которых составляются более сложные) мы будем обозначать маленькими латинскими буквами и называть "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "пропозициональными переменными"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Пропозициональная переменная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Переменная!пропозициональная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nИз них строятся "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "пропозициональные формулы"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Пропозициональная формула|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Формула!пропозициональная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nпо таким правилам:\n\n"
    },
    {
      "tag": {
        "name": "#start:list",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "item",
        "body": {
          "blocks": [
            {
              "text": "Всякая пропозициональная переменная есть формула."
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "item",
        "body": {
          "blocks": [
            {
              "text": "Если "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " — пропозициональная формула, то "
            },
            {
              "include": {
                "value": "\\lnot A"
              }
            },
            {
              "text": " — пропозициональная формула."
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "item",
        "body": {
          "blocks": [
            {
              "text": "Если "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": " — пропозициональные формулы, то "
            },
            {
              "include": {
                "value": "(A\\land B)"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "(A\\lor B)"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "(A\\to B)"
              }
            },
            {
              "text": " — пропозициональные формулы."
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#end:list",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\nМожно ещё сказать так: формулы образуют минимальное множество, обладающее указанными свойствами (слово «минимальное» здесь существенно: ведь если бы мы объявили любую последовательность переменных, скобок и связок формулой, то эти три свойства были бы тоже выполнены).\n\n\nПусть формула "
    },
    {
      "include": {
        "value": "\\varphi"
      }
    },
    {
      "text": " содержит "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " пропозициональных переменных "
    },
    {
      "include": {
        "value": "p_1,p_2,\\dots,p_n"
      }
    },
    {
      "text": ".\nЕсли подставить вместо этих переменных истинностные значения ("
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "И"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " или "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "Л"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "), то по таблицам можно вычислить истинностное значение формулы в целом.\nТаким образом, формула задаёт некоторую функцию от "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " аргументов, каждый из которых может принимать значения "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "Л"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " и "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "И"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\nЗначения функции также лежат в множестве \\{"
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "Л"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ", "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "И"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\\}, которое мы будем обозначать "
    },
    {
      "include": {
        "value": "\\Bbb{B} "
      }
    },
    {
      "text": ".\nМы будем следовать уже упоминавшейся традиции и отождествлять "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "И"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " с единицей, а "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "Л"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " — с нулём, тем самым "
    },
    {
      "include": {
        "value": "\\Bbb{B} "
      }
    },
    {
      "text": " есть "
    },
    {
      "include": {
        "value": "\\{0,1\\} "
      }
    },
    {
      "text": ".\nФормула "
    },
    {
      "include": {
        "value": "\\varphi"
      }
    },
    {
      "text": " задаёт отображение типа "
    },
    {
      "include": {
        "value": "\\Bbb{B}^n\\to\\Bbb{B} "
      }
    },
    {
      "text": ".\nТакие отображения называют также "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "булевыми функциями "
            },
            {
              "include": {
                "value": "n"
              }
            },
            {
              "text": " аргументов"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Булева функция!"
            },
            {
              "include": {
                "value": "n"
              }
            },
            {
              "text": " аргументов|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!булева|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "format:pre",
        "body": {
          "blocks": [
            {
              "text": "Пример"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ". Рассмотрим формулу "
    },
    {
      "include": {
        "value": "(p\\land (q\\land \\lnot r))"
      }
    },
    {
      "text": ".\nОна истинна в единственном случае — когда "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": " истинны, а "
    },
    {
      "include": {
        "value": "r"
      }
    },
    {
      "text": " ложно (см. таблицу "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "example-conjunct"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ").\n\n\n"
    },
    {
      "tag": {
        "name": "table",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "include": {
                        "value": "p"
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "include": {
                        "value": "q"
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "include": {
                        "value": "r"
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "include": {
                        "value": "\\lnot r"
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "include": {
                        "value": "(q \\land \\lnot r)"
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "include": {
                        "value": "(p\\land(q\\land\\lnot r))"
                      }
                    },
                    {
                      "text": "\n"
                    }
                  ]
                },
                "attrList": [
                  {
                    "name": "head",
                    "value": "",
                    "empty": true
                  }
                ],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\nТаблица "
            },
            {
              "tag": {
                "name": "area",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "counter",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [
                          {
                            "name": "last",
                            "value": "chapter",
                            "empty": false
                          }
                        ],
                        "separator": ""
                      }
                    },
                    {
                      "text": "."
                    },
                    {
                      "tag": {
                        "name": "counter",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [
                          {
                            "name": "use",
                            "value": "table",
                            "empty": false
                          }
                        ],
                        "separator": ""
                      }
                    }
                  ]
                },
                "attrList": [
                  {
                    "name": "inline",
                    "value": "",
                    "empty": true
                  },
                  {
                    "name": "key",
                    "value": "example-conjunct_link",
                    "empty": false
                  }
                ],
                "separator": " "
              }
            },
            {
              "text": ". Таблица истинности для "
            },
            {
              "include": {
                "value": "(p\\land(q\\land \\lnot r))"
              }
            },
            {
              "text": ".\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "example-conjunct",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\nНекоторые формулы выражают логические законы — составные высказывания, истинные независимо от смысла их частей.\nТакие формулы (истинные при всех значениях входящих в них переменных) называют "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "тавтологиями"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Тавтология|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "format:pre",
        "body": {
          "blocks": [
            {
              "text": "Пример"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ". Формула "
    },
    {
      "include": {
        "value": "((p \\land q)\\to p)"
      }
    },
    {
      "text": " является тавтологией (это можно проверить, например, составив таблицу).\nОна выражает такой логический закон: из конъюнкции утверждений следует первое из них.\n\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Как выглядит симметричное утверждение для дизъюнкции и какая формула его выражает?\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\nДве формулы называют "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "эквивалентными"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Эквивалентные формулы|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Формулы!эквивалентные|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли они истинны при одних и тех же значениях переменных (другими словами, если они задают одну и ту же булеву функцию).\nНапример, легко проверить, что формула "
    },
    {
      "include": {
        "value": "(p \\land (p\\to q))"
      }
    },
    {
      "text": " истинна лишь при "
    },
    {
      "include": {
        "value": "p=q=И"
      }
    },
    {
      "text": ", и потому эквивалентна формуле "
    },
    {
      "include": {
        "value": "(p\\land q)"
      }
    },
    {
      "text": ".\n\n\nРассмотрим формулу "
    },
    {
      "include": {
        "value": "((p\\land q)\\lor q)"
      }
    },
    {
      "text": ".\nОна истинна, если переменная "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": " истинна, и ложна, если переменная "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": " ложна.\nХотелось бы сказать, что она эквивалентна формуле "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": ", но тут есть формальная трудность: она содержит две переменные и потому задаёт функцию от двух аргументов (типа "
    },
    {
      "include": {
        "value": "\\Bbb{B}\\times\\Bbb{B}\\to\\Bbb{B} "
      }
    },
    {
      "text": "), в то время как формула "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": " задаёт функцию одного аргумента.\nМы не будем обращать на это внимания и будем считать эти формулы эквивалентными.\nВообще, если есть список переменных "
    },
    {
      "include": {
        "value": "p_1,\\dots,p_n"
      }
    },
    {
      "text": ", содержащий все переменные некоторой формулы "
    },
    {
      "include": {
        "value": "\\varphi"
      }
    },
    {
      "text": " (и, возможно, ещё какие-то переменные), можно считать, что формула "
    },
    {
      "include": {
        "value": "\\varphi"
      }
    },
    {
      "text": " задаёт функцию от "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " аргументов, возможно, на деле зависящую не от всех аргументов (постоянную по некоторым аргументам)\n\n\nПосле сделанных оговорок легко проверить следующий факт: формулы "
    },
    {
      "include": {
        "value": "\\varphi"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "\\psi"
      }
    },
    {
      "text": " эквивалентны тогда и только тогда, когда формула "
    },
    {
      "include": {
        "value": "((\\varphi\\to\\psi)\\land{(\\psi\\to\\varphi))} "
      }
    },
    {
      "text": " является тавтологией.\nИспользуя сокращение "
    },
    {
      "include": {
        "value": "(p\\leftrightarrow q)"
      }
    },
    {
      "text": " для "
    },
    {
      "include": {
        "value": "((p\\to q)\\land{(q\\to p)})"
      }
    },
    {
      "text": ", можно записывать утверждения об эквивалентности формул в виде тавтологий.\nВот несколько таких эквивалентностей:\n\n\n"
    },
    {
      "tag": {
        "name": "def:theorem",
        "body": {
          "blocks": [
            {
              "text": "Формулы\n"
            },
            {
              "include": {
                "value": "\n\\begin{aligned}\n(p\\land q) &\\leftrightarrow (q \\land p);\\\\\n((p\\land q) \\land r) &\\leftrightarrow (p\\land (q \\land r));\\\\\n(p\\lor q) &\\leftrightarrow (q \\lor p);\\\\\n((p\\lor q) \\lor r) &\\leftrightarrow (p\\lor (q \\lor r));\\\\\n(p\\land(q\\lor r)) &\\leftrightarrow ((p\\land q)\\lor (p\\land r));\\\\\n(p\\lor(q\\land r)) &\\leftrightarrow ((p\\lor q)\\land (p\\lor r));\\\\\n\\lnot(p\\land q) &\\leftrightarrow (\\lnot p\\lor \\lnot q);\\\\\n\\lnot(p\\lor q) &\\leftrightarrow (\\lnot p\\land \\lnot q);\\\\\n(p\\lor (p \\land q)) &\\leftrightarrow p;\\\\\n(p\\land (p \\lor q)) &\\leftrightarrow p;\\\\\n(p\\to q) &\\leftrightarrow (\\lnot q\\to \\lnot p);\\\\\np &\\leftrightarrow \\lnot\\lnot p\n\\end{aligned}\n"
              }
            },
            {
              "text": "\nявляются тавтологиями.\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПервые четыре эквивалентности выражают коммутативность и ассоциативность конъюнкции и дизъюнкции.\nПроверим, например, вторую: левая и правая части истинны в единственном случае (когда все переменные истинны), и потому эквивалентны.\n(Для дизъюнкции удобнее смотреть, когда она ложна.)\n\nДве следующие эквивалентности означают  дистрибутивность — заметим, что в отличие от сложения и умножения в кольцах здесь верны оба свойства дистрибутивности.\nПроверить эквивалентность легко, если отдельно рассмотреть случаи истинного и ложного "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": ".\n\n\nСледующие два свойства, "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "законы Де Моргана"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Законы (правила) Де Моргана|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "ДеМорган"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nлегко проверить, зная, что конъюнкция истинна, а дизъюнкция ложна лишь в одном случае.\nЭти свойства иногда выражают словами: «конъюнкция двойственна дизъюнкции».\n\n\nДалее следуют два очевидных "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "закона поглощения"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Закон!поглощения|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n(один из них мы уже упоминали).\n\n\nЗа ними идёт правило "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "контрапозиции"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Правило!контрапозиции|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Контрапозиция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nкоторое говорит, в частности, что утверждения «если "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " совершенно, то "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " чётно» и «если "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " нечётно, то "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " несовершенно»  равносильны.\nХотя оно и очевидно проверяется с помощью таблиц истинности, с ним связаны любопытные парадоксы.\nВот один из них.\n\n\nБиолог А выдвинул гипотезу: все вороны чёрные.\nПроверяя её, он вышел во двор и обнаружил на дереве ворону.\nОна оказалось чёрной.\nБиолог А радуется — гипотеза подтверждается.\nБиолог Б переформулировал гипотезу так: все не-чёрные предметы — не вороны (применив наше правило контрапозиции) и не стал выходить во двор, а открыл холодильник и нашёл там оранжевый предмет.\nОн оказался апельсином, а не вороной.\nБиолог Б обрадовался — гипотеза подтверждается — и позвонил биологу А.\nТот удивляется — у него тоже есть апельсин в холодильнике, но с его точки зрения никакого отношения к его гипотезе апельсин не имеет,"
    },
    {
      "include": {
        "value": "\\dots"
      }
    },
    {
      "text": "\n\n\nДругой парадокс: с точки зрения формальной логики утверждения «кто не с нами, тот против нас» и «кто не против нас, тот с нами» равносильны.\n\n\nПоследнее (и очевидное) правило "
    },
    {
      "include": {
        "value": "p\\leftrightarrow \\lnot\\lnot p"
      }
    },
    {
      "text": " называется "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "снятием двойного отрицания"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Снятие двойного отрицания|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Перечисленные эквивалентности соответствуют свойствам операций на множествах: например, первая гарантирует, что "
            },
            {
              "include": {
                "value": "P\\cap Q=Q\\cap P"
              }
            },
            {
              "text": " для любых множеств "
            },
            {
              "include": {
                "value": "p"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "Q"
              }
            },
            {
              "text": ".\nКакие утверждения соответствуют остальным эквивалентностям?\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Две формулы, содержащие только переменные и связки "
            },
            {
              "include": {
                "value": "\\land"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "\\lor"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "\\lnot"
              }
            },
            {
              "text": ", эквивалентны.\nДокажите, что они останутся эквивалентными, если всюду заменить "
            },
            {
              "include": {
                "value": "\\land"
              }
            },
            {
              "text": " на "
            },
            {
              "include": {
                "value": "\\lor"
              }
            },
            {
              "text": " и наоборот.\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\nДалеко не все тавтологии имеют ясный интуитивный смысл.\nНапример, формула "
    },
    {
      "include": {
        "value": "(p\\to q)\\lor(q\\to p)"
      }
    },
    {
      "text": " является тавтологией (если одно из утверждений "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": " ложно, то из него следует всё, что угодно; если оба истинны, то тем более формула истинна), хотя и отчасти противоречит нашей интуиции — почему, собственно, из двух никак не связанных утверждений одно влечёт другое?\nЕщё более загадочна тавтология\n"
    },
    {
      "include": {
        "value": "\n((p\\to q)\\to p)\\to p\n"
      }
    },
    {
      "text": "\n(хотя её ничего не стоит проверить с помощью таблиц истинности).\n\n\n"
    },
    {
      "tag": {
        "name": "format:pre",
        "body": {
          "blocks": [
            {
              "text": "Отступление о пользе скобок"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Однозначность разбора|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nНа самом деле наше определение истинности содержит серьёзный пробел.\nЧтобы обнаружить его, зададим себе вопрос: зачем нужны скобки в формулах?\nПредставим себе, что мы изменим определение формулы, и будем говорить, что "
    },
    {
      "include": {
        "value": "P \\land Q"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "P \\lor Q"
      }
    },
    {
      "text": " являются формулами для любых "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "Q"
      }
    },
    {
      "text": ".\nОстанутся ли наши рассуждения в силе?\n\n\nЛегко понять, что мы столкнёмся с трудностью при определении булевой функции, соответствующей формуле.\nВ этом определении мы подставляли нули и единицы на место переменных и затем вычисляли значение формулы с помощью таблиц истинности для связок.\nНо теперь, когда мы изменили определение формулы, формула "
    },
    {
      "include": {
        "value": "p\\land q \\lor r"
      }
    },
    {
      "text": " может быть получена двумя способами — из формул "
    },
    {
      "include": {
        "value": "p\\land q"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "r"
      }
    },
    {
      "text": " с помощью операции "
    },
    {
      "include": {
        "value": "\\lor"
      }
    },
    {
      "text": " и из формул "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "q\\lor r"
      }
    },
    {
      "text": " с помощью операции "
    },
    {
      "include": {
        "value": "\\land"
      }
    },
    {
      "text": ".\nЭти два толкования дадут разный результат при попытке вычислить значение "
    },
    {
      "include": {
        "value": "0 \\land 0 \\lor 1"
      }
    },
    {
      "text": ".\n\n\nИз сказанного ясно, что скобки нужны, чтобы гарантировать однозначность синтаксического разбора формулы.\nТочнее говоря, верно такое утверждение:\n\n\n"
    },
    {
      "tag": {
        "name": "def:theorem",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Теорема!об однозначности разбора|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\nПропозициональная формула, не являющаяся переменной, может быть представлена ровно в одном из четырёх видов "
            },
            {
              "include": {
                "value": "(A\\land B)"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "(A\\lor B)"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "(A\\to B)"
              }
            },
            {
              "text": " или "
            },
            {
              "include": {
                "value": "\\lnot A"
              }
            },
            {
              "text": ", где "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": " — некоторые формулы, причём "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": " (в первых трёх случаях) восстанавливаются однозначно.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "name",
            "value": "однозначность разбора",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nФормальное доказательство можно провести так: назовём "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "скобочным итогом"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Скобочный итог|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nразницу между числом открывающихся и закрывающихся скобок.\nИндукцией по построению формулы легко доказать такую лемму:\n\n"
    },
    {
      "tag": {
        "name": "format:pre",
        "body": {
          "blocks": [
            {
              "text": "Лемма"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ". Скобочный итог формулы равен нулю.\nСкобочный итог любого начала формулы неотрицателен и равен нулю, лишь если это начало совпадает со всей формулой, пусто или состоит из одних символов отрицания.\n\nСлова «индукцией по построению» означают, что мы проверяем утверждение для переменных, а также доказываем, что если оно верно для формул "
    },
    {
      "include": {
        "value": "A"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": ", то оно верно и для формул "
    },
    {
      "include": {
        "value": "(A\\land B)"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "(A\\lor B)"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "(A\\to B)"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "\\lnot A"
      }
    },
    {
      "text": ".\n\nПосле того как лемма доказана, разбор формулы проводится так: если она начинается с отрицания, то может быть образована лишь по третьему правилу.\nЕсли же она начинается со скобки, то надо скобку удалить, а потом искать непустое начало, имеющее нулевой скобочный итог и не оканчивающееся на знак логической операции.\nТакое начало единственно (как легко проверить, используя лемму).\nЭто начало и будет первой частью формулы.\nТем самым формула разбирается однозначно.\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nНет смысла вдаваться в подробности этого (несложного) рассуждения: вообще-то алгоритмы разбора формул — это отдельная большая и практически важная тема (в первую очередь в связи с компиляторами).\nПриведённый нами алгоритм далеко не оптимален.\nС другой стороны, мы вообще можем обойти эту проблему, потребовав, чтобы при записи формул левая и правая скобки, окружающие формулу, связывались линией — тогда однозначность разбора формулы не вызывает вопросов, и больше ничего нам не надо.\n\n\nВ дальнейшем мы будем опускать скобки, если они либо не играют роли (например, можно написать конъюнкцию трёх членов, не указывая порядок действий в силу ассоциативности), либо ясны из контекста.\n\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Польский логик Лукасевич"
            },
            {
              "tag": {
                "name": "def:glossary",
                "body": {
                  "blocks": [
                    {
                      "text": "Лукасевич"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": " предлагал обходиться без скобок, записывая в формулах сначала знак операции, а потом операнды (без пробелов и разделителей).\nНапример, "
            },
            {
              "include": {
                "value": "(a+b)\\times(c+(d\\times e))"
              }
            },
            {
              "text": " в его обозначениях запишется как "
            },
            {
              "tag": {
                "name": "math",
                "body": {
                  "blocks": [
                    {
                      "text": "\\{\\{\\\\times\\}\\{+\\}ab\\{+\\}c\\{\\\\times\\}\\{d\\} \\{e\\}\\}"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ".\nЭту запись ещё называют "
            },
            {
              "tag": {
                "name": "em",
                "body": {
                  "blocks": [
                    {
                      "text": "польской"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Польская запись|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\nзаписью.\n"
            },
            {
              "tag": {
                "name": "em",
                "body": {
                  "blocks": [
                    {
                      "text": "Обратная"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": " польская запись отличается от неё тем, что знак операции идёт после операндов.\nПокажите, что в обоих случаях порядок действий восстанавливается однозначно.\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "def:section",
        "body": {
          "blocks": [
            {
              "text": "Полные системы связок"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "complete-connectives",
            "empty": false
          }
        ],
        "separator": " "
      }
    },
    {
      "text": "\n\n\nРассматриваемая нами система пропозициональных связок (в неё входят "
    },
    {
      "include": {
        "value": "\\land"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "\\lor"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "\\to"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "\\lnot"
      }
    },
    {
      "text": ") "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "полна"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Полная система связок"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nв следующем смысле:\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "name",
            "value": "Полнота системы связок",
            "empty": false
          },
          {
            "name": "key",
            "value": "completeness-connectives",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Теорема!о полноте системы связок ("
            },
            {
              "include": {
                "value": "\\land"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "\\lor"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "\\to"
              }
            },
            {
              "text": ",\n"
            },
            {
              "include": {
                "value": "\\lnot"
              }
            },
            {
              "text": ")|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nЛюбая булева функция (с любым числом аргументов) может быть записана в виде пропозициональной формулы.\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПроще всего пояснить это на примере.\nПусть, например, булева функция "
    },
    {
      "include": {
        "value": "\\varphi(p,q,r)"
      }
    },
    {
      "text": " задана таблицей "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "sample-truth-table"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n\n\n"
    },
    {
      "tag": {
        "name": "#start:table",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "key",
            "value": "sample-truth-table",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "p"
              }
            },
            {
              "text": " "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "q"
              }
            },
            {
              "text": " "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "r"
              }
            },
            {
              "text": " "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "\\varphi(p,q,r)"
              }
            }
          ]
        },
        "attrList": [
          {
            "name": "head",
            "value": "",
            "empty": true
          }
        ],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "area",
        "body": {
          "blocks": [
            {
              "include": {
                "value": "\n\\begin{aligned}\n     (\\lnot p \\land \\lnot q \\land \\lnot r) &\\lor\\\\\n  \\lor   (\\lnot p \\land q \\land r) &\\lor\\\\\n  \\lor   (p \\land q       \\land r)& \\phantom{\\lor} \\\\\n\\end{aligned}\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "align",
            "value": "center",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\nТаблица "
    },
    {
      "tag": {
        "name": "area",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "counter",
                "body": {
                  "blocks": []
                },
                "attrList": [
                  {
                    "name": "last",
                    "value": "chapter",
                    "empty": false
                  }
                ],
                "separator": ""
              }
            },
            {
              "text": "."
            },
            {
              "tag": {
                "name": "counter",
                "body": {
                  "blocks": []
                },
                "attrList": [
                  {
                    "name": "use",
                    "value": "table",
                    "empty": false
                  }
                ],
                "separator": ""
              }
            }
          ]
        },
        "attrList": [
          {
            "name": "inline",
            "value": "",
            "empty": true
          },
          {
            "name": "key",
            "value": "sample-truth-table_link",
            "empty": false
          }
        ],
        "separator": " "
      }
    },
    {
      "text": ". Булева функция и задающая её формула.\n"
    },
    {
      "tag": {
        "name": "#end:table",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nВ таблице есть три строки с единицами в правой колонке — три случая, когда булева функция истинна (равна "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ").\nНапишем три конъюнкции, каждая из которых покрывает один случай (а в остальных строках ложна), и соединим их дизъюнкцией.\nНужная формула построена.\n\n\nЯсно, что аналогичная конструкция применима для любой таблицы (с любым числом переменных).\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nДля формул подобного вида есть специальное название: формулы в "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "дизъюнктивной нормальной форме"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Дизъюнктивная нормальная форма|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Нормальная форма!дизъюнктивная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nБолее подробно:\n"
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "литералом"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Литерал|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nназывается переменная или отрицание переменной,\n"
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "конъюнктом"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Конъюнкт|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nназывается произвольная конъюнкция литералов, а дизъюнктивной нормальной формой называется дизъюнкция конъюнктов.\nВ нашем случае в каждый конъюнкт входит "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " литералов (где "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " — число переменных), а число конъюнктов равно числу строк с единицами и может меняться от нуля (тогда, правда, получается не совсем формула, а «пустая дизъюнкция», и её можно заменить какой-нибудь всегда ложной формулой типа "
    },
    {
      "include": {
        "value": "p\\land \\lnot p"
      }
    },
    {
      "text": ") до "
    },
    {
      "include": {
        "value": "2^n"
      }
    },
    {
      "text": " (если булева функция всегда истинна).\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nДлина построенной в доказательстве теоремы "
    },
    {
      "tag": {
        "name": "def:theorem:link",
        "body": {
          "blocks": [
            {
              "text": "completeness-connectives"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " формулы зависит от числа единиц: формула будет короткой, если единиц в таблице мало.\nА как написать (сравнительно) короткую формулу, если в таблице мало нулей, а в основном единицы?\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nИногда полезна двойственная "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "конъюнктивная нормальная форма"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Конъюнктивная нормальная форма|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Нормальная форма!конъюнктивная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nкоторая представляет собой конъюнкцию "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "дизъюнктов"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Дизъюнкт|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nКаждый дизъюнкт состоит из литералов, соединённых дизъюнкциями.\nТеорему "
    },
    {
      "tag": {
        "name": "def:theorem:link",
        "body": {
          "blocks": [
            {
              "text": "completeness-connectives"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " можно теперь усилить так:\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "key",
            "value": "dnf-cnf",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\nВсякая булева функция может быть выражена формулой, находящейся в дизъюнктивной нормальной форме, а также формулой, находящейся в конъюнктивной нормальной форме.\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПервая часть утверждения уже доказана.\nВторая часть аналогична первой, надо только для каждой строки с нулём написать подходящий дизъюнкт.\n\n\nМожно также представить функцию "
    },
    {
      "include": {
        "value": "\\lnot \\varphi"
      }
    },
    {
      "text": " в дизъюнктивной нормальной форме, а затем воспользоваться законами Де Моргана,\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Законы (правила) Де Моргана"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nчтобы внести отрицание внутрь.\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Проведите второй вариант рассуждения подробно."
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\nВообще говоря, определение нормальной формы не требует, чтобы в каждом конъюнкте (или дизъюнкте) встречались все переменные.\n(Повторять переменную больше одного раза смысла нет; если, например, переменная и её отрицание входят в одну конъюнкцию, то эта конъюнкция всегда ложна и её можно выбросить.)\n\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Приведите пример булевой функции "
            },
            {
              "include": {
                "value": "n"
              }
            },
            {
              "text": "~аргументов, у которой любая дизъюнктивная или конъюнктивная нормальная форма содержит лишь члены длины "
            },
            {
              "include": {
                "value": "n"
              }
            },
            {
              "text": ".\n(Указание: рассмотрите функцию, которая меняет своё значение при изменении значения любой переменной.)\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\nЗаметим, что при доказательстве теоремы "
    },
    {
      "tag": {
        "name": "def:theorem:link",
        "body": {
          "blocks": [
            {
              "text": "completeness-connectives"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " мы обошлись без импликации.\nЭто и не удивительно, так как она выражается через дизъюнкцию и отрицание:\n"
    },
    {
      "include": {
        "value": "\n(p\\to q) \\ \\leftrightarrow \\ (\\lnot p \\lor q)\n"
      }
    },
    {
      "text": "\n(проверьте!).\nМы могли бы обойтись только конъюнкцией и отрицанием, так как "
    },
    {
      "include": {
        "value": "\n(p\\lor q) \\ \\leftrightarrow \\ \\lnot(\\lnot p \\land \\lnot q),\n"
      }
    },
    {
      "text": "\nили только дизъюнкцией и отрицанием, так как "
    },
    {
      "include": {
        "value": "\n(p\\land q) \\ \\leftrightarrow \\ \\lnot(\\lnot p \\lor \\lnot q)\n"
      }
    },
    {
      "text": "\n(обе эквивалентности вытекают из законов Де Моргана; их легко проверить и непосредственно).\nКак говорят, система связок "
    },
    {
      "include": {
        "value": "\\land, \\lnot"
      }
    },
    {
      "text": ", а также система связок "
    },
    {
      "include": {
        "value": "\\lor, \\lnot"
      }
    },
    {
      "text": " являются "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "полными"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Полная система связок|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n(По определению это означает, что с их помощью можно записать любую булеву функцию.)\n\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Докажите, что система связок "
            },
            {
              "include": {
                "value": "\\lnot, \\to"
              }
            },
            {
              "text": " полна.\n(Указание: как записать через них дизъюнкцию?)\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\nА вот без отрицания обойтись нельзя.\nСистема связок "
    },
    {
      "include": {
        "value": "\\land, \\lor,\\to"
      }
    },
    {
      "text": " неполна — и по очень простой причине: если все переменные истинны, то любая их комбинация, содержащая только указанные связки, истинна.\n(Как говорят, все эти связки «сохраняют единицу».)\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Связки, сохраняющие "
            },
            {
              "include": {
                "value": "0"
              }
            },
            {
              "text": "/"
            },
            {
              "include": {
                "value": "1"
              }
            },
            {
              "text": "|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nЛюбая формула, составленная только с помощью связок "
    },
    {
      "include": {
        "value": "\\land"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "\\lor"
      }
    },
    {
      "text": ", задаёт монотонную булеву функцию "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Монотонная функция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Булева функция!монотонная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n(в том смысле, что от увеличения значения любого из аргументов значение функции может только возрасти — или остаться прежним).\nПокажите, что верно и обратное: любая монотонная булева функция либо постоянна (всюду истинна или всюду ложна), либо может быть выражена формулой, содержащей только "
    },
    {
      "include": {
        "value": "\\land"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "\\lor"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПусть "
    },
    {
      "include": {
        "value": "\\varphi\\to\\psi"
      }
    },
    {
      "text": " — тавтология.\nПокажите, что найдётся формула "
    },
    {
      "include": {
        "value": "\\tau"
      }
    },
    {
      "text": ", которая включает в себя только общие для "
    },
    {
      "include": {
        "value": "\\varphi"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "\\psi"
      }
    },
    {
      "text": " переменные, для которой формулы "
    },
    {
      "include": {
        "value": "(\\varphi\\to\\tau)"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "(\\tau\\to\\psi)"
      }
    },
    {
      "text": " являются тавтологиями.\n(Более общий вариант этого утверждения, в котором рассматриваются формулы с кванторами, называется "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "леммой Крейга"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".)\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Лемма!Крейга|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Крейг"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nВ принципе мы не обязаны ограничиваться четырьмя рассмотренными связками.\nЛюбая булева функция может играть роль связки.\nНапример, можно рассмотреть связку "
    },
    {
      "include": {
        "value": "(p \\texttt{ notand } q)"
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "\\texttt"
            },
            {
              "tag": {
                "name": "notand",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nзадаваемую эквивалентностью\n"
    },
    {
      "include": {
        "value": "\n(p \\texttt{ notand } q) \\ \\leftrightarrow \\ \\lnot(p\\land q)\n"
      }
    },
    {
      "text": "\n(словами: "
    },
    {
      "include": {
        "value": "(p\\texttt{ notand }q)"
      }
    },
    {
      "text": " ложно, лишь если "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": " истинны).\nЧерез неё выражается отрицание ("
    },
    {
      "include": {
        "value": "p \\texttt{ notand }p"
      }
    },
    {
      "text": "), после чего можно выразить конъюнкцию, а затем, как мы знаем, и вообще любую функцию.\n(Знакомые с цифровыми логическими схемами малого уровня интеграции хорошо знакомы с этим утверждением: достаточно большой запас схем И-НЕ позволяет реализовать любую требуемую зависимость выхода от входов.)\n\n\nДругая интересная полная система связок — сложение по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ", конъюнкция и константа "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": " (которую можно считать "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": "-арной связкой, задающей функцию от нуля аргументов).\nПредставленные в этой системе булевы функции становятся полиномами с коэффициентами в кольце вычетов по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ".\nИдея рассматривать булевы функции как полиномы (оказавшаяся неожиданно плодотворной в последние годы) была высказана в 1927~г.\\ российским математиком Иваном Ивановичем Жегалкиным.\n"
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Жегалкин"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\nНазовём "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "мономом"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Моном|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nконъюнкцию любого набора переменных или константу "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": " (которую естественно рассматривать как конъюнкцию нуля переменных).\nНазвание это естественно, так как при наших соглашениях ("
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": " обозначает истину, "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": " — ложь) конъюнкция соответствует умножению.\n\n\nНазовём "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "полиномом"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Полиномы (Жегалкина)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nсумму таких мономов по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": " (это значит, что "
    },
    {
      "include": {
        "value": "0\\oplus0 =0"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "0\\oplus 1=1\\oplus 0=1"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "1\\oplus1=0"
      }
    },
    {
      "text": ").\nЯсно, что два повторяющихся монома можно сократить (ведь сложение по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": "), так что будем рассматривать только полиномы без повторяющихся мономов.\nПри этом, естественно, порядок членов в мономе (как и порядок мономов в полиноме) роли не играет, их можно переставлять.\n\n\n"
    },
    {
      "tag": {
        "name": "def:theorem",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Теорема!о полиномах Жегалкина|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\nВсякая булева функция однозначно представляется таким полиномом."
            }
          ]
        },
        "attrList": [
          {
            "name": "name",
            "value": "о полиномах Жегалкина",
            "empty": false
          },
          {
            "name": "key",
            "value": "polynomials-boolean-functions",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nСуществование искомого полинома следует из теоремы "
    },
    {
      "tag": {
        "name": "def:theorem:link",
        "body": {
          "blocks": [
            {
              "text": "dnf-cnf"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ", так как конъюнкция есть умножение, отрицание — прибавление единицы, а дизъюнкцию можно через них выразить (получится "
    },
    {
      "include": {
        "value": "p+q+pq"
      }
    },
    {
      "text": ").\nНадо только заметить, что степени не нужны: переменные принимают значения "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ", так что "
    },
    {
      "include": {
        "value": "x^n"
      }
    },
    {
      "text": " можно заменить на "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": ".\n\n\nМожно также сослаться на известное из алгебры утверждение о том, что всякая функция с аргументами из конечного поля (в данном случае это двухэлементное поле вычетов по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ") задаётся полиномом.\n(Так получается новое доказательство теоремы "
    },
    {
      "tag": {
        "name": "def:theorem:link",
        "body": {
          "blocks": [
            {
              "text": "completeness-connectives"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".)\n\n\nДалее можно заметить, что полиномов столько же, сколько булевых функций, а именно "
    },
    {
      "include": {
        "value": "2^{2^n} "
      }
    },
    {
      "text": ".\nВ самом деле, булева функция может принимать любое из двух значений в каждой из "
    },
    {
      "include": {
        "value": "2^n"
      }
    },
    {
      "text": " точек булева куба "
    },
    {
      "include": {
        "value": "\\Bbb{B}^n"
      }
    },
    {
      "text": ", а многочлен может включать или не включать любой из "
    },
    {
      "include": {
        "value": "2^n"
      }
    },
    {
      "text": " мономов.\n(Мономов ровно "
    },
    {
      "include": {
        "value": "2^n"
      }
    },
    {
      "text": ", потому что каждый моном включает или не включает любую из "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " переменных.)\nПоэтому избытка полиномов нет, и если любая функция представима полиномом, то единственным образом.\n\n\nМожно и не ссылаться на сведения из алгебры и теорему "
    },
    {
      "tag": {
        "name": "def:theorem:link",
        "body": {
          "blocks": [
            {
              "text": "dnf-cnf"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ", а дать явную конструкцию.\nЭто удобно сделать индукцией по "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": ".\nПусть мы уже умеем представлять любую булеву функцию от "
    },
    {
      "include": {
        "value": "n-1"
      }
    },
    {
      "text": " аргументов с помощью полинома.\nТогда "
    },
    {
      "include": {
        "value": "\\varphi(p_1,\\dots,p_n)"
      }
    },
    {
      "text": " можно представить как\n"
    },
    {
      "include": {
        "value": "\n\\varphi(p_1,\\dots,p_n) =\n\\varphi(0, p_2,\\dots,p_{n})\n+[\\varphi(0,p_2,\\dots,p_{n})+\n\\varphi(1,p_2,\\dots,p_{n})]p_1\n"
      }
    },
    {
      "text": "\n(проверьте).\nОстаётся заметить, что правую часть можно представить полиномом по предположению индукции.\n\n\nДля единственности также есть другое доказательство: пусть два многочлена (имеющие степень "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": " по каждой переменной) равны при всех значениях переменных.\nТогда их сумма (или разность —\nвычисления происходят по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ") является ненулевым многочленом (содержит какие-то мономы), но тождественно равна нулю.\nТак не бывает, и это легко доказать по индукции.\nВ самом деле, любой многочлен "
    },
    {
      "include": {
        "value": "A(p_1,\\dots,p_n)"
      }
    },
    {
      "text": " можно представить в виде\n"
    },
    {
      "include": {
        "value": "\nA(p_1,\\dots,p_n)=B(p_2,\\dots,p_n)+p_1C(p_2,\\dots,p_n),\n"
      }
    },
    {
      "text": "\nгде "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "C"
      }
    },
    {
      "text": " — многочлены от меньшего числа переменных.\nПодставляя сначала "
    },
    {
      "include": {
        "value": "p_1=0"
      }
    },
    {
      "text": ", а затем "
    },
    {
      "include": {
        "value": "p_1=1"
      }
    },
    {
      "text": ", убеждаемся,\nчто многочлены "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "C"
      }
    },
    {
      "text": " равны нулю во всех точках, и потому (согласно предположению индукции) равны нулю как многочлены (не содержат мономов).\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПусть "
    },
    {
      "include": {
        "value": "F"
      }
    },
    {
      "text": " — произвольное поле.\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Поле"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nНазовём "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "мультилинейной"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Мультилинейная функция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!мультилинейная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nфункцией полином от "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " переменных с коэффициентами из "
    },
    {
      "include": {
        "value": "F"
      }
    },
    {
      "text": ", в котором все показатели степеней равны либо "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": ", либо "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ".\n(Таким образом, каждый моном в ней есть произведение коэффициента и некоторого набора переменных без повторений.) Будем рассматривать "
    },
    {
      "include": {
        "value": "\\Bbb{B}=\\{0,1\\} "
      }
    },
    {
      "text": " как подмножество "
    },
    {
      "include": {
        "value": "F"
      }
    },
    {
      "text": ".\nДокажите, что всякая булева функция "
    },
    {
      "include": {
        "value": "\\Bbb{B}^n\\to\\Bbb{B} "
      }
    },
    {
      "text": " однозначно продолжается до мультилинейной функции "
    },
    {
      "include": {
        "value": "F^n\\to F"
      }
    },
    {
      "text": ", и коэффициенты мультилинейной функции можно считать целыми числами.\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nЕсли рассматривать произвольные булевы функции в качестве связок, возникает вопрос: в каком случае набор булевых функций образует полный базис? (Это значит, что любая булева функция представляется в виде композиции функций из набора,  —е записывается в виде формулы, где связками служат функции набора.) Подобные вопросы вызывали в своё время большой интерес и были хорошо изучены.\nНачальным этапом явилось такое утверждение:\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "name",
            "value": "критерий Поста",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Критерий!Поста|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Пост"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nНабор булевых функций является полным тогда и только тогда, когда он не содержится целиком ни в одном из пяти следующих « предполных классов»:\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Предполные классы|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "list",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "item",
                "body": {
                  "blocks": [
                    {
                      "text": "монотонные функции;"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "item",
                "body": {
                  "blocks": [
                    {
                      "text": "функции, сохраняющие нуль;"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "item",
                "body": {
                  "blocks": [
                    {
                      "text": "функции, сохраняющие единицу;"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "item",
                "body": {
                  "blocks": [
                    {
                      "text": "линейные функции;"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "item",
                "body": {
                  "blocks": [
                    {
                      "text": "самодвойственные функции."
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n(Функция "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": " "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "монотонна"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Монотонная функция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!монотонная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли она монотонно неубывает по каждому из своих аргументов.\nФункция "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": " "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "сохраняет нуль/единицу"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!сохраняющая "
            },
            {
              "include": {
                "value": "0"
              }
            },
            {
              "text": "/"
            },
            {
              "include": {
                "value": "1"
              }
            },
            {
              "text": "|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли "
    },
    {
      "include": {
        "value": "f(0,\\dots,0)=0"
      }
    },
    {
      "text": " (соответственно "
    },
    {
      "include": {
        "value": "f(1,\\dots,1)=1"
      }
    },
    {
      "text": ").\nФункция "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": " "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "линейна"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Линейная функция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!линейная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли она представима многочленом, в котором все мономы содержат не более одной переменной.\nНаконец, функция "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": " называется "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "самодвойственной"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Самодвойственная функция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!самодвойственная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли "
    },
    {
      "include": {
        "value": "f(1-p_1,\\dots,1-p_n)=1-f(p_1,\\dots,p_n)"
      }
    },
    {
      "text": ".)\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nЕсли набор содержится в одном из классов, то и все композиции также не выходят за пределы этого класса (легко проверить для каждого из классов в отдельности) и поэтому набор не является полным.\nДокажем обратное утверждение.\nПусть для каждого класса выбрана какая-то функция, в нём не лежащая.\nУбедимся, что с помощью комбинаций выбранных функций можно получить все булевы функции.\n\n\nУ нас есть функция, не сохраняющая нуль.\nПодставим вместо всех аргументов одну и ту же переменную.\nПолучится функция от одного аргумента, отображающая нуль в единицу, то есть либо константа "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ", либо отрицание.\nСделав то же самое с функцией, не сохраняющей единицу, получим либо константу нуль, либо отрицание.\nТаким образом, у нас либо есть отрицание, либо обе константы "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ".\n\n\nЕсли есть обе константы, то всё равно можно получить отрицание.\nВозьмём немонотонную функцию.\nЛегко понять, что она должна менять значение с единицы на нуль при изменении какого-то одного аргумента с нуля на единицу (в самом деле, будем увеличивать аргументы по одному, в какой-то момент значение функции уменьшится.)\nЗафиксировав значения остальных аргументов (ведь мы считаем, что константы есть), получаем отрицание.\n\n\nИмея отрицание и несамодвойственную функцию, легко получить константы (если их не было).\nВ самом деле, несамодвойственность означает, что "
    },
    {
      "include": {
        "value": "f(x_1,\\dots,x_n)=f(1-x_1,\\dots,1-x_n)"
      }
    },
    {
      "text": "\nдля каких-то значений "
    },
    {
      "include": {
        "value": "x_1,\\dots,x_n\\in\\{0,1\\} "
      }
    },
    {
      "text": ".\nВместо нулевых значений переменных "
    },
    {
      "include": {
        "value": "x_1,\\dots,x_n"
      }
    },
    {
      "text": " подставим "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": ",\nвместо единиц подставим "
    },
    {
      "include": {
        "value": "\\lnot p"
      }
    },
    {
      "text": ", получится одна из констант.\nВторая получится отрицанием.\n\n\nТеперь у нас есть константы, отрицание и нелинейная функция "
    },
    {
      "include": {
        "value": "f(p_1,\\dots,p_n)"
      }
    },
    {
      "text": ".\nНелинейность означает, что в её представлении в виде многочлена есть моном, состоящий более чем из одной переменной.\nПусть, например, этот моном содержит переменные "
    },
    {
      "include": {
        "value": "p_1"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "p_2"
      }
    },
    {
      "text": ".\nСгруппируем члены по четырём группам и получим выражение\n"
    },
    {
      "include": {
        "value": "\np_1p_2 A(p_3,\\dots)+p_1B(p_3,\\dots)+p_2C(p_3,\\dots)+D(p_3,\\dots).\n"
      }
    },
    {
      "text": "\nПри этом многочлен "
    },
    {
      "include": {
        "value": "A(p_3,\\dots)"
      }
    },
    {
      "text": " заведомо отличен от нуля, поэтому можно так подставить константы вместо "
    },
    {
      "include": {
        "value": "p_3,\\dots,p_n"
      }
    },
    {
      "text": ", чтобы первое слагаемое не обратилось в нуль.\nТогда получим либо "
    },
    {
      "include": {
        "value": "p_1p_2+d"
      }
    },
    {
      "text": ", либо "
    },
    {
      "include": {
        "value": "p_1p_2 + p_1+d"
      }
    },
    {
      "text": ", либо "
    },
    {
      "include": {
        "value": "p_1p_2+p_2+d"
      }
    },
    {
      "text": ", либо "
    },
    {
      "include": {
        "value": "p_1p_2+p_1+p_2+d"
      }
    },
    {
      "text": ".\nСвободный член "
    },
    {
      "include": {
        "value": "d"
      }
    },
    {
      "text": " можно менять, если нужно (у нас есть отрицание), так что получается либо "
    },
    {
      "include": {
        "value": "p_1p_2"
      }
    },
    {
      "text": "\n(конъюнкция, и всё доказано), либо "
    },
    {
      "include": {
        "value": "p_1p_2+p_1=p_1(p_2+1)= p_1\\land\\lnot p_2"
      }
    },
    {
      "text": " (убираем отрицание, получаем конъюнкцию, всё доказано), либо "
    },
    {
      "include": {
        "value": "p_1p_2+p_2"
      }
    },
    {
      "text": " (аналогично), либо "
    },
    {
      "include": {
        "value": "p_1p_2+p_1+p_2= (1+p_1)(1+p_2)-1=\\lnot(\\lnot p_1\\land\\lnot p_2)=p_1\\lor p_2"
      }
    },
    {
      "text": " (дизъюнкция, всё доказано).\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "text": "\n"
    },
    {
      "text": "\n"
    }
  ]
}