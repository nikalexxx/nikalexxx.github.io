{
  "blocks": [
    {
      "text": "ЛЕКЦИИ ПО МАТЕМАТИЧЕСКОЙ ЛОГИКЕ И ТЕОРИИ АЛГОРИТМОВ\n\n\n"
    },
    {
      "tag": {
        "name": "authors",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "link",
                "body": {
                  "blocks": [
                    {
                      "text": "Н. К. Верещагин"
                    }
                  ]
                },
                "attrList": [
                  {
                    "name": "href",
                    "value": "http://lpcs.math.msu.su/~ver/",
                    "empty": false
                  }
                ],
                "separator": " "
              }
            },
            {
              "text": ",\n"
            },
            {
              "tag": {
                "name": "link",
                "body": {
                  "blocks": [
                    {
                      "text": "А.Шень"
                    }
                  ]
                },
                "attrList": [
                  {
                    "name": "href",
                    "value": "https://ru.wikipedia.org/wiki/Шень,_Александр_Ханиевич",
                    "empty": false
                  }
                ],
                "separator": " "
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "title",
        "body": {
          "blocks": [
            {
              "text": "Языки и исчисления"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "Электронная версия в процессе адаптации, это предупреждение будет убрано по окончанию (Николаичев А.С.)"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:chapter",
        "body": {
          "blocks": [
            {
              "text": "Логика высказываний"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "def:section",
        "body": {
          "blocks": [
            {
              "text": "Высказывания и операции"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n«Если число "
    },
    {
      "include": {
        "value": "\\pi"
      }
    },
    {
      "text": " рационально, то "
    },
    {
      "include": {
        "value": "\\pi"
      }
    },
    {
      "text": " — алгебраическое число.\nНо оно не алгебраическое. Значит, "
    },
    {
      "include": {
        "value": "\\pi"
      }
    },
    {
      "text": " не рационально.»\nМы не обязаны знать, что такое число "
    },
    {
      "include": {
        "value": "\\pi"
      }
    },
    {
      "text": ", какие числа называют рациональными и какие алгебраическими, чтобы признать, что это рассуждение правильно — в том смысле, что из двух сформулированных посылок действительно вытекает заключение.\nТакого рода ситуации — когда некоторое утверждение верно независимо от смысла входящих в него высказываний — составляют предмет "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "логики высказываний"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Логика высказываний|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\nТакое начало (особенно если учесть, что курс логики входил в программу философского факультета, где также изучалась «диалектическая логика») настораживает, но на самом деле наши\n"
    },
    {
      "tag": {
        "name": "#comment",
        "body": {
          "blocks": [
            {
              "text": "% в каком-то из ленинских музеев висела копия его\n% гимназического табеля: по закону Божьему у него\n% была пятёрка, а по логике - четвёрка...\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\nрассмотрения будут иметь вполне точный математический характер, хотя мы начнём с неформальных мотивировок.\n\n\n"
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "Высказывания"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Высказывание|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " могут быть\n"
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "истинными"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Истинное высказывание|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Высказывание!истинное|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nи "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "ложными"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Ложное высказывание|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Высказывание!ложное|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nНапример, «"
    },
    {
      "include": {
        "value": "2^{16}+1"
      }
    },
    {
      "text": " — простое число» — истинное высказывание, а «"
    },
    {
      "include": {
        "value": "2^{32}+1"
      }
    },
    {
      "text": " — простое число» — ложное (это число делится на "
    },
    {
      "include": {
        "value": "641"
      }
    },
    {
      "text": ").\nПро высказывание «существует бесконечно много простых "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": ", для которых "
    },
    {
      "include": {
        "value": "p+2"
      }
    },
    {
      "text": " — также простое» никто не берётся сказать наверняка, истинно оно или ложно.\nЗаметим, что «"
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " делится на "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": "» в этом смысле не является высказыванием, пока не сказано, чему равно "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": "; при разных "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " получаются разные высказывания, одни истинные (при чётном "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": "), другие — ложные (при нечётном "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": ").\n\n\nВысказывания можно соединять друг с другом с помощью «логических связок».\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Связки (логические)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Логические связки|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nЭти связки имеют довольно странные, но традиционные названия и обозначения (табл. "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "logic-connectives-names"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ").\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:table",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "align",
            "value": "center",
            "empty": false
          },
          {
            "name": "key",
            "value": "logic-connectives-names",
            "empty": false
          },
          {
            "name": "name",
            "value": "Логические связки, обозначения и названия.",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " связка "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " обозначение "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " название"
            }
          ]
        },
        "attrList": [
          {
            "name": "head",
            "value": "",
            "empty": true
          }
        ],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "A\\& B"
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "A\\land B"
              }
            },
            {
              "text": "\n\n\n"
            },
            {
              "include": {
                "value": "A\\texttt{ and }B"
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "конъюнкция\n"
            },
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Конъюнкция|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " или "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": " "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "A\\lor B"
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "A\\texttt{ or }B"
              }
            },
            {
              "text": " "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " дизъюнкция\n"
            },
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Дизъюнкция|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "не "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " неверно\n"
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "\n"
            },
            {
              "include": {
                "value": "\\lnot A"
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "\\sim\\!A"
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "\\overline{A} "
              }
            },
            {
              "text": "\n\n"
            },
            {
              "include": {
                "value": "\\texttt{not} A"
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "\nотрицание\n"
            },
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Отрицание|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "из "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " следует "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": "\n\nесли "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": ", то "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " влечёт "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": " — следствие "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "\n"
            },
            {
              "include": {
                "value": "A\\rightarrow B"
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "A\\Rightarrow B"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "include": {
                "value": "A\\supset B"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "include": {
                "value": "\\texttt{if }A\\texttt{ then }B"
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "\nимпликация\n\nследование\n"
            },
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Импликация (следование)|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Конъюнкция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Дизъюнкция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Отрицание|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Импликация (следование)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "#end:def:table",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nОтметим также, что в импликации "
    },
    {
      "include": {
        "value": "A\\Rightarrow B"
      }
    },
    {
      "text": " высказывание "
    },
    {
      "include": {
        "value": "A"
      }
    },
    {
      "text": " называют "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "посылкой"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Посылка импликации|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nили "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "антецедентом импликации"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Антецедент импликации|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nа "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " — "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "заключением"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Заключение импликации|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nили "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "консеквентом"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Консеквент импликации|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "#comment",
        "body": {
          "blocks": [
            {
              "text": "% омонимия с УК: заключение, следствие, посылка - случайна?"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\nГоворят также, что высказывание имеет "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "истинностное значение"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Истинностное значение высказывания|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Высказывание!истинностное значение|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "И"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " (истина),\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "И (истина)@"
            },
            {
              "tag": {
                "name": "format:b",
                "body": {
                  "blocks": [
                    {
                      "text": "И"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": " (истина)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли оно истинно, или "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "Л"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " (ложь),\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Л (ложь)@"
            },
            {
              "tag": {
                "name": "format:b",
                "body": {
                  "blocks": [
                    {
                      "text": "Л"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": " (ложь)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли оно ложно.\nИногда вместо "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "И"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " употребляется буква "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "T"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " (true) или число "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "T (true)@"
            },
            {
              "tag": {
                "name": "format:b",
                "body": {
                  "blocks": [
                    {
                      "text": "T"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": " (true)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "F (true)@"
            },
            {
              "tag": {
                "name": "format:b",
                "body": {
                  "blocks": [
                    {
                      "text": "F"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": " (false)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nа вместо "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "Л"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " — буква "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "F"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " (false) или число "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": ".\n(С первого взгляда идея произвольным образом выбрать числа "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": " кажется дикой — какая бы польза могла быть от, скажем, сложения истинностных значений?\nУдивительным образом в последние годы обнаружилось, что такая польза есть, и если оперировать с истиной и ложью как элементами конечного поля, можно получить много неожиданных результатов.\nНо это выходит за рамки нашей книги.)\n\n\nЛогические связки позволяют составлять сложные высказывания из простых.\nПри этом истинность составного высказывания определяется истинностью его частей в соответствии с таблицей "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "truth-tables"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n\n\n"
    },
    {
      "tag": {
        "name": "area",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "table",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "A"
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "B"
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "A\\land B"
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "A\\lor B"
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "A \\to B"
                              }
                            }
                          ]
                        },
                        "attrList": [
                          {
                            "name": "head",
                            "value": "",
                            "empty": true
                          }
                        ],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    },
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    },
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    },
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    },
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "tag": {
                "name": "table",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "A"
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "include": {
                                "value": "\\lnot A"
                              }
                            }
                          ]
                        },
                        "attrList": [
                          {
                            "name": "head",
                            "value": "",
                            "empty": true
                          }
                        ],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    },
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    },
                    {
                      "tag": {
                        "name": "row",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "И"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "col",
                                "body": {
                                  "blocks": []
                                },
                                "attrList": [],
                                "separator": ""
                              }
                            },
                            {
                              "text": " "
                            },
                            {
                              "tag": {
                                "name": "format:b",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Л"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": " "
                      }
                    },
                    {
                      "text": "\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n\n"
            },
            {
              "tag": {
                "name": "area",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "format:small",
                        "body": {
                          "blocks": [
                            {
                              "tag": {
                                "name": "format:i",
                                "body": {
                                  "blocks": [
                                    {
                                      "text": "Таблица "
                                    },
                                    {
                                      "tag": {
                                        "name": "area",
                                        "body": {
                                          "blocks": [
                                            {
                                              "tag": {
                                                "name": "counter",
                                                "body": {
                                                  "blocks": []
                                                },
                                                "attrList": [
                                                  {
                                                    "name": "last",
                                                    "value": "chapter",
                                                    "empty": false
                                                  }
                                                ],
                                                "separator": ""
                                              }
                                            },
                                            {
                                              "text": "."
                                            },
                                            {
                                              "tag": {
                                                "name": "counter",
                                                "body": {
                                                  "blocks": []
                                                },
                                                "attrList": [
                                                  {
                                                    "name": "use",
                                                    "value": "table",
                                                    "empty": false
                                                  }
                                                ],
                                                "separator": ""
                                              }
                                            }
                                          ]
                                        },
                                        "attrList": [
                                          {
                                            "name": "inline",
                                            "value": "",
                                            "empty": true
                                          },
                                          {
                                            "name": "key",
                                            "value": "truth-tables_link",
                                            "empty": false
                                          }
                                        ],
                                        "separator": " "
                                      }
                                    },
                                    {
                                      "text": ". Таблицы истинности для логических связок"
                                    }
                                  ]
                                },
                                "attrList": [],
                                "separator": " "
                              }
                            },
                            {
                              "text": "\n"
                            }
                          ]
                        },
                        "attrList": [],
                        "separator": "\n"
                      }
                    }
                  ]
                },
                "attrList": [
                  {
                    "name": "position",
                    "value": "center",
                    "empty": false
                  }
                ],
                "separator": "\n"
              }
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "truth-tables",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\nТе же правила можно изложить словесно.\nВысказывание "
    },
    {
      "include": {
        "value": "A\\land B"
      }
    },
    {
      "text": " истинно, если оба высказывания "
    },
    {
      "include": {
        "value": "A"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " истинны.\nВысказывание "
    },
    {
      "include": {
        "value": "A\\lor B"
      }
    },
    {
      "text": " истинно, если хотя бы одно из высказываний "
    },
    {
      "include": {
        "value": "A"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " истинно.\nВысказывание "
    },
    {
      "include": {
        "value": "A\\to B"
      }
    },
    {
      "text": " ложно в единственном случае: если "
    },
    {
      "include": {
        "value": "A"
      }
    },
    {
      "text": " истинно, а "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " ложно.\nНаконец, "
    },
    {
      "include": {
        "value": "\\lnot A"
      }
    },
    {
      "text": " истинно в том и только том случае, когда "
    },
    {
      "include": {
        "value": "A"
      }
    },
    {
      "text": " ложно.\n\n\nИз всех связок больше всего вопросов вызывает импликация.\nВ самом деле, не очень понятно, почему надо считать, скажем, высказывания «если "
    },
    {
      "include": {
        "value": "2\\times 2=5"
      }
    },
    {
      "text": ", то "
    },
    {
      "include": {
        "value": "2\\times 2=4"
      }
    },
    {
      "text": "» и «если "
    },
    {
      "include": {
        "value": "2\\times 2=5"
      }
    },
    {
      "text": ", то "
    },
    {
      "include": {
        "value": "3\\times 3=1"
      }
    },
    {
      "text": "» истинными.\n(Именно так говорят наши таблицы: "
    },
    {
      "include": {
        "value": "Л\\toИ = Л\\toЛ = И"
      }
    },
    {
      "text": ".)\nНа самом деле  в таком определении есть свой резон.\nВсе согласны, что если число "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " делится на "
    },
    {
      "include": {
        "value": "4"
      }
    },
    {
      "text": ", то оно делится на "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ".\nЭто означает, что высказывание\n\n\n("
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " делится на "
    },
    {
      "include": {
        "value": "4"
      }
    },
    {
      "text": ") "
    },
    {
      "include": {
        "value": "\\to"
      }
    },
    {
      "text": " ("
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " делится на "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ")\n\n\nистинно при всех "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": ".\n\nПодставим сюда "
    },
    {
      "include": {
        "value": "x=5"
      }
    },
    {
      "text": ": обе части ложны, а утверждение в целом истинно.\nПри "
    },
    {
      "include": {
        "value": "x=6"
      }
    },
    {
      "text": " посылка импликации ложна, а заключение истинно, и вся импликация истинна.\nНаконец, при "
    },
    {
      "include": {
        "value": "x=8"
      }
    },
    {
      "text": " посылка и заключение истинны и импликация в целом истинна.\nС другой стороны, обратное утверждение (если "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " делится на "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ", то "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " делится на "
    },
    {
      "include": {
        "value": "4"
      }
    },
    {
      "text": ") неверно, и число "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": " является контрпримером.\nПри этом посылка импликации истинна, заключение ложно, и сама импликация ложна.\nТаким образом, если считать, что истинность импликации определяется истинностью её частей (а не наличием между ними каких-то причинно-следственных связей), то все строки таблицы истинности обоснованы.\nЧтобы подчеркнуть такое узко-формальное понимание импликации, философски настроенные логики называют её «материальной импликацией».\n\n\nТеперь от неформальных разговоров перейдём к определениям.\nЭлементарные высказывания (из которых составляются более сложные) мы будем обозначать маленькими латинскими буквами и называть "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "пропозициональными переменными"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Пропозициональная переменная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Переменная!пропозициональная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nИз них строятся "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "пропозициональные формулы"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Пропозициональная формула|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Формула!пропозициональная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nпо таким правилам:\n\n"
    },
    {
      "tag": {
        "name": "#start:list",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "item",
        "body": {
          "blocks": [
            {
              "text": "Всякая пропозициональная переменная есть формула."
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "item",
        "body": {
          "blocks": [
            {
              "text": "Если "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " — пропозициональная формула, то "
            },
            {
              "include": {
                "value": "\\lnot A"
              }
            },
            {
              "text": " — пропозициональная формула."
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "item",
        "body": {
          "blocks": [
            {
              "text": "Если "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": " — пропозициональные формулы, то "
            },
            {
              "include": {
                "value": "(A\\land B)"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "(A\\lor B)"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "(A\\to B)"
              }
            },
            {
              "text": " — пропозициональные формулы."
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#end:list",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\nМожно ещё сказать так: формулы образуют минимальное множество, обладающее указанными свойствами (слово «минимальное» здесь существенно: ведь если бы мы объявили любую последовательность переменных, скобок и связок формулой, то эти три свойства были бы тоже выполнены).\n\n\nПусть формула "
    },
    {
      "include": {
        "value": "\\varphi"
      }
    },
    {
      "text": " содержит "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " пропозициональных переменных "
    },
    {
      "include": {
        "value": "p_1,p_2,\\dots,p_n"
      }
    },
    {
      "text": ".\nЕсли подставить вместо этих переменных истинностные значения ("
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "И"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " или "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "Л"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "), то по таблицам можно вычислить истинностное значение формулы в целом.\nТаким образом, формула задаёт некоторую функцию от "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " аргументов, каждый из которых может принимать значения "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "Л"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " и "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "И"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\nЗначения функции также лежат в множестве \\{"
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "Л"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ", "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "И"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\\}, которое мы будем обозначать "
    },
    {
      "include": {
        "value": "\\Bbb{B} "
      }
    },
    {
      "text": ".\nМы будем следовать уже упоминавшейся традиции и отождествлять "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "И"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " с единицей, а "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "Л"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " — с нулём, тем самым "
    },
    {
      "include": {
        "value": "\\Bbb{B} "
      }
    },
    {
      "text": " есть "
    },
    {
      "include": {
        "value": "\\{0,1\\} "
      }
    },
    {
      "text": ".\nФормула "
    },
    {
      "include": {
        "value": "\\varphi"
      }
    },
    {
      "text": " задаёт отображение типа "
    },
    {
      "include": {
        "value": "\\Bbb{B}^n\\to\\Bbb{B} "
      }
    },
    {
      "text": ".\nТакие отображения называют также "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "булевыми функциями "
            },
            {
              "include": {
                "value": "n"
              }
            },
            {
              "text": " аргументов"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Булева функция!"
            },
            {
              "include": {
                "value": "n"
              }
            },
            {
              "text": " аргументов|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!булева|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "format:pre",
        "body": {
          "blocks": [
            {
              "text": "Пример"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ". Рассмотрим формулу "
    },
    {
      "include": {
        "value": "(p\\land (q\\land \\lnot r))"
      }
    },
    {
      "text": ".\nОна истинна в единственном случае — когда "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": " истинны, а "
    },
    {
      "include": {
        "value": "r"
      }
    },
    {
      "text": " ложно (см. таблицу "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "example-conjunct"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ").\n\n\n"
    },
    {
      "tag": {
        "name": "table",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "include": {
                        "value": "p"
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "include": {
                        "value": "q"
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "include": {
                        "value": "r"
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "include": {
                        "value": "\\lnot r"
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "include": {
                        "value": "(q \\land \\lnot r)"
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " "
                    },
                    {
                      "include": {
                        "value": "(p\\land(q\\land\\lnot r))"
                      }
                    },
                    {
                      "text": "\n"
                    }
                  ]
                },
                "attrList": [
                  {
                    "name": "head",
                    "value": "",
                    "empty": true
                  }
                ],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "row",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 1 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0 "
                    },
                    {
                      "tag": {
                        "name": "col",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [],
                        "separator": ""
                      }
                    },
                    {
                      "text": " 0"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\nТаблица "
            },
            {
              "tag": {
                "name": "area",
                "body": {
                  "blocks": [
                    {
                      "tag": {
                        "name": "counter",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [
                          {
                            "name": "last",
                            "value": "chapter",
                            "empty": false
                          }
                        ],
                        "separator": ""
                      }
                    },
                    {
                      "text": "."
                    },
                    {
                      "tag": {
                        "name": "counter",
                        "body": {
                          "blocks": []
                        },
                        "attrList": [
                          {
                            "name": "use",
                            "value": "table",
                            "empty": false
                          }
                        ],
                        "separator": ""
                      }
                    }
                  ]
                },
                "attrList": [
                  {
                    "name": "inline",
                    "value": "",
                    "empty": true
                  },
                  {
                    "name": "key",
                    "value": "example-conjunct_link",
                    "empty": false
                  }
                ],
                "separator": " "
              }
            },
            {
              "text": ". Таблица истинности для "
            },
            {
              "include": {
                "value": "(p\\land(q\\land \\lnot r))"
              }
            },
            {
              "text": ".\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "example-conjunct",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\nНекоторые формулы выражают логические законы — составные высказывания, истинные независимо от смысла их частей.\nТакие формулы (истинные при всех значениях входящих в них переменных) называют "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "тавтологиями"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Тавтология|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "format:pre",
        "body": {
          "blocks": [
            {
              "text": "Пример"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ". Формула "
    },
    {
      "include": {
        "value": "((p \\land q)\\to p)"
      }
    },
    {
      "text": " является тавтологией (это можно проверить, например, составив таблицу).\nОна выражает такой логический закон: из конъюнкции утверждений следует первое из них.\n\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Как выглядит симметричное утверждение для дизъюнкции и какая формула его выражает?\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\nДве формулы называют "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "эквивалентными"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Эквивалентные формулы|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Формулы!эквивалентные|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли они истинны при одних и тех же значениях переменных (другими словами, если они задают одну и ту же булеву функцию).\nНапример, легко проверить, что формула "
    },
    {
      "include": {
        "value": "(p \\land (p\\to q))"
      }
    },
    {
      "text": " истинна лишь при "
    },
    {
      "include": {
        "value": "p=q=И"
      }
    },
    {
      "text": ", и потому эквивалентна формуле "
    },
    {
      "include": {
        "value": "(p\\land q)"
      }
    },
    {
      "text": ".\n\n\nРассмотрим формулу "
    },
    {
      "include": {
        "value": "((p\\land q)\\lor q)"
      }
    },
    {
      "text": ".\nОна истинна, если переменная "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": " истинна, и ложна, если переменная "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": " ложна.\nХотелось бы сказать, что она эквивалентна формуле "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": ", но тут есть формальная трудность: она содержит две переменные и потому задаёт функцию от двух аргументов (типа "
    },
    {
      "include": {
        "value": "\\Bbb{B}\\times\\Bbb{B}\\to\\Bbb{B} "
      }
    },
    {
      "text": "), в то время как формула "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": " задаёт функцию одного аргумента.\nМы не будем обращать на это внимания и будем считать эти формулы эквивалентными.\nВообще, если есть список переменных "
    },
    {
      "include": {
        "value": "p_1,\\dots,p_n"
      }
    },
    {
      "text": ", содержащий все переменные некоторой формулы "
    },
    {
      "include": {
        "value": "\\varphi"
      }
    },
    {
      "text": " (и, возможно, ещё какие-то переменные), можно считать, что формула "
    },
    {
      "include": {
        "value": "\\varphi"
      }
    },
    {
      "text": " задаёт функцию от "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " аргументов, возможно, на деле зависящую не от всех аргументов (постоянную по некоторым аргументам)\n\n\nПосле сделанных оговорок легко проверить следующий факт: формулы "
    },
    {
      "include": {
        "value": "\\varphi"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "\\psi"
      }
    },
    {
      "text": " эквивалентны тогда и только тогда, когда формула "
    },
    {
      "include": {
        "value": "((\\varphi\\to\\psi)\\land{(\\psi\\to\\varphi))} "
      }
    },
    {
      "text": " является тавтологией.\nИспользуя сокращение "
    },
    {
      "include": {
        "value": "(p\\leftrightarrow q)"
      }
    },
    {
      "text": " для "
    },
    {
      "include": {
        "value": "((p\\to q)\\land{(q\\to p)})"
      }
    },
    {
      "text": ", можно записывать утверждения об эквивалентности формул в виде тавтологий.\nВот несколько таких эквивалентностей:\n\n\n"
    },
    {
      "tag": {
        "name": "def:theorem",
        "body": {
          "blocks": [
            {
              "text": "Формулы\n"
            },
            {
              "include": {
                "value": "\n\\begin{aligned}\n(p\\land q) &\\leftrightarrow (q \\land p);\\\\\n((p\\land q) \\land r) &\\leftrightarrow (p\\land (q \\land r));\\\\\n(p\\lor q) &\\leftrightarrow (q \\lor p);\\\\\n((p\\lor q) \\lor r) &\\leftrightarrow (p\\lor (q \\lor r));\\\\\n(p\\land(q\\lor r)) &\\leftrightarrow ((p\\land q)\\lor (p\\land r));\\\\\n(p\\lor(q\\land r)) &\\leftrightarrow ((p\\lor q)\\land (p\\lor r));\\\\\n\\lnot(p\\land q) &\\leftrightarrow (\\lnot p\\lor \\lnot q);\\\\\n\\lnot(p\\lor q) &\\leftrightarrow (\\lnot p\\land \\lnot q);\\\\\n(p\\lor (p \\land q)) &\\leftrightarrow p;\\\\\n(p\\land (p \\lor q)) &\\leftrightarrow p;\\\\\n(p\\to q) &\\leftrightarrow (\\lnot q\\to \\lnot p);\\\\\np &\\leftrightarrow \\lnot\\lnot p\n\\end{aligned}\n"
              }
            },
            {
              "text": "\nявляются тавтологиями.\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПервые четыре эквивалентности выражают коммутативность и ассоциативность конъюнкции и дизъюнкции.\nПроверим, например, вторую: левая и правая части истинны в единственном случае (когда все переменные истинны), и потому эквивалентны.\n(Для дизъюнкции удобнее смотреть, когда она ложна.)\n\nДве следующие эквивалентности означают  дистрибутивность — заметим, что в отличие от сложения и умножения в кольцах здесь верны оба свойства дистрибутивности.\nПроверить эквивалентность легко, если отдельно рассмотреть случаи истинного и ложного "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": ".\n\n\nСледующие два свойства, "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "законы Де Моргана"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Законы (правила) Де Моргана|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "ДеМорган"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nлегко проверить, зная, что конъюнкция истинна, а дизъюнкция ложна лишь в одном случае.\nЭти свойства иногда выражают словами: «конъюнкция двойственна дизъюнкции».\n\n\nДалее следуют два очевидных "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "закона поглощения"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Закон!поглощения|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n(один из них мы уже упоминали).\n\n\nЗа ними идёт правило "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "контрапозиции"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Правило!контрапозиции|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Контрапозиция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nкоторое говорит, в частности, что утверждения «если "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " совершенно, то "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " чётно» и «если "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " нечётно, то "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " несовершенно»  равносильны.\nХотя оно и очевидно проверяется с помощью таблиц истинности, с ним связаны любопытные парадоксы.\nВот один из них.\n\n\nБиолог А выдвинул гипотезу: все вороны чёрные.\nПроверяя её, он вышел во двор и обнаружил на дереве ворону.\nОна оказалось чёрной.\nБиолог А радуется — гипотеза подтверждается.\nБиолог Б переформулировал гипотезу так: все не-чёрные предметы — не вороны (применив наше правило контрапозиции) и не стал выходить во двор, а открыл холодильник и нашёл там оранжевый предмет.\nОн оказался апельсином, а не вороной.\nБиолог Б обрадовался — гипотеза подтверждается — и позвонил биологу А.\nТот удивляется — у него тоже есть апельсин в холодильнике, но с его точки зрения никакого отношения к его гипотезе апельсин не имеет,"
    },
    {
      "include": {
        "value": "\\dots"
      }
    },
    {
      "text": "\n\n\nДругой парадокс: с точки зрения формальной логики утверждения «кто не с нами, тот против нас» и «кто не против нас, тот с нами» равносильны.\n\n\nПоследнее (и очевидное) правило "
    },
    {
      "include": {
        "value": "p\\leftrightarrow \\lnot\\lnot p"
      }
    },
    {
      "text": " называется "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "снятием двойного отрицания"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Снятие двойного отрицания|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Перечисленные эквивалентности соответствуют свойствам операций на множествах: например, первая гарантирует, что "
            },
            {
              "include": {
                "value": "P\\cap Q=Q\\cap P"
              }
            },
            {
              "text": " для любых множеств "
            },
            {
              "include": {
                "value": "p"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "Q"
              }
            },
            {
              "text": ".\nКакие утверждения соответствуют остальным эквивалентностям?\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Две формулы, содержащие только переменные и связки "
            },
            {
              "include": {
                "value": "\\land"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "\\lor"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "\\lnot"
              }
            },
            {
              "text": ", эквивалентны.\nДокажите, что они останутся эквивалентными, если всюду заменить "
            },
            {
              "include": {
                "value": "\\land"
              }
            },
            {
              "text": " на "
            },
            {
              "include": {
                "value": "\\lor"
              }
            },
            {
              "text": " и наоборот.\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\nДалеко не все тавтологии имеют ясный интуитивный смысл.\nНапример, формула "
    },
    {
      "include": {
        "value": "(p\\to q)\\lor(q\\to p)"
      }
    },
    {
      "text": " является тавтологией (если одно из утверждений "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": " ложно, то из него следует всё, что угодно; если оба истинны, то тем более формула истинна), хотя и отчасти противоречит нашей интуиции — почему, собственно, из двух никак не связанных утверждений одно влечёт другое?\nЕщё более загадочна тавтология\n"
    },
    {
      "include": {
        "value": "\n((p\\to q)\\to p)\\to p\n"
      }
    },
    {
      "text": "\n(хотя её ничего не стоит проверить с помощью таблиц истинности).\n\n\n"
    },
    {
      "tag": {
        "name": "format:pre",
        "body": {
          "blocks": [
            {
              "text": "Отступление о пользе скобок"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Однозначность разбора|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nНа самом деле наше определение истинности содержит серьёзный пробел.\nЧтобы обнаружить его, зададим себе вопрос: зачем нужны скобки в формулах?\nПредставим себе, что мы изменим определение формулы, и будем говорить, что "
    },
    {
      "include": {
        "value": "P \\land Q"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "P \\lor Q"
      }
    },
    {
      "text": " являются формулами для любых "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "Q"
      }
    },
    {
      "text": ".\nОстанутся ли наши рассуждения в силе?\n\n\nЛегко понять, что мы столкнёмся с трудностью при определении булевой функции, соответствующей формуле.\nВ этом определении мы подставляли нули и единицы на место переменных и затем вычисляли значение формулы с помощью таблиц истинности для связок.\nНо теперь, когда мы изменили определение формулы, формула "
    },
    {
      "include": {
        "value": "p\\land q \\lor r"
      }
    },
    {
      "text": " может быть получена двумя способами — из формул "
    },
    {
      "include": {
        "value": "p\\land q"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "r"
      }
    },
    {
      "text": " с помощью операции "
    },
    {
      "include": {
        "value": "\\lor"
      }
    },
    {
      "text": " и из формул "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "q\\lor r"
      }
    },
    {
      "text": " с помощью операции "
    },
    {
      "include": {
        "value": "\\land"
      }
    },
    {
      "text": ".\nЭти два толкования дадут разный результат при попытке вычислить значение "
    },
    {
      "include": {
        "value": "0 \\land 0 \\lor 1"
      }
    },
    {
      "text": ".\n\n\nИз сказанного ясно, что скобки нужны, чтобы гарантировать однозначность синтаксического разбора формулы.\nТочнее говоря, верно такое утверждение:\n\n\n"
    },
    {
      "tag": {
        "name": "def:theorem",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Теорема!об однозначности разбора|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\nПропозициональная формула, не являющаяся переменной, может быть представлена ровно в одном из четырёх видов "
            },
            {
              "include": {
                "value": "(A\\land B)"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "(A\\lor B)"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "(A\\to B)"
              }
            },
            {
              "text": " или "
            },
            {
              "include": {
                "value": "\\lnot A"
              }
            },
            {
              "text": ", где "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": " — некоторые формулы, причём "
            },
            {
              "include": {
                "value": "A"
              }
            },
            {
              "text": " и "
            },
            {
              "include": {
                "value": "B"
              }
            },
            {
              "text": " (в первых трёх случаях) восстанавливаются однозначно.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "name",
            "value": "однозначность разбора",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nФормальное доказательство можно провести так: назовём "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "скобочным итогом"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Скобочный итог|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nразницу между числом открывающихся и закрывающихся скобок.\nИндукцией по построению формулы легко доказать такую лемму:\n\n"
    },
    {
      "tag": {
        "name": "format:pre",
        "body": {
          "blocks": [
            {
              "text": "Лемма"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ". Скобочный итог формулы равен нулю.\nСкобочный итог любого начала формулы неотрицателен и равен нулю, лишь если это начало совпадает со всей формулой, пусто или состоит из одних символов отрицания.\n\nСлова «индукцией по построению» означают, что мы проверяем утверждение для переменных, а также доказываем, что если оно верно для формул "
    },
    {
      "include": {
        "value": "A"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": ", то оно верно и для формул "
    },
    {
      "include": {
        "value": "(A\\land B)"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "(A\\lor B)"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "(A\\to B)"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "\\lnot A"
      }
    },
    {
      "text": ".\n\nПосле того как лемма доказана, разбор формулы проводится так: если она начинается с отрицания, то может быть образована лишь по третьему правилу.\nЕсли же она начинается со скобки, то надо скобку удалить, а потом искать непустое начало, имеющее нулевой скобочный итог и не оканчивающееся на знак логической операции.\nТакое начало единственно (как легко проверить, используя лемму).\nЭто начало и будет первой частью формулы.\nТем самым формула разбирается однозначно.\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nНет смысла вдаваться в подробности этого (несложного) рассуждения: вообще-то алгоритмы разбора формул — это отдельная большая и практически важная тема (в первую очередь в связи с компиляторами).\nПриведённый нами алгоритм далеко не оптимален.\nС другой стороны, мы вообще можем обойти эту проблему, потребовав, чтобы при записи формул левая и правая скобки, окружающие формулу, связывались линией — тогда однозначность разбора формулы не вызывает вопросов, и больше ничего нам не надо.\n\n\nВ дальнейшем мы будем опускать скобки, если они либо не играют роли (например, можно написать конъюнкцию трёх членов, не указывая порядок действий в силу ассоциативности), либо ясны из контекста.\n\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Польский логик Лукасевич"
            },
            {
              "tag": {
                "name": "def:glossary",
                "body": {
                  "blocks": [
                    {
                      "text": "Лукасевич"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": " предлагал обходиться без скобок, записывая в формулах сначала знак операции, а потом операнды (без пробелов и разделителей).\nНапример, "
            },
            {
              "include": {
                "value": "(a+b)\\times(c+(d\\times e))"
              }
            },
            {
              "text": " в его обозначениях запишется как "
            },
            {
              "tag": {
                "name": "math",
                "body": {
                  "blocks": [
                    {
                      "text": "\\{\\{\\\\times\\}\\{+\\}ab\\{+\\}c\\{\\\\times\\}\\{d\\} \\{e\\}\\}"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ".\nЭту запись ещё называют "
            },
            {
              "tag": {
                "name": "em",
                "body": {
                  "blocks": [
                    {
                      "text": "польской"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Польская запись|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\nзаписью.\n"
            },
            {
              "tag": {
                "name": "em",
                "body": {
                  "blocks": [
                    {
                      "text": "Обратная"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": " польская запись отличается от неё тем, что знак операции идёт после операндов.\nПокажите, что в обоих случаях порядок действий восстанавливается однозначно.\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "def:section",
        "body": {
          "blocks": [
            {
              "text": "Полные системы связок"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "complete-connectives",
            "empty": false
          }
        ],
        "separator": " "
      }
    },
    {
      "text": "\n\n\nРассматриваемая нами система пропозициональных связок (в неё входят "
    },
    {
      "include": {
        "value": "\\land"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "\\lor"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "\\to"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "\\lnot"
      }
    },
    {
      "text": ") "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "полна"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Полная система связок"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nв следующем смысле:\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "name",
            "value": "Полнота системы связок",
            "empty": false
          },
          {
            "name": "key",
            "value": "completeness-connectives",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Теорема!о полноте системы связок ("
            },
            {
              "include": {
                "value": "\\land"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "\\lor"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "\\to"
              }
            },
            {
              "text": ",\n"
            },
            {
              "include": {
                "value": "\\lnot"
              }
            },
            {
              "text": ")|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nЛюбая булева функция (с любым числом аргументов) может быть записана в виде пропозициональной формулы.\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПроще всего пояснить это на примере.\nПусть, например, булева функция "
    },
    {
      "include": {
        "value": "\\varphi(p,q,r)"
      }
    },
    {
      "text": " задана таблицей "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "sample-truth-table"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n\n\n"
    },
    {
      "tag": {
        "name": "#start:table",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "key",
            "value": "sample-truth-table",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "p"
              }
            },
            {
              "text": " "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "q"
              }
            },
            {
              "text": " "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "r"
              }
            },
            {
              "text": " "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " "
            },
            {
              "include": {
                "value": "\\varphi(p,q,r)"
              }
            }
          ]
        },
        "attrList": [
          {
            "name": "head",
            "value": "",
            "empty": true
          }
        ],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 0"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "row",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1 "
            },
            {
              "tag": {
                "name": "col",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": " 1"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "area",
        "body": {
          "blocks": [
            {
              "include": {
                "value": "\n\\begin{aligned}\n     (\\lnot p \\land \\lnot q \\land \\lnot r) &\\lor\\\\\n  \\lor   (\\lnot p \\land q \\land r) &\\lor\\\\\n  \\lor   (p \\land q       \\land r)& \\phantom{\\lor} \\\\\n\\end{aligned}\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "align",
            "value": "center",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\nТаблица "
    },
    {
      "tag": {
        "name": "area",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "counter",
                "body": {
                  "blocks": []
                },
                "attrList": [
                  {
                    "name": "last",
                    "value": "chapter",
                    "empty": false
                  }
                ],
                "separator": ""
              }
            },
            {
              "text": "."
            },
            {
              "tag": {
                "name": "counter",
                "body": {
                  "blocks": []
                },
                "attrList": [
                  {
                    "name": "use",
                    "value": "table",
                    "empty": false
                  }
                ],
                "separator": ""
              }
            }
          ]
        },
        "attrList": [
          {
            "name": "inline",
            "value": "",
            "empty": true
          },
          {
            "name": "key",
            "value": "sample-truth-table_link",
            "empty": false
          }
        ],
        "separator": " "
      }
    },
    {
      "text": ". Булева функция и задающая её формула.\n"
    },
    {
      "tag": {
        "name": "#end:table",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nВ таблице есть три строки с единицами в правой колонке — три случая, когда булева функция истинна (равна "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ").\nНапишем три конъюнкции, каждая из которых покрывает один случай (а в остальных строках ложна), и соединим их дизъюнкцией.\nНужная формула построена.\n\n\nЯсно, что аналогичная конструкция применима для любой таблицы (с любым числом переменных).\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nДля формул подобного вида есть специальное название: формулы в "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "дизъюнктивной нормальной форме"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Дизъюнктивная нормальная форма|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Нормальная форма!дизъюнктивная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nБолее подробно:\n"
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "литералом"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Литерал|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nназывается переменная или отрицание переменной,\n"
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "конъюнктом"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Конъюнкт|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nназывается произвольная конъюнкция литералов, а дизъюнктивной нормальной формой называется дизъюнкция конъюнктов.\nВ нашем случае в каждый конъюнкт входит "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " литералов (где "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " — число переменных), а число конъюнктов равно числу строк с единицами и может меняться от нуля (тогда, правда, получается не совсем формула, а «пустая дизъюнкция», и её можно заменить какой-нибудь всегда ложной формулой типа "
    },
    {
      "include": {
        "value": "p\\land \\lnot p"
      }
    },
    {
      "text": ") до "
    },
    {
      "include": {
        "value": "2^n"
      }
    },
    {
      "text": " (если булева функция всегда истинна).\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nДлина построенной в доказательстве теоремы "
    },
    {
      "tag": {
        "name": "def:theorem:link",
        "body": {
          "blocks": [
            {
              "text": "completeness-connectives"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " формулы зависит от числа единиц: формула будет короткой, если единиц в таблице мало.\nА как написать (сравнительно) короткую формулу, если в таблице мало нулей, а в основном единицы?\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nИногда полезна двойственная "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "конъюнктивная нормальная форма"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Конъюнктивная нормальная форма|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Нормальная форма!конъюнктивная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nкоторая представляет собой конъюнкцию "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "дизъюнктов"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Дизъюнкт|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nКаждый дизъюнкт состоит из литералов, соединённых дизъюнкциями.\nТеорему "
    },
    {
      "tag": {
        "name": "def:theorem:link",
        "body": {
          "blocks": [
            {
              "text": "completeness-connectives"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " можно теперь усилить так:\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "key",
            "value": "dnf-cnf",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\nВсякая булева функция может быть выражена формулой, находящейся в дизъюнктивной нормальной форме, а также формулой, находящейся в конъюнктивной нормальной форме.\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПервая часть утверждения уже доказана.\nВторая часть аналогична первой, надо только для каждой строки с нулём написать подходящий дизъюнкт.\n\n\nМожно также представить функцию "
    },
    {
      "include": {
        "value": "\\lnot \\varphi"
      }
    },
    {
      "text": " в дизъюнктивной нормальной форме, а затем воспользоваться законами Де Моргана,\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Законы (правила) Де Моргана"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nчтобы внести отрицание внутрь.\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Проведите второй вариант рассуждения подробно."
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\nВообще говоря, определение нормальной формы не требует, чтобы в каждом конъюнкте (или дизъюнкте) встречались все переменные.\n(Повторять переменную больше одного раза смысла нет; если, например, переменная и её отрицание входят в одну конъюнкцию, то эта конъюнкция всегда ложна и её можно выбросить.)\n\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Приведите пример булевой функции "
            },
            {
              "include": {
                "value": "n"
              }
            },
            {
              "text": "~аргументов, у которой любая дизъюнктивная или конъюнктивная нормальная форма содержит лишь члены длины "
            },
            {
              "include": {
                "value": "n"
              }
            },
            {
              "text": ".\n(Указание: рассмотрите функцию, которая меняет своё значение при изменении значения любой переменной.)\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\nЗаметим, что при доказательстве теоремы "
    },
    {
      "tag": {
        "name": "def:theorem:link",
        "body": {
          "blocks": [
            {
              "text": "completeness-connectives"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " мы обошлись без импликации.\nЭто и не удивительно, так как она выражается через дизъюнкцию и отрицание:\n"
    },
    {
      "include": {
        "value": "\n(p\\to q) \\ \\leftrightarrow \\ (\\lnot p \\lor q)\n"
      }
    },
    {
      "text": "\n(проверьте!).\nМы могли бы обойтись только конъюнкцией и отрицанием, так как "
    },
    {
      "include": {
        "value": "\n(p\\lor q) \\ \\leftrightarrow \\ \\lnot(\\lnot p \\land \\lnot q),\n"
      }
    },
    {
      "text": "\nили только дизъюнкцией и отрицанием, так как "
    },
    {
      "include": {
        "value": "\n(p\\land q) \\ \\leftrightarrow \\ \\lnot(\\lnot p \\lor \\lnot q)\n"
      }
    },
    {
      "text": "\n(обе эквивалентности вытекают из законов Де Моргана; их легко проверить и непосредственно).\nКак говорят, система связок "
    },
    {
      "include": {
        "value": "\\land, \\lnot"
      }
    },
    {
      "text": ", а также система связок "
    },
    {
      "include": {
        "value": "\\lor, \\lnot"
      }
    },
    {
      "text": " являются "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "полными"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Полная система связок|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n(По определению это означает, что с их помощью можно записать любую булеву функцию.)\n\n\n"
    },
    {
      "tag": {
        "name": "def:problem",
        "body": {
          "blocks": [
            {
              "text": "Докажите, что система связок "
            },
            {
              "include": {
                "value": "\\lnot, \\to"
              }
            },
            {
              "text": " полна.\n(Указание: как записать через них дизъюнкцию?)\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\nА вот без отрицания обойтись нельзя.\nСистема связок "
    },
    {
      "include": {
        "value": "\\land, \\lor,\\to"
      }
    },
    {
      "text": " неполна — и по очень простой причине: если все переменные истинны, то любая их комбинация, содержащая только указанные связки, истинна.\n(Как говорят, все эти связки «сохраняют единицу».)\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Связки, сохраняющие "
            },
            {
              "include": {
                "value": "0"
              }
            },
            {
              "text": "/"
            },
            {
              "include": {
                "value": "1"
              }
            },
            {
              "text": "|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nЛюбая формула, составленная только с помощью связок "
    },
    {
      "include": {
        "value": "\\land"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "\\lor"
      }
    },
    {
      "text": ", задаёт монотонную булеву функцию "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Монотонная функция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Булева функция!монотонная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n(в том смысле, что от увеличения значения любого из аргументов значение функции может только возрасти — или остаться прежним).\nПокажите, что верно и обратное: любая монотонная булева функция либо постоянна (всюду истинна или всюду ложна), либо может быть выражена формулой, содержащей только "
    },
    {
      "include": {
        "value": "\\land"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "\\lor"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПусть "
    },
    {
      "include": {
        "value": "\\varphi\\to\\psi"
      }
    },
    {
      "text": " — тавтология.\nПокажите, что найдётся формула "
    },
    {
      "include": {
        "value": "\\tau"
      }
    },
    {
      "text": ", которая включает в себя только общие для "
    },
    {
      "include": {
        "value": "\\varphi"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "\\psi"
      }
    },
    {
      "text": " переменные, для которой формулы "
    },
    {
      "include": {
        "value": "(\\varphi\\to\\tau)"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "(\\tau\\to\\psi)"
      }
    },
    {
      "text": " являются тавтологиями.\n(Более общий вариант этого утверждения, в котором рассматриваются формулы с кванторами, называется "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "леммой Крейга"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".)\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Лемма!Крейга|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Крейг"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nВ принципе мы не обязаны ограничиваться четырьмя рассмотренными связками.\nЛюбая булева функция может играть роль связки.\nНапример, можно рассмотреть связку "
    },
    {
      "include": {
        "value": "(p \\texttt{ notand } q)"
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "\\texttt"
            },
            {
              "tag": {
                "name": "notand",
                "body": {
                  "blocks": []
                },
                "attrList": [],
                "separator": ""
              }
            },
            {
              "text": "|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nзадаваемую эквивалентностью\n"
    },
    {
      "include": {
        "value": "\n(p \\texttt{ notand } q) \\ \\leftrightarrow \\ \\lnot(p\\land q)\n"
      }
    },
    {
      "text": "\n(словами: "
    },
    {
      "include": {
        "value": "(p\\texttt{ notand }q)"
      }
    },
    {
      "text": " ложно, лишь если "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "q"
      }
    },
    {
      "text": " истинны).\nЧерез неё выражается отрицание ("
    },
    {
      "include": {
        "value": "p \\texttt{ notand }p"
      }
    },
    {
      "text": "), после чего можно выразить конъюнкцию, а затем, как мы знаем, и вообще любую функцию.\n(Знакомые с цифровыми логическими схемами малого уровня интеграции хорошо знакомы с этим утверждением: достаточно большой запас схем И-НЕ позволяет реализовать любую требуемую зависимость выхода от входов.)\n\n\nДругая интересная полная система связок — сложение по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ", конъюнкция и константа "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": " (которую можно считать "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": "-арной связкой, задающей функцию от нуля аргументов).\nПредставленные в этой системе булевы функции становятся полиномами с коэффициентами в кольце вычетов по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ".\nИдея рассматривать булевы функции как полиномы (оказавшаяся неожиданно плодотворной в последние годы) была высказана в 1927~г.\\ российским математиком Иваном Ивановичем Жегалкиным.\n"
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Жегалкин"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\nНазовём "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "мономом"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Моном|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nконъюнкцию любого набора переменных или константу "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": " (которую естественно рассматривать как конъюнкцию нуля переменных).\nНазвание это естественно, так как при наших соглашениях ("
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": " обозначает истину, "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": " — ложь) конъюнкция соответствует умножению.\n\n\nНазовём "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "полиномом"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Полиномы (Жегалкина)|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nсумму таких мономов по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": " (это значит, что "
    },
    {
      "include": {
        "value": "0\\oplus0 =0"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "0\\oplus 1=1\\oplus 0=1"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "1\\oplus1=0"
      }
    },
    {
      "text": ").\nЯсно, что два повторяющихся монома можно сократить (ведь сложение по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": "), так что будем рассматривать только полиномы без повторяющихся мономов.\nПри этом, естественно, порядок членов в мономе (как и порядок мономов в полиноме) роли не играет, их можно переставлять.\n\n\n"
    },
    {
      "tag": {
        "name": "def:theorem",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "def:index",
                "body": {
                  "blocks": [
                    {
                      "text": "Теорема!о полиномах Жегалкина|defin"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\nВсякая булева функция однозначно представляется таким полиномом."
            }
          ]
        },
        "attrList": [
          {
            "name": "name",
            "value": "о полиномах Жегалкина",
            "empty": false
          },
          {
            "name": "key",
            "value": "polynomials-boolean-functions",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nСуществование искомого полинома следует из теоремы "
    },
    {
      "tag": {
        "name": "def:theorem:link",
        "body": {
          "blocks": [
            {
              "text": "dnf-cnf"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ", так как конъюнкция есть умножение, отрицание — прибавление единицы, а дизъюнкцию можно через них выразить (получится "
    },
    {
      "include": {
        "value": "p+q+pq"
      }
    },
    {
      "text": ").\nНадо только заметить, что степени не нужны: переменные принимают значения "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ", так что "
    },
    {
      "include": {
        "value": "x^n"
      }
    },
    {
      "text": " можно заменить на "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": ".\n\n\nМожно также сослаться на известное из алгебры утверждение о том, что всякая функция с аргументами из конечного поля (в данном случае это двухэлементное поле вычетов по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ") задаётся полиномом.\n(Так получается новое доказательство теоремы "
    },
    {
      "tag": {
        "name": "def:theorem:link",
        "body": {
          "blocks": [
            {
              "text": "completeness-connectives"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".)\n\n\nДалее можно заметить, что полиномов столько же, сколько булевых функций, а именно "
    },
    {
      "include": {
        "value": "2^{2^n} "
      }
    },
    {
      "text": ".\nВ самом деле, булева функция может принимать любое из двух значений в каждой из "
    },
    {
      "include": {
        "value": "2^n"
      }
    },
    {
      "text": " точек булева куба "
    },
    {
      "include": {
        "value": "\\Bbb{B}^n"
      }
    },
    {
      "text": ", а многочлен может включать или не включать любой из "
    },
    {
      "include": {
        "value": "2^n"
      }
    },
    {
      "text": " мономов.\n(Мономов ровно "
    },
    {
      "include": {
        "value": "2^n"
      }
    },
    {
      "text": ", потому что каждый моном включает или не включает любую из "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " переменных.)\nПоэтому избытка полиномов нет, и если любая функция представима полиномом, то единственным образом.\n\n\nМожно и не ссылаться на сведения из алгебры и теорему "
    },
    {
      "tag": {
        "name": "def:theorem:link",
        "body": {
          "blocks": [
            {
              "text": "dnf-cnf"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ", а дать явную конструкцию.\nЭто удобно сделать индукцией по "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": ".\nПусть мы уже умеем представлять любую булеву функцию от "
    },
    {
      "include": {
        "value": "n-1"
      }
    },
    {
      "text": " аргументов с помощью полинома.\nТогда "
    },
    {
      "include": {
        "value": "\\varphi(p_1,\\dots,p_n)"
      }
    },
    {
      "text": " можно представить как\n"
    },
    {
      "include": {
        "value": "\n\\varphi(p_1,\\dots,p_n) =\n\\varphi(0, p_2,\\dots,p_{n})\n+[\\varphi(0,p_2,\\dots,p_{n})+\n\\varphi(1,p_2,\\dots,p_{n})]p_1\n"
      }
    },
    {
      "text": "\n(проверьте).\nОстаётся заметить, что правую часть можно представить полиномом по предположению индукции.\n\n\nДля единственности также есть другое доказательство: пусть два многочлена (имеющие степень "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": " по каждой переменной) равны при всех значениях переменных.\nТогда их сумма (или разность —\nвычисления происходят по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ") является ненулевым многочленом (содержит какие-то мономы), но тождественно равна нулю.\nТак не бывает, и это легко доказать по индукции.\nВ самом деле, любой многочлен "
    },
    {
      "include": {
        "value": "A(p_1,\\dots,p_n)"
      }
    },
    {
      "text": " можно представить в виде\n"
    },
    {
      "include": {
        "value": "\nA(p_1,\\dots,p_n)=B(p_2,\\dots,p_n)+p_1C(p_2,\\dots,p_n),\n"
      }
    },
    {
      "text": "\nгде "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "C"
      }
    },
    {
      "text": " — многочлены от меньшего числа переменных.\nПодставляя сначала "
    },
    {
      "include": {
        "value": "p_1=0"
      }
    },
    {
      "text": ", а затем "
    },
    {
      "include": {
        "value": "p_1=1"
      }
    },
    {
      "text": ", убеждаемся,\nчто многочлены "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "C"
      }
    },
    {
      "text": " равны нулю во всех точках, и потому (согласно предположению индукции) равны нулю как многочлены (не содержат мономов).\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПусть "
    },
    {
      "include": {
        "value": "F"
      }
    },
    {
      "text": " — произвольное поле.\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Поле"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nНазовём "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "мультилинейной"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Мультилинейная функция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!мультилинейная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nфункцией полином от "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " переменных с коэффициентами из "
    },
    {
      "include": {
        "value": "F"
      }
    },
    {
      "text": ", в котором все показатели степеней равны либо "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": ", либо "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ".\n(Таким образом, каждый моном в ней есть произведение коэффициента и некоторого набора переменных без повторений.) Будем рассматривать "
    },
    {
      "include": {
        "value": "\\Bbb{B}=\\{0,1\\} "
      }
    },
    {
      "text": " как подмножество "
    },
    {
      "include": {
        "value": "F"
      }
    },
    {
      "text": ".\nДокажите, что всякая булева функция "
    },
    {
      "include": {
        "value": "\\Bbb{B}^n\\to\\Bbb{B} "
      }
    },
    {
      "text": " однозначно продолжается до мультилинейной функции "
    },
    {
      "include": {
        "value": "F^n\\to F"
      }
    },
    {
      "text": ", и коэффициенты мультилинейной функции можно считать целыми числами.\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nЕсли рассматривать произвольные булевы функции в качестве связок, возникает вопрос: в каком случае набор булевых функций образует полный базис? (Это значит, что любая булева функция представляется в виде композиции функций из набора,  —е записывается в виде формулы, где связками служат функции набора.) Подобные вопросы вызывали в своё время большой интерес и были хорошо изучены.\nНачальным этапом явилось такое утверждение:\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "name",
            "value": "критерий Поста",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Критерий!Поста|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Пост"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nНабор булевых функций является полным тогда и только тогда, когда он не содержится целиком ни в одном из пяти следующих « предполных классов»:\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Предполные классы|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "list",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "item",
                "body": {
                  "blocks": [
                    {
                      "text": "монотонные функции;"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "item",
                "body": {
                  "blocks": [
                    {
                      "text": "функции, сохраняющие нуль;"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "item",
                "body": {
                  "blocks": [
                    {
                      "text": "функции, сохраняющие единицу;"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "item",
                "body": {
                  "blocks": [
                    {
                      "text": "линейные функции;"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            },
            {
              "tag": {
                "name": "item",
                "body": {
                  "blocks": [
                    {
                      "text": "самодвойственные функции."
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n(Функция "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": " "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "монотонна"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Монотонная функция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!монотонная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли она монотонно неубывает по каждому из своих аргументов.\nФункция "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": " "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "сохраняет нуль/единицу"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!сохраняющая "
            },
            {
              "include": {
                "value": "0"
              }
            },
            {
              "text": "/"
            },
            {
              "include": {
                "value": "1"
              }
            },
            {
              "text": "|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли "
    },
    {
      "include": {
        "value": "f(0,\\dots,0)=0"
      }
    },
    {
      "text": " (соответственно "
    },
    {
      "include": {
        "value": "f(1,\\dots,1)=1"
      }
    },
    {
      "text": ").\nФункция "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": " "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "линейна"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Линейная функция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!линейная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли она представима многочленом, в котором все мономы содержат не более одной переменной.\nНаконец, функция "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": " называется "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "самодвойственной"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ",\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Самодвойственная функция|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!самодвойственная|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли "
    },
    {
      "include": {
        "value": "f(1-p_1,\\dots,1-p_n)=1-f(p_1,\\dots,p_n)"
      }
    },
    {
      "text": ".)\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nЕсли набор содержится в одном из классов, то и все композиции также не выходят за пределы этого класса (легко проверить для каждого из классов в отдельности) и поэтому набор не является полным.\nДокажем обратное утверждение.\nПусть для каждого класса выбрана какая-то функция, в нём не лежащая.\nУбедимся, что с помощью комбинаций выбранных функций можно получить все булевы функции.\n\n\nУ нас есть функция, не сохраняющая нуль.\nПодставим вместо всех аргументов одну и ту же переменную.\nПолучится функция от одного аргумента, отображающая нуль в единицу, то есть либо константа "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ", либо отрицание.\nСделав то же самое с функцией, не сохраняющей единицу, получим либо константу нуль, либо отрицание.\nТаким образом, у нас либо есть отрицание, либо обе константы "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ".\n\n\nЕсли есть обе константы, то всё равно можно получить отрицание.\nВозьмём немонотонную функцию.\nЛегко понять, что она должна менять значение с единицы на нуль при изменении какого-то одного аргумента с нуля на единицу (в самом деле, будем увеличивать аргументы по одному, в какой-то момент значение функции уменьшится.)\nЗафиксировав значения остальных аргументов (ведь мы считаем, что константы есть), получаем отрицание.\n\n\nИмея отрицание и несамодвойственную функцию, легко получить константы (если их не было).\nВ самом деле, несамодвойственность означает, что "
    },
    {
      "include": {
        "value": "f(x_1,\\dots,x_n)=f(1-x_1,\\dots,1-x_n)"
      }
    },
    {
      "text": "\nдля каких-то значений "
    },
    {
      "include": {
        "value": "x_1,\\dots,x_n\\in\\{0,1\\} "
      }
    },
    {
      "text": ".\nВместо нулевых значений переменных "
    },
    {
      "include": {
        "value": "x_1,\\dots,x_n"
      }
    },
    {
      "text": " подставим "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": ",\nвместо единиц подставим "
    },
    {
      "include": {
        "value": "\\lnot p"
      }
    },
    {
      "text": ", получится одна из констант.\nВторая получится отрицанием.\n\n\nТеперь у нас есть константы, отрицание и нелинейная функция "
    },
    {
      "include": {
        "value": "f(p_1,\\dots,p_n)"
      }
    },
    {
      "text": ".\nНелинейность означает, что в её представлении в виде многочлена есть моном, состоящий более чем из одной переменной.\nПусть, например, этот моном содержит переменные "
    },
    {
      "include": {
        "value": "p_1"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "p_2"
      }
    },
    {
      "text": ".\nСгруппируем члены по четырём группам и получим выражение\n"
    },
    {
      "include": {
        "value": "\np_1p_2 A(p_3,\\dots)+p_1B(p_3,\\dots)+p_2C(p_3,\\dots)+D(p_3,\\dots).\n"
      }
    },
    {
      "text": "\nПри этом многочлен "
    },
    {
      "include": {
        "value": "A(p_3,\\dots)"
      }
    },
    {
      "text": " заведомо отличен от нуля, поэтому можно так подставить константы вместо "
    },
    {
      "include": {
        "value": "p_3,\\dots,p_n"
      }
    },
    {
      "text": ", чтобы первое слагаемое не обратилось в нуль.\nТогда получим либо "
    },
    {
      "include": {
        "value": "p_1p_2+d"
      }
    },
    {
      "text": ", либо "
    },
    {
      "include": {
        "value": "p_1p_2 + p_1+d"
      }
    },
    {
      "text": ", либо "
    },
    {
      "include": {
        "value": "p_1p_2+p_2+d"
      }
    },
    {
      "text": ", либо "
    },
    {
      "include": {
        "value": "p_1p_2+p_1+p_2+d"
      }
    },
    {
      "text": ".\nСвободный член "
    },
    {
      "include": {
        "value": "d"
      }
    },
    {
      "text": " можно менять, если нужно (у нас есть отрицание), так что получается либо "
    },
    {
      "include": {
        "value": "p_1p_2"
      }
    },
    {
      "text": "\n(конъюнкция, и всё доказано), либо "
    },
    {
      "include": {
        "value": "p_1p_2+p_1=p_1(p_2+1)= p_1\\land\\lnot p_2"
      }
    },
    {
      "text": " (убираем отрицание, получаем конъюнкцию, всё доказано), либо "
    },
    {
      "include": {
        "value": "p_1p_2+p_2"
      }
    },
    {
      "text": " (аналогично), либо "
    },
    {
      "include": {
        "value": "p_1p_2+p_1+p_2= (1+p_1)(1+p_2)-1=\\lnot(\\lnot p_1\\land\\lnot p_2)=p_1\\lor p_2"
      }
    },
    {
      "text": " (дизъюнкция, всё доказано).\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "text": "\n\n"
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:section",
        "body": {
          "blocks": [
            {
              "text": "Схемы из функциональных элементов"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Схема из функциональных элементов"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "resource",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "path",
            "value": "/img1.png",
            "empty": false
          },
          {
            "name": "src",
            "value": "/data/books/data/vereshagin-shen-firstord/1/3/img1.png",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "resource",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "path",
            "value": "/img2.png",
            "empty": false
          },
          {
            "name": "src",
            "value": "/data/books/data/vereshagin-shen-firstord/1/3/img2.png",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "resource",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "path",
            "value": "/img3.png",
            "empty": false
          },
          {
            "name": "src",
            "value": "/data/books/data/vereshagin-shen-firstord/1/3/img3.png",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "resource",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "path",
            "value": "/img4.png",
            "empty": false
          },
          {
            "name": "src",
            "value": "/data/books/data/vereshagin-shen-firstord/1/3/img4.png",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\n\nФормулы представляют собой способ записи композиции функций.\nНапример, если мы сначала применяем функцию "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": ", а потом функцию "
    },
    {
      "include": {
        "value": "g"
      }
    },
    {
      "text": ", это можно записать формулой "
    },
    {
      "include": {
        "value": "g(f(x))"
      }
    },
    {
      "text": ".\nНо есть и другой способ: можно изобразить каждую функцию в виде прямоугольника с « входом» и « выходом» и соединить выход функции "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": " со входом функции "
    },
    {
      "include": {
        "value": "g"
      }
    },
    {
      "text": " (рис. "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "scheme-1"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ").\n\n"
    },
    {
      "tag": {
        "name": "def:image",
        "body": {
          "blocks": [
            {
              "text": "Два способа изобразить композицию "
            },
            {
              "include": {
                "value": "g\\circ f"
              }
            },
            {
              "text": ".\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "src",
            "value": "/img1.png",
            "empty": false
          },
          {
            "name": "key",
            "value": "scheme-1",
            "empty": false
          },
          {
            "name": "height",
            "value": "0.5",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\nТакое представление отнюдь не является чисто теоретическим.\nУже больше полувека электронная промышленность выпускает микросхемы, которые выполняют логические операции.\nТакая микросхема имеет электрические контакты, напряжение на которых кодирует логические значения "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "И"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " и "
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "Л"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\nКонкретное напряжение зависит от типа схемы, но обычно это несколько вольт, и высокий потенциал (относительно заземления) считается единицей, а низкий нулём.\n\n\nОдной из типичных схем является схема И-НЕ, она имеет два входа и один выход.\nСигнал на выходе является отрицанием конъюнкции сигналов на входе.\nДругими словами, на выходе появляется высокий потенциал (сигнал "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ") тогда и только тогда, когда на одном из входов потенциал низкий ("
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": ").\nИз такой схемы легко получить схему НЕ (изменяющую уровень сигнала на противоположный), соединив проводом два входа.\nПри этом на оба входа поступает один и тот же сигнал, и операция И его не меняет ("
    },
    {
      "include": {
        "value": "p\\land p=p"
      }
    },
    {
      "text": "), а НЕ меняет на противоположный.\nВзяв два элемента И-НЕ и используя второй из них в качестве элемента НЕ, инвертирующего сигнал с выхода первого элемента, получаем схему, которая реализует функцию И.\nА если поставить два элемента НЕ перед каждым из входов элемента И-НЕ, получим схему, реализующую функцию ИЛИ: "
    },
    {
      "include": {
        "value": "\\lnot (\\lnot p\\land\\lnot q) \\leftrightarrow (p\\lor q)"
      }
    },
    {
      "text": ".\n\n\nТеорема "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "completeness-connectives"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " о полноте системы связок "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Теорема!о полноте системы связок ("
            },
            {
              "include": {
                "value": "\\land"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "\\lor"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "\\to"
              }
            },
            {
              "text": ", "
            },
            {
              "include": {
                "value": "\\lnot"
              }
            },
            {
              "text": ")"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nтеперь гарантирует, что любую булеву функцию можно реализовать в виде схемы.\nНадо иметь в виду, однако, что предлагаемая в её доказательстве конструкция (дизъюнктивная нормальная форма)\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Дизъюнктивная нормальная форма"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nимеет скорее теоретический интерес, поскольку приводит к схемам очень большого размера даже для простых функций (если число аргументов велико).\nНапример, схема, сравнивающая два "
    },
    {
      "include": {
        "value": "16"
      }
    },
    {
      "text": "-битных числа, должна иметь "
    },
    {
      "include": {
        "value": "32"
      }
    },
    {
      "text": " входа и поэтому в её реализации с помощью дизъюнктивной нормальной формы будет порядка "
    },
    {
      "include": {
        "value": "2^{32} "
      }
    },
    {
      "text": "\nэлементов— что мало реально. (Между тем такую схему можно построить гораздо проще, из нескольких сотен элементов.)\n\n\nПоэтому вопрос о том, сколько элементов нужно для реализации той или иной функции, представляет большой интерес— как практический, так и философский.\n(Одна из центральных проблем математики и информатики, так называемая « проблема перебора», "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Проблема перебора"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nможет быть сформулирована в этих терминах.)\n\n\nМы сейчас дадим более формальное определение схемы и реализуемой ей булевой функции.\nНо прежде всего ответим на такой вопрос— почему мы вообще говорим о схемах? Ведь можно записать композицию булевых функций в виде формулы, не будет ли это то же самое?\n\n\nОказывается, не совсем, и разницу легко увидеть на примере (рис. "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "scheme-2"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ").\n\n\n"
    },
    {
      "tag": {
        "name": "def:image",
        "body": {
          "blocks": [
            {
              "text": "Элемент входит в формулу дважды."
            }
          ]
        },
        "attrList": [
          {
            "name": "src",
            "value": "/img2.png",
            "empty": false
          },
          {
            "name": "key",
            "value": "scheme-2",
            "empty": false
          },
          {
            "name": "height",
            "value": "0.5",
            "empty": false
          }
        ],
        "separator": " "
      }
    },
    {
      "text": "\n\nЗдесь один и тот же элемент схемы ("
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": ") приходится указывать в формуле дважды, поскольку его выход используется в качестве входа двух других элементов.\nСхемы, в которых такого ветвления нет (на практике ветвление вполне возможно, хотя и ограничено « нагрузочной способностью выхода», как говорят инженеры), как раз и соответствуют формулам.\nНо в общем случае полученная из данной схемы формула может быть длинной, даже если схема содержит небольшое число элементов, поскольку число копий может расти экспоненциально с ростом глубины схемы.\n\n\nХотя идея построения схемы из функциональных элементов, реализующих булевы функции, достаточно наглядна, дадим более формальное определение.\nФиксируем некоторый набор булевых функций "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": ".\nПусть имеется "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " булевых (принимающих значения "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ")\nпеременных "
    },
    {
      "include": {
        "value": "x_1,\\dots,x_n"
      }
    },
    {
      "text": ", называемых "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "входами"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Вход|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nПусть также имеется некоторое число булевых переменных "
    },
    {
      "include": {
        "value": "y_1,\\dots,y_m"
      }
    },
    {
      "text": ", называемых "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "проводниками"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Проводник|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nПусть для каждого проводника схемы задана булева функция из "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": ", выражающая его значение через другие проводники и входы.\nПри этом требуется, чтобы не было циклов (цикл образуется, когда "
    },
    {
      "include": {
        "value": "y_i"
      }
    },
    {
      "text": " зависит от "
    },
    {
      "include": {
        "value": "y_j"
      }
    },
    {
      "text": ", которое зависит от "
    },
    {
      "include": {
        "value": "y_k"
      }
    },
    {
      "text": ", \\dots, которое зависит от "
    },
    {
      "include": {
        "value": "y_i"
      }
    },
    {
      "text": ").\nПусть, кроме того, среди проводников выделен один, называемый "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "выходом"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Выход|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nВ таком случае говорят, что задана "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "схема из функциональных элементов в базисе "
            },
            {
              "include": {
                "value": "B"
              }
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Схема из функциональных элементов|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nс "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " входами.\nЧисло "
    },
    {
      "include": {
        "value": "m"
      }
    },
    {
      "text": " называют "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "размером"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Размер схемы|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Схема из функциональных элементов!размер|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nсхемы.\n(С точки зрения инженера размер— это число использованных элементов, а базис "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": "— это ассортимент доступных ему элементов.)\n\n\nОтсутствие циклов гарантирует, что есть проводник, зависящий только от входов (иначе можно было бы найти цикл: возьмём какой-то проводник, затем возьмём тот проводник, от которого он зависит и т.д.).\nЗначение этого проводника, таким образом, однозначно определяется сигналами на входах.  Среди оставшихся проводников также нет цикла, поэтому можно найти один из них, зависящий только от уже известных, и определить его значение.\nПеренумеровав проводники в таком порядке, мы можем записать последовательность присваиваний\n"
    },
    {
      "include": {
        "value": "\n\\begin{aligned}\n    y_1&:= f_1(\\dots);\\\\\n    y_2&:= f_2(\\dots);\\\\\n       \\dots\\\\\n    y_m&:= f_m(\\dots),\\\\\n\\end{aligned}\n"
      }
    },
    {
      "text": "\nв правых частях которых стоят функции из "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": ", применённые ко входам и уже найденным значениям.\nПри этом можно считать, что результат схемы есть "
    },
    {
      "include": {
        "value": "y_m"
      }
    },
    {
      "text": "\n(как только результат получен, дальнейшие присваивания уже не нужны).\nТакая программа определяет "
    },
    {
      "include": {
        "value": "y_m"
      }
    },
    {
      "text": " при известных значениях входов, и тем самым "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "вычисляет"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Булева функция!вычисляемая схемой из функциональных элементов|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nнекоторую булеву функцию.\n\n\nТеперь набор булевых функций "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " можно назвать "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "полным"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ", "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Полный набор булевых функций|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли любая булева функция может быть задана схемой из "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": "-элементов (существует программа, её вычисляющая, при этом в правых частях присваиваний стоят функции из "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": ").\nЯсно, что это определение полноты равносильно прежнему, то есть возможности записать булеву функцию в виде формулы со связками из "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " (как мы говорили, разница только в том, что один и тот же элемент будет фигурировать в формуле многократно).\n\n\n"
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "Сложностью"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Сложность!булевой функции|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Булева функция!сложность|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nбулевой функции "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": " относительно "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": " называют минимальный размер схемы из "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": "-элементов, вычисляющей функцию "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": ".\nЕго обозначают "
    },
    {
      "include": {
        "value": "\\text{size}_B(f)"
      }
    },
    {
      "text": ".\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "key",
            "value": "size-invariant",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\nПусть "
    },
    {
      "include": {
        "value": "B_1"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "B_2"
      }
    },
    {
      "text": "— два полных набора булевых функций.\nТогда соответствующие меры сложности отличаются не более чем на постоянный множитель:\nнайдётся такое число "
    },
    {
      "include": {
        "value": "C"
      }
    },
    {
      "text": ", что "
    },
    {
      "include": {
        "value": "\\text{size}_{B_1}(f)\\le C\\text{size}_{B_2}(f)"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "\\text{size}_{B_2}(f)\\le C\\text{size}_{B_1}(f)"
      }
    },
    {
      "text": "\nдля любой функции "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nУтверждение почти очевидно: поскольку наборы "
    },
    {
      "include": {
        "value": "B_1"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "B_2"
      }
    },
    {
      "text": " полны, то каждая функция одного из наборов может быть вычислена какой-то схемой, составленной из элементов другого набора.\nТеперь можно взять в качестве "
    },
    {
      "include": {
        "value": "C"
      }
    },
    {
      "text": " наибольший размер таких схем, и неравенства будут выполняться: каждую строку программы можно заменить на "
    },
    {
      "include": {
        "value": "C"
      }
    },
    {
      "text": " (или меньше) строк с использованием функций другого набора.\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\nЧто можно сказать о сложности произвольной булевой функции "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "\nаргументов? Следующая теорема показывает, что она экспоненциально зависит от "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " (для «наугад взятой» функции).\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Сложность!типичной булевой функции"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "key",
            "value": "generic-size",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\n("
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "а"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ") Пусть "
    },
    {
      "include": {
        "value": "c>2"
      }
    },
    {
      "text": ".\nТогда сложность любой булевой функции "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " аргументов не превосходит "
    },
    {
      "include": {
        "value": "c^n"
      }
    },
    {
      "text": " для всех достаточно больших "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": ".\n\n("
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "б"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ") Пусть "
    },
    {
      "include": {
        "value": "c<2"
      }
    },
    {
      "text": ".\nТогда сложность большинства булевых функций "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " аргументов не меньше "
    },
    {
      "include": {
        "value": "c^n"
      }
    },
    {
      "text": " для всех достаточно больших "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПрежде всего заметим, что по предыдущей теореме не имеет значения, какой полный базис выбрать (изменение значения "
    },
    {
      "include": {
        "value": "c"
      }
    },
    {
      "text": " более существенно, чем умножение сложности на константу).\n\nПервое утверждение теоремы очевидно: размер схемы, реализующей дизъюнктивную нормальную форму "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Дизъюнктивная нормальная форма"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nс "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " переменными, есть "
    },
    {
      "include": {
        "value": "O(n2^n)"
      }
    },
    {
      "text": ", поскольку имеется не более "
    },
    {
      "include": {
        "value": "2^n"
      }
    },
    {
      "text": " конъюнктов размера "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": ". (Напомним смысл "
    },
    {
      "include": {
        "value": "O"
      }
    },
    {
      "text": "-обозначений: "
    },
    {
      "include": {
        "value": "O(n2^n)"
      }
    },
    {
      "text": " означает, что существует верхняя оценка вида "
    },
    {
      "include": {
        "value": "Cn2^n"
      }
    },
    {
      "text": " для некоторой константы "
    },
    {
      "include": {
        "value": "C"
      }
    },
    {
      "text": ".) Осталось заметить, что "
    },
    {
      "include": {
        "value": "O(n2^n)<c^n"
      }
    },
    {
      "text": " при достаточно больших "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " (напомним, что "
    },
    {
      "include": {
        "value": "c>2"
      }
    },
    {
      "text": ").\n\nЧтобы доказать второе утверждение, оценим число различных схем (скажем, в базисе И, ИЛИ, НЕ) размера "
    },
    {
      "include": {
        "value": "N"
      }
    },
    {
      "text": " с "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " аргументами.\nКаждая такая схема может быть описана последовательностью из "
    },
    {
      "include": {
        "value": "N"
      }
    },
    {
      "text": " присваиваний, выражающих одну из переменных через предыдущие.\nДля каждого присваивания есть не более "
    },
    {
      "include": {
        "value": "3(N+n)^2"
      }
    },
    {
      "text": " вариантов (три типа операций— конъюнкция, дизъюнкция, отрицание, и каждый из не более чем двух аргументов выбирается среди не более чем "
    },
    {
      "include": {
        "value": "N+n"
      }
    },
    {
      "text": " вариантов).\nОтсюда легко получить оценку "
    },
    {
      "include": {
        "value": "2^{O(N\\log N)} "
      }
    },
    {
      "text": " на число всех функций сложности не более "
    },
    {
      "include": {
        "value": "N"
      }
    },
    {
      "text": " (считая "
    },
    {
      "include": {
        "value": "N\\ge n"
      }
    },
    {
      "text": ").\n\nВсего булевых функций с "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " аргументами имеется "
    },
    {
      "include": {
        "value": "2^{2^n} "
      }
    },
    {
      "text": ".\nИз сравнения этих формул видно, что что при "
    },
    {
      "include": {
        "value": "c<2"
      }
    },
    {
      "text": " и при достаточно больших "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " булевы функции сложности меньше "
    },
    {
      "include": {
        "value": "c^n"
      }
    },
    {
      "text": " составляют меньшинство, так как "
    },
    {
      "include": {
        "value": "2^{O(c^n\\log c^n)} "
      }
    },
    {
      "text": " много меньше "
    },
    {
      "include": {
        "value": "2^{2^n} "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПроведите вторую часть рассуждения более подробно и покажите, что при некотором "
    },
    {
      "include": {
        "value": "{\\varepsilon>0} "
      }
    },
    {
      "text": " сложность большинства булевых функций с "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " аргументами не меньше "
    },
    {
      "include": {
        "value": "\\varepsilon2^n/n"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nВерхнюю оценку теоремы "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "generic-size"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " можно усилить и показать, что сложность любой булевой функции "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " аргументов не превосходит "
    },
    {
      "include": {
        "value": "O(2^n/n)"
      }
    },
    {
      "text": ".\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n("
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "а"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ") Покажите, что можно построить схему размера "
    },
    {
      "include": {
        "value": "O(2^m)"
      }
    },
    {
      "text": " с "
    },
    {
      "include": {
        "value": "2^m"
      }
    },
    {
      "text": " выходами, реализующую все "
    },
    {
      "include": {
        "value": "2^m"
      }
    },
    {
      "text": " возможных конъюнктов длины "
    },
    {
      "include": {
        "value": "m"
      }
    },
    {
      "text": " (для каждого— свой выход). (Указание:\nтакую схему можно построить индуктивно.)\n\n("
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "б"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ") Покажите, что можно построить схему размера "
    },
    {
      "include": {
        "value": "O(2^{2^m})"
      }
    },
    {
      "text": " с "
    },
    {
      "include": {
        "value": "2^{2^m} "
      }
    },
    {
      "text": " выходами, реализующую все "
    },
    {
      "include": {
        "value": "2^{2^m} "
      }
    },
    {
      "text": "\nбулевых функций "
    },
    {
      "include": {
        "value": "m"
      }
    },
    {
      "text": " аргументов. (Указание: эту схему также можно построить индуктивно.)\n\n("
    },
    {
      "tag": {
        "name": "format:b",
        "body": {
          "blocks": [
            {
              "text": "в"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ") Пусть "
    },
    {
      "include": {
        "value": "\\varphi(x_1,\\dots,x_k,y_1,\\dots,y_l)"
      }
    },
    {
      "text": "—\nбулева функция, аргументы которой разбиты на две группы.\nПокажите, что её можно записать в виде дизъюнкции "
    },
    {
      "include": {
        "value": "2^k"
      }
    },
    {
      "text": " членов, каждый из которых имеет вид "
    },
    {
      "include": {
        "value": "C(x_1,\\dots,x_k)\\land D(y_1,\\dots,y_l)"
      }
    },
    {
      "text": ", где "
    },
    {
      "include": {
        "value": "C"
      }
    },
    {
      "text": "— конъюнкт, а "
    },
    {
      "include": {
        "value": "D"
      }
    },
    {
      "text": "— произвольная булева функция.\nВывести отсюда упомянутую выше оценку "
    },
    {
      "include": {
        "value": "O(2^n/n)"
      }
    },
    {
      "text": ". (Указание: разумно положить "
    },
    {
      "include": {
        "value": "k={n-\\log n+c} "
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "l={\\log n-c} "
      }
    },
    {
      "text": ".\nСм. также "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "gindikin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " и "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "cyber"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".)\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nТеорема "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "generic-size"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ", однако, ничего не говорит о сложности конкретных булевых функций.\nСитуация здесь такова.\nЕсть разнообразные методы и приёмы получения верхних оценок.\nНо про нижние оценки неизвестно практически ничего.\nПро многие функции мы подозреваем, что их сложность велика (экспоненциально зависит от числа входов), но доказать это пока не удаётся.\nВесьма нетривиальные идеи позволяют доказывать экспоненциальные нижние оценки для некоторых специальных классов схем, например, схем из монотонных элементов или схем ограниченной глубины (использующих элементы И и ИЛИ с произвольным числом входов).\nПолучение экспоненциальных оценок для более общих схем— один из возможных подходов к знаменитой "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "проблеме перебора"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ", "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Проблема перебора"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nцентральной проблеме теории сложности вычислений.\n\n\nМы не будем углубляться в эту теорию, а приведём лишь несколько верхних оценок для конкретных задач.\nПри этом мы не претендуем на полноту, а хотим лишь показать несколько интересных идей и приёмов.\n\n\nРассмотрим функцию сравнения "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!сравнения"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Сложность!функции сравнения"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nдвух "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-битовых чисел.\nОна имеет "
    },
    {
      "include": {
        "value": "2n"
      }
    },
    {
      "text": " аргументов ("
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " для одного числа и "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " для другого); её значение равно "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ", если первое число больше второго, и "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": " в противном случае.\n\n\nОбозначим эту функцию "
    },
    {
      "include": {
        "value": "\\text{Comp}_n"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "include": {
                "value": "\\text{Comp}_n"
              }
            },
            {
              "text": "|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "key",
            "value": "recursive-comparing",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\nПусть "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": "— полный набор функций.\nСуществует такая константа "
    },
    {
      "include": {
        "value": "C"
      }
    },
    {
      "text": ", что "
    },
    {
      "include": {
        "value": "\\text{size}_B(\\text{Comp}_n)\\le Cn"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nЗаметим, что поскольку в формулировке теоремы оценка размера проводится с точностью до константы, то выбор конкретного базиса не имеет значения.\nДругими словами, мы можем предполагать, что любое конечное число необходимых нам функций в этом базисе есть.\n\n\nСхема сравнения чисел будет рекурсивной (чтобы сравнить два числа, мы отдельно сравниваем их левые и правые половины, а затем объединяем результаты).\nПри этом, как часто бывает, надо усилить утверждение, чтобы индукция прошла.\nА именно, мы будем строить схему с "
    },
    {
      "include": {
        "value": "2n"
      }
    },
    {
      "text": " входами "
    },
    {
      "include": {
        "value": "x_1,\\dots,x_n,y_1,\\dots,y_n"
      }
    },
    {
      "text": " и двумя выходами, которая указывает, какой из трёх случаев "
    },
    {
      "include": {
        "value": "x<y"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "x=y"
      }
    },
    {
      "text": " или "
    },
    {
      "include": {
        "value": "x>y"
      }
    },
    {
      "text": " имеет место. (Здесь "
    },
    {
      "include": {
        "value": "x,y"
      }
    },
    {
      "text": "— числа, записываемое в двоичной системе как "
    },
    {
      "include": {
        "value": "x_1\\dots x_n"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "y_1,\\dots,y_n"
      }
    },
    {
      "text": ".) Два выходных бита кодируют четыре возможности, а нужно только три, так что есть некоторый запас.\nДля определённости можно считать, что первый выходной бит истинен, если числа равны, а второй— если "
    },
    {
      "include": {
        "value": "x<y"
      }
    },
    {
      "text": ".\nТогда возможны три варианта сигналов на выходе: "
    },
    {
      "include": {
        "value": "10"
      }
    },
    {
      "text": " (равенство), "
    },
    {
      "include": {
        "value": "01"
      }
    },
    {
      "text": "\n(при "
    },
    {
      "include": {
        "value": "x<y"
      }
    },
    {
      "text": ") и "
    },
    {
      "include": {
        "value": "00"
      }
    },
    {
      "text": " (при "
    },
    {
      "include": {
        "value": "x>y)"
      }
    },
    {
      "text": ".\n\n\nОбъясним теперь, как собрать, скажем, схему сравнения двух "
    },
    {
      "include": {
        "value": "16"
      }
    },
    {
      "text": "-разрядных чисел.\nСоберём отдельно схему сравнения старших "
    },
    {
      "include": {
        "value": "8"
      }
    },
    {
      "text": " разрядов и младших "
    },
    {
      "include": {
        "value": "8"
      }
    },
    {
      "text": " разрядов.\nКаждая из них даст ответ в форме двух битов.\nТеперь из этих четырёх битов надо собрать два. (Если в старших разрядах неравенство, то оно определяет результат сравнения; если старшие разряды равны, то результат сравнения определяется младшими разрядами.) Написанная в скобках фраза определяет булеву функцию с четырьмя битами на входе и двумя битами на выходе, и может быть реализована некоторой схемой фиксированного размера.\nТаким образом, если через "
    },
    {
      "include": {
        "value": "T(n)"
      }
    },
    {
      "text": " обозначить размер схемы, сравнивающей "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-битовые числа, то получаем оценку\n"
    },
    {
      "include": {
        "value": "T(2n)\\le 2T(n)+c"
      }
    },
    {
      "text": ", где "
    },
    {
      "include": {
        "value": "c"
      }
    },
    {
      "text": "— некоторая константа, зависящая от выбора базиса.\nОтсюда следует, что "
    },
    {
      "include": {
        "value": "T(2^k)\\le c'2^k"
      }
    },
    {
      "text": " при некотором "
    },
    {
      "include": {
        "value": "c'"
      }
    },
    {
      "text": ".\nВ самом деле, для достаточно большого "
    },
    {
      "include": {
        "value": "c'"
      }
    },
    {
      "text": " можно доказать по индукции, что "
    },
    {
      "include": {
        "value": "T(2^k) \\le c'2^k - c"
      }
    },
    {
      "text": "\n(мы должны усилить неравенство, вычтя из правой части "
    },
    {
      "include": {
        "value": "c"
      }
    },
    {
      "text": ", чтобы индуктивный шаг прошёл; база индукции остается верной, если "
    },
    {
      "include": {
        "value": "c'"
      }
    },
    {
      "text": " достаточно велико).\n\n\nТу же самую оценку можно объяснить и наглядно.\nНаша схема имеет вид иерархического дерева.\nНа каждом уровне из двух двухбитовых сигналов получается один.\nОстаётся вспомнить, что в полном двоичном дереве число внутренних вершин (которое определяет размер схемы)\nна единицу меньше числа листьев. (В турнире по олимпийской системе число игр на единицу меньше числа команд, так как после каждой игры одна команда выбывает.)\n\n\nВсе внутренние вершины и все листья (где сравниваются два бита) представляют собой схемы ограниченного размера, откуда и вытекает оценка "
    },
    {
      "include": {
        "value": "T(2^k)\\le c'2^k"
      }
    },
    {
      "text": ".\n\n\nОсталось лишь сказать, что делать, если размер чисел (который мы обозначали через "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": ") не есть точная степень двойки.\nВ этом случае можно увеличить размер до ближайшей сверху степени двойки (не более чем в два раза) и подать на старшие разряды входов нули.\nОба действия приводят к увеличению размера схемы не более чем в константу раз.\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nПерейдём к сложению двух "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-разрядных чисел.\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Сложение чисел, сложность"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n(Строго говоря, тут возникает не булева функция, а функция "
    },
    {
      "include": {
        "value": "\\Bbb{B}^n\\times\\Bbb{B}^n\\to\\Bbb{B}^{n+1} "
      }
    },
    {
      "text": ", но все наши определения очевидно переносятся на этот случай.)\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "key",
            "value": "sequential-addition",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\nСуществует схема размера "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": ", осуществляющая сложение двух "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-битовых чисел.\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nНапомним смысл обозначения "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": ": нам надо построить схему сложения "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-битовых чисел, имеющую размер не более "
    },
    {
      "include": {
        "value": "Cn"
      }
    },
    {
      "text": " для некоторого "
    },
    {
      "include": {
        "value": "C"
      }
    },
    {
      "text": " и для всех "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": ".\n\n\nВспомним, как складывают числа в столбик:\n"
    },
    {
      "include": {
        "value": "\n\\begin{array}{rrrrr}\n    &        0 &        1 &        1 & \\\\\n    &        1 &        0 &        0 &1\\\\\n    &        1 &        0 &        1 &1\\\\\n\\hline 1   &        0 &        1 &        0 &0\\\\\n\\end{array}\n"
      }
    },
    {
      "text": "\nВерхняя строка— биты переноса, нижняя— результат.\nЗаметим, что каждый из битов переноса или результата определяется тремя другими битами (бит результата равен сумме двух  битов слагаемых и бита переноса по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ", а бит переноса равен "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ", если хотя бы два из этих трёх битов равны "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ").\nПоэтому можно составить схему, которая вычисляет эти биты справа налево и имеет размер "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nЗаметим, что теорему "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "recursive-comparing"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " легко вывести из теоремы "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "sequential-addition"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ": чтобы сравнить числа "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "y"
      }
    },
    {
      "text": ", сложим число "
    },
    {
      "include": {
        "value": "(2^n-1)-x"
      }
    },
    {
      "text": " (то есть число "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": ", в котором все единицы заменены нулями и наоборот) и число "
    },
    {
      "include": {
        "value": "y"
      }
    },
    {
      "text": ".\nЕсли в старшем разряде появится единица, то "
    },
    {
      "include": {
        "value": "y>x"
      }
    },
    {
      "text": ", а если нет, то "
    },
    {
      "include": {
        "value": "y\\le x"
      }
    },
    {
      "text": ".\nОстаётся заметить, что и сложение, и обращение битов в числе "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": "\nтребуют схем линейного размера.\nТаким образом, сравнение чисел сводится к вычислению бита переноса.\nВерно и обратное:\nвычисление бита переноса сводится к сравнению двух чисел (обратим в одном из слагаемых все биты).\n\n\nТем не менее конструкция, использованная при доказательстве теоремы "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "recursive-comparing"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ", имеет некоторые преимущества.\nНазовём "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "глубиной"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n  "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Глубина схемы из функциональных элементов|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n  "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Схема из функциональных элементов!глубина|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nсхемы максимальное число элементов на пути от входа к выходу.\nЕсли представить себе, что сигнал на выходе элемента появляется не сразу после подачи сигналов на входы, а с некоторой задержкой, то глубина схемы определяет суммарную задержку.\nЛегко понять, что рекурсивная схема сравнения имела глубину "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": " (число уровней пропорционально логарифму размера входа), в то время как построенная только что схема сложения имеет глубину,   "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Сложение чисел, глубина"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nпропорциональную "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " (биты переноса вычисляются последовательно, справа налево).\nНо можно соединить эти два результата:\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "key",
            "value": "carry-save-adder",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\nСуществует схема сложения двух "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-битовых чисел размера "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": " и глубины "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nКак мы видели, проблема в том, что биты переноса вычисляются последовательно, а не параллельно.\nЕсли удастся их все вычислить схемой размера "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": " и глубины "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": ", дальнейшее очевидно.\n\nВычисление битов переноса равносильно сравнению, так что для доказательства теоремы достаточно научиться сравнивать параллельно все « суффиксы» двух "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-битовых чисел "
    },
    {
      "include": {
        "value": "x_1\\dots x_n"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "y_1\\dots y_n"
      }
    },
    {
      "text": ", —е для каждого "
    },
    {
      "include": {
        "value": "i"
      }
    },
    {
      "text": " сравнить числа "
    },
    {
      "include": {
        "value": "x_ix_{i+1}\\dots x_n"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "y_iy_{i+1}\\dots y_n"
      }
    },
    {
      "text": ".\n\nВспомним, что мы делали при сравнении чисел (скажем, длины "
    },
    {
      "include": {
        "value": "8"
      }
    },
    {
      "text": ").\nНа нижнем уровне мы сравнивали биты:\n"
    },
    {
      "include": {
        "value": "\n\\begin{array}{cccccccc}\nx_1 & x_2 & x_3 & x_4 & x_5 & x_6 & x_7 & x_8 \\\\\ny_1 & y_2 & y_3 & y_4 & y_5 & y_6 & y_7 & y_8\n\\end{array}\n"
      }
    },
    {
      "text": "\nНа следующем уровне мы сравнивали двузначные числа\n"
    },
    {
      "include": {
        "value": "\n\\begin{array}{cccc}\nx_1 x_2 & x_3 x_4 & x_5 x_6 & x_7 x_8 \\\\\ny_1 y_2 & y_3 y_4 & y_5 y_6 & y_7 y_8\n\\end{array}\n"
      }
    },
    {
      "text": "\nзатем четырёхзначные\n"
    },
    {
      "include": {
        "value": "\n\\begin{array}{cc}\nx_1  x_2   x_3  x_4 & x_5   x_6   x_7   x_8 \\\\\n{y_1} {y_2} {y_3} {y_4} &\n{y_5} {y_6} {y_7} {y_8}\n\\end{array}\n"
      }
    },
    {
      "text": "\nи, наконец, восьмизначные:\n"
    },
    {
      "include": {
        "value": "\n\\begin{array}{c}\nx_1  x_2   x_3  x_4  x_5   x_6   x_7   x_8 \\\\\n{y_1} {y_2} {y_3} {y_4}\n{y_5} {y_6} {y_7} {y_8}\n\\end{array}\n"
      }
    },
    {
      "text": "\nТаким образом, для суффиксов длины "
    },
    {
      "include": {
        "value": "8"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "4"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": "\nрезультаты сравнения уже есть.\nДля суффикса длины "
    },
    {
      "include": {
        "value": "6"
      }
    },
    {
      "text": " результат можно получить, комбинируя результат сравнения "
    },
    {
      "include": {
        "value": "x_3x_4 ? y_3y_4"
      }
    },
    {
      "text": "\nи "
    },
    {
      "include": {
        "value": "x_5x_6x_7x_8 ? y_5y_6y_7y_8"
      }
    },
    {
      "text": ".\nПосле этого у нас есть информация о суффиксах всех чётных длин, и соединяя её с информацией с первого этапа, получаем сведения про все суффиксы.\nНапример, для сравнения суффиксов длины "
    },
    {
      "include": {
        "value": "7"
      }
    },
    {
      "text": ", то есть "
    },
    {
      "include": {
        "value": "x_2\\dots x_8"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "y_2\\dots y_8"
      }
    },
    {
      "text": ", мы соединяем результаты сравнения "
    },
    {
      "include": {
        "value": "x_2"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "y_2"
      }
    },
    {
      "text": " с результатами сравнения суффиксов длины "
    },
    {
      "include": {
        "value": "6"
      }
    },
    {
      "text": ", то есть "
    },
    {
      "include": {
        "value": "x_3\\dots x_8"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "y_3\\dots y_8"
      }
    },
    {
      "text": ".\n\nВ общем случае картина такая: после «сужающегося дерева» мы строим «расширяющееся»; за "
    },
    {
      "include": {
        "value": "k"
      }
    },
    {
      "text": " шагов до конца мы знаем результаты сравнения всех суффиксов, длины которых кратны "
    },
    {
      "include": {
        "value": "2^k"
      }
    },
    {
      "text": ".\nЭто дерево имеет размер "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": " и глубину "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": ", что завершает доказательство.\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПокажите, что вычитание двух "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-битовых чисел по модулю "
    },
    {
      "include": {
        "value": "2^n"
      }
    },
    {
      "text": "\nвыполняется схемой размера "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": " и глубины "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": ".\n(Указание: вычитание легко сводится к сложению, если заменить нули на единицы и наоборот.)\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\nТеперь займёмся умножением.\nСхема умножения двух "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-разрядных   "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Умножение чисел, сложность"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nчисел имеет "
    },
    {
      "include": {
        "value": "2n"
      }
    },
    {
      "text": " входов (по "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " для каждого множителя) и "
    },
    {
      "include": {
        "value": "2n"
      }
    },
    {
      "text": "\nвыходов для произведения.\n\n\nПосмотрим, какие оценки даёт обычный способ умножения чисел столбиком.\nВ нём умножение двух "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-разрядных чисел сводится к сложению "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " копий первого числа (частично заменённых на нули в зависимости от цифр второго числа) со сдвигами.\n\n\nПолучение этих копий требует схемы размера "
    },
    {
      "include": {
        "value": "O(n^2)"
      }
    },
    {
      "text": " (общее число цифр в копиях) и глубины "
    },
    {
      "include": {
        "value": "O(1)"
      }
    },
    {
      "text": ".\nСложение двух "
    },
    {
      "include": {
        "value": "2n"
      }
    },
    {
      "text": "-разрядных чисел мы можем выполнить с помощью схемы размера "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": " и глубины "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": ", так что необходимые "
    },
    {
      "include": {
        "value": "n-1"
      }
    },
    {
      "text": " сложений можно выполнить схемой размера "
    },
    {
      "include": {
        "value": "O(n^2)"
      }
    },
    {
      "text": " и глубины "
    },
    {
      "include": {
        "value": "O(\\log^2 n)"
      }
    },
    {
      "text": " (если складывать сначала попарно, потом результаты снова попарно и т.д.).\nОказывается, этот результат можно улучшить.\nНаиболее экономные способы основаны на преобразовании Фурье (о них можно прочесть в книге "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "aho-hopcroft-ullman"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ").\nС их помощью, например, можно построить схему умножения "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-битовых чисел, имеющую размер "
    },
    {
      "include": {
        "value": "n\\log^c n"
      }
    },
    {
      "text": ".\n\n\nЭти методы далеко выходят за рамки нашего обсуждения, но два улучшения мы приведём.\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "key",
            "value": "fast-multiplication",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\nСуществует схема умножения двух "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-разрядных чисел размера "
    },
    {
      "include": {
        "value": "O(n^2)"
      }
    },
    {
      "text": " и глубины "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nКак мы уже говорили, умножение двух "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-разрядных чисел сводится к сложению "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " таких чисел, и остаётся выполнить такое сложение схемой размера "
    },
    {
      "include": {
        "value": "O(n^2)"
      }
    },
    {
      "text": " и глубины "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": ".\nКлючевым моментом здесь является сведение сложения трёх чисел к сложению двух с помощью простой схемы размера "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": " и глубины "
    },
    {
      "include": {
        "value": "O(1)"
      }
    },
    {
      "text": ".\nВ самом деле, пусть есть три числа "
    },
    {
      "include": {
        "value": "x"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "y"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "z"
      }
    },
    {
      "text": ".\nЕсли мы будем складывать отдельно в каждом разряде, то в разряде может накопиться любая сумма от "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": " до "
    },
    {
      "include": {
        "value": "3"
      }
    },
    {
      "text": ", то есть в двоичной записи от "
    },
    {
      "include": {
        "value": "00"
      }
    },
    {
      "text": " до "
    },
    {
      "include": {
        "value": "11"
      }
    },
    {
      "text": ".\nСформируем из младших битов этих двухбитовых сумм число "
    },
    {
      "include": {
        "value": "u"
      }
    },
    {
      "text": ", а из старших (сдвинутых влево)— число "
    },
    {
      "include": {
        "value": "v"
      }
    },
    {
      "text": ".\nТогда, очевидно, "
    },
    {
      "include": {
        "value": "x+y+z=u+v"
      }
    },
    {
      "text": ".\nПолучение цифр числа "
    },
    {
      "include": {
        "value": "u"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "v"
      }
    },
    {
      "text": " происходит параллельно во всех разрядах и требует размера "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": " и глубины "
    },
    {
      "include": {
        "value": "O(1)"
      }
    },
    {
      "text": ".\n\nТеперь, если надо сложить "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " чисел, можно разбить их на тройки и из каждых трёх чисел получить по два.\nВ следующий круг, таким образом, выйдут "
    },
    {
      "include": {
        "value": "(2/3)n"
      }
    },
    {
      "text": " чисел (примерно— граничные эффекты большой роли не играют).\nИх снова можно сгруппировать по тройкам и т.д. С каждым уровнем число слагаемых убывает в полтора раза, так что глубина схемы будет логарифмической.\nКаждое преобразование трёх слагаемых в два требует схемы размера "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": "\nи уменьшает число слагаемых на единицу, так что потребуется "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "\nтаких преобразований.\nИтак, эта конструкция имеет общий размер "
    },
    {
      "include": {
        "value": "O(n^2)"
      }
    },
    {
      "text": " и глубину "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": ".\nНадо только отметить, что в конце у нас получается не одно число, а два, и их напоследок надо сложить— что мы умеем делать с глубиной "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": " и размером "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nДокажите, что схема, вычисляющая булеву функцию "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": " от "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "\nаргументов, у которой ни один аргумент не является фиктивным, имеет размер не менее "
    },
    {
      "include": {
        "value": "cn"
      }
    },
    {
      "text": " и глубину не менее "
    },
    {
      "include": {
        "value": "c\\log n"
      }
    },
    {
      "text": ", где "
    },
    {
      "include": {
        "value": "c>0"
      }
    },
    {
      "text": "— некоторая константа, зависящая от выбранного набора элементов. (Аргумент функции называют "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "фиктивным"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ", "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Фиктивный аргумент функции|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Булева функция!фиктивный аргумент|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nесли от него значение функции не зависит.)\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nЭта задача показывает, что если по ходу умножения двух "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-разрядных чисел мы суммируем "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " слагаемых размера "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": ", то оценки "
    },
    {
      "include": {
        "value": "O(n^2)"
      }
    },
    {
      "text": " для размера и "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": " для глубины, полученные при доказательстве теоремы "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "fast-multiplication"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ", существенно улучшить нельзя.\n\n\nОднако никто не обязывает нас следовать традиционному способу умножения столбиком— отказавшись от него, мы можем уменьшить размер схемы.\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "key",
            "value": "recursive-multiplication",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\nСуществует схема умножения двух "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-разрядных чисел размера "
    },
    {
      "include": {
        "value": "O(n^{\\log_2 3})"
      }
    },
    {
      "text": " и глубины "
    },
    {
      "include": {
        "value": "O(\\log^2 n)"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nНачнём с такого замечания.\nВычисляя произведение двух комплексных чисел\n"
    },
    {
      "include": {
        "value": "\n(a+bi)(c+di)=(ac-bd)+(ad+bc)i\n"
      }
    },
    {
      "text": "\nобычным способом, мы делаем четыре умножения.\nНо можно обойтись и тремя с помощью трюка: вычислить "
    },
    {
      "include": {
        "value": "ac"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "bd"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "(a+b)(c+d)"
      }
    },
    {
      "text": ", а потом найти "
    },
    {
      "include": {
        "value": "ad+bc"
      }
    },
    {
      "text": " как разность "
    },
    {
      "include": {
        "value": "(a+b)(c+d)-ac-bd"
      }
    },
    {
      "text": ".\n\nАналогичный фокус можно проделать и для целых чисел.\nРазобьём "
    },
    {
      "include": {
        "value": "2n"
      }
    },
    {
      "text": "-битовое число на две "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-битовые части, то есть представим его в виде "
    },
    {
      "include": {
        "value": "a2^n+b"
      }
    },
    {
      "text": ".\nТеперь запишем произведение двух таких чисел:\n"
    },
    {
      "include": {
        "value": "\n(a2^n+b)(c2^n+d)=ac2^{2n}+(ad+bc)2^n+bd.\n"
      }
    },
    {
      "text": "\nТеперь видно, что достаточно найти три произведения, а именно, "
    },
    {
      "include": {
        "value": "ac"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "bd"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "(a+b)(c+d)"
      }
    },
    {
      "text": ", чтобы определить все три слагаемых в правой части равенства.\nПолучается, что умножение двух "
    },
    {
      "include": {
        "value": "2n"
      }
    },
    {
      "text": "-разрядных чисел сводится к трём умножениям "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-разрядных и к нескольким сложениям и вычитаниям. (На самом деле при умножении "
    },
    {
      "include": {
        "value": "(a+b)"
      }
    },
    {
      "text": " на "
    },
    {
      "include": {
        "value": "(c+d)"
      }
    },
    {
      "text": "\nсомножители могут быть "
    },
    {
      "include": {
        "value": "(n+1)"
      }
    },
    {
      "text": "-разрядными, но это не страшно, так как обработка лишнего разряда сводится к нескольким сложениям.)\n\nДля размера схемы это даёт рекурсивную оценку\n"
    },
    {
      "include": {
        "value": "\nS(2n)\\le 3S(n)+O(n)\n"
      }
    },
    {
      "text": "\n, из которой следует, что "
    },
    {
      "include": {
        "value": "S(n)=O(n^{\\log_2 3})"
      }
    },
    {
      "text": ".\nВ самом деле, для умножения "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-разрядных чисел требуется дерево рекурсивных вызовов глубины "
    },
    {
      "include": {
        "value": "\\log_2 n"
      }
    },
    {
      "text": " и степени ветвления "
    },
    {
      "include": {
        "value": "3"
      }
    },
    {
      "text": ".\nЗаметим, что размер схемы в вершине пропорционален числу складываемых битов.\nПри переходе от одного уровня к следующему (более близкому к корню) размер слагаемых растёт вдвое, а число вершин уменьшается втрое, поэтому общее число элементов на этом уровне уменьшается в полтора раза.\nТаким образом, при движении по уровням от листьев к корню получается убывающая геометрическая прогрессия со знаменателем "
    },
    {
      "include": {
        "value": "2/3"
      }
    },
    {
      "text": ", сумма которой всего лишь втрое превосходит её первый член.\nОстаётся заметить, что число листьев равно "
    },
    {
      "include": {
        "value": "3^{\\log_2 n}=n^{\\log_2 3} "
      }
    },
    {
      "text": ".\n\nОценка глубины также очевидна: на каждом уровне мы имеем схему сложения глубины "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": ", а число уровней есть "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nНа этом мы завершаем знакомство со схемами из функциональных элементов, выполняющими арифметические операции.\nО них можно прочесть в главе 29 учебника Кормена, "
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Кормен"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nЛейзерсона "
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Лейзерсон"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nи Ривеста "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "cormen-leiserson-rivest"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Ривест"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nи в книге Ахо, "
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Ахо"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nХопкрофта "
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Хопкрофт"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nи Ульмана "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "aho-hopcroft-ullman"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Ульман"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\nРассмотрим теперь функцию «голосования» "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Функция!голосования|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "majority"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " (majority).\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Сложность!функции голосования"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nОна имеет нечётное число аргументов, и значение её равно "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": " или "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": " в зависимости от того, какое из двух значений чаще встречается среди входов.\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nДля функции голосования существует схема размера "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": " и глубины "
    },
    {
      "include": {
        "value": "O(\\log n\\log\\log n)"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nНа самом деле можно даже вычислить общее число единиц среди входов.\nЭто делается рекурсивно: считаем отдельно для каждой половины, потом складываем.\nПолучается логарифмическое число уровней.\nНа верхнем уровне надо складывать числа размера "
    },
    {
      "include": {
        "value": "\\log n"
      }
    },
    {
      "text": ", на следующем— размера "
    },
    {
      "include": {
        "value": "{(\\log n -1)} "
      }
    },
    {
      "text": " и так до самого низа, где складываются однобитовые числа (то есть биты входа).\nКакой средний размер складываемых чисел? Половина вершин в дереве приходится на нижний уровень (числа длины "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": "), четверть— на следующий (числа длины "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ") и т.д. Вспоминая, что ряд "
    },
    {
      "include": {
        "value": "\\sum (k/2^k)"
      }
    },
    {
      "text": " сходится, видим, что средний размер складываемых чисел есть "
    },
    {
      "include": {
        "value": "O(1)"
      }
    },
    {
      "text": " и общий размер схемы есть "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": ".\nА общая глубина есть "
    },
    {
      "include": {
        "value": "O(\\log n \\log\\log n)"
      }
    },
    {
      "text": ", так как на каждом из "
    },
    {
      "include": {
        "value": "\\log n"
      }
    },
    {
      "text": "\nуровней стоит схема глубины "
    },
    {
      "include": {
        "value": "O(\\log\\log n)"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nЗаметим, что хотя функция голосования монотонна, построенная схема её вычисления содержит немонотонные элементы (поскольку операция сложения не монотонна).\nМы уже говорили, что всякую монотонную функцию можно составить из конъюнкций и дизъюнкций.\nДля функции голосования есть очевидный способ это сделать: написать дизъюнкцию всех конъюнкций размера "
    },
    {
      "include": {
        "value": "(n+1)/2"
      }
    },
    {
      "text": " (напомним, что число входов "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " предполагается нечётным).\nОднако при этом получится схема экспоненциального по "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " размера.\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nСуществует схема размера "
    },
    {
      "include": {
        "value": "O(n^c)"
      }
    },
    {
      "text": " и глубины "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": ", составленная только из элементов И и ИЛИ (с двумя входами), вычисляющая функцию голосования.\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nДля начала заметим, что ограничение на размер является следствием ограничения на глубину, так как элементы И и ИЛИ имеют только два входа и число элементов в схеме глубины "
    },
    {
      "include": {
        "value": "d"
      }
    },
    {
      "text": " есть "
    },
    {
      "include": {
        "value": "O(2^d)"
      }
    },
    {
      "text": ".\n\nСхема будет строиться из элементов большинства с тремя входами.\n(Каждый из них можно собрать из конъюнкций и дизъюнкций по формуле "
    },
    {
      "include": {
        "value": "(a\\land b)\\lor (a\\land c)\\lor (b\\land c)"
      }
    },
    {
      "text": ".)\nВыход схемы будет большинством из трёх значений, каждое из которых есть большинство из трёх значений и т.д. (рис. "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "majority-scheme"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ").\n\n"
    },
    {
      "tag": {
        "name": "def:image",
        "body": {
          "blocks": [
            {
              "text": "Дерево из элементов "
            },
            {
              "include": {
                "value": "3"
              }
            },
            {
              "text": "-большинства.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "src",
            "value": "/img3.png",
            "empty": false
          },
          {
            "name": "key",
            "value": "majority-scheme",
            "empty": false
          },
          {
            "name": "height",
            "value": "0.5",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\nПродолжая эту конструкцию на "
    },
    {
      "include": {
        "value": "k"
      }
    },
    {
      "text": " уровнях, мы получим схему с "
    },
    {
      "include": {
        "value": "3^k"
      }
    },
    {
      "text": " входами. (Отметим, что эта схема не будет вычислять большинство среди своих входов— по той же причине, по которой результат непрямого голосования может отличаться от мнения большинства.) Но мы сделаем вот какую странную вещь: возьмём "
    },
    {
      "include": {
        "value": "k"
      }
    },
    {
      "text": "\nравным "
    },
    {
      "include": {
        "value": "c\\log n"
      }
    },
    {
      "text": " при достаточно большом коэффициенте пропорциональности "
    },
    {
      "include": {
        "value": "c"
      }
    },
    {
      "text": " (число входов такой схемы будет полиномиально зависеть от "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": ") и напишем на входах случайно выбранные переменные из данного нам набора "
    },
    {
      "include": {
        "value": "x_1,\\dots,x_n"
      }
    },
    {
      "text": ".\n(Переменные, записываемые на разных входах, выбираются независимо.) Оказывается, что с ненулевой вероятностью эта схема будет вычислять функцию большинства среди "
    },
    {
      "include": {
        "value": "x_1,\\dots,x_n"
      }
    },
    {
      "text": ", если константа "
    },
    {
      "include": {
        "value": "c"
      }
    },
    {
      "text": "\nдостаточно велика.\nСледовательно, искомая схема существует.\n\n\nОбратите внимание: нам удастся доказать существование интересующей нас схемы, не предъявив её явно. (Такое использование вероятностных методов в комбинаторных рассуждениях часто бывает полезно.)\n\n\nИтак, почему же схема с положительной вероятностью вычисляет функцию большинства? Это доказывается так: рассмотрим какой-то один набор значений на входах и докажем, что на этом конкретном наборе случайная схема выдаёт правильный ответ с вероятностью, очень близкой к единице (равной "
    },
    {
      "include": {
        "value": "1-\\varepsilon"
      }
    },
    {
      "text": " при очень малом "
    },
    {
      "include": {
        "value": "\\varepsilon"
      }
    },
    {
      "text": ").\n\n\nЕсли число "
    },
    {
      "include": {
        "value": "\\varepsilon"
      }
    },
    {
      "text": " настолько мало, что остаётся меньшим единицы даже после умножения на число возможных входов ("
    },
    {
      "include": {
        "value": "2^n"
      }
    },
    {
      "text": "), то получаем требуемое (каждое из "
    },
    {
      "include": {
        "value": "2^n"
      }
    },
    {
      "text": " событий имеет вероятность не меньше "
    },
    {
      "include": {
        "value": "1-\\varepsilon"
      }
    },
    {
      "text": ", значит их пересечение имеет вероятность не меньше "
    },
    {
      "include": {
        "value": "1-2^n\\varepsilon>0"
      }
    },
    {
      "text": ").\n\n\nИтак, осталось оценить вероятность того, что случайная схема даст правильный ответ на данном входе.\nПусть доля единиц среди всех входов равна "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": ".\nТогда на каждый входной провод схемы подаётся единица с вероятностью "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": " и нуль с вероятностью "
    },
    {
      "include": {
        "value": "1-p"
      }
    },
    {
      "text": "\n(выбор случайной переменной даёт единицу с вероятностью "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": "), причём сигналы на всех входах независимы.\n\n\nЕсли на трёх входах элемента "
    },
    {
      "include": {
        "value": "3"
      }
    },
    {
      "text": "-большинства сигналы независимы, и вероятность появления единицы на каждом входе есть "
    },
    {
      "include": {
        "value": "p"
      }
    },
    {
      "text": ", то вероятность появления единицы на выходе есть "
    },
    {
      "include": {
        "value": "\\varphi(p)=3p^2(1-p)+p^3=3p^2-2p^3"
      }
    },
    {
      "text": ".\nНа следующих уровнях вероятность появления единицы будет равна "
    },
    {
      "include": {
        "value": "\\varphi(\\varphi(p)),\\varphi(\\varphi(\\varphi(p))),\\dots"
      }
    },
    {
      "text": " График функции "
    },
    {
      "include": {
        "value": "\\varphi(x)"
      }
    },
    {
      "text": " на отрезке "
    },
    {
      "include": {
        "value": "[0,1]"
      }
    },
    {
      "text": "\n(рис. "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "iterations-majority"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ") показывает, что при итерациях функции "
    },
    {
      "include": {
        "value": "\\varphi"
      }
    },
    {
      "text": " дисбаланс (отклонение от середины) нарастает и последовательность стремится к краю отрезка.\nНадо только оценить число шагов.\n\n"
    },
    {
      "tag": {
        "name": "def:image",
        "body": {
          "blocks": [
            {
              "text": "Итерируемая функция "
            },
            {
              "include": {
                "value": "\\varphi"
              }
            },
            {
              "text": ".\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "src",
            "value": "/img4.png",
            "empty": false
          },
          {
            "name": "key",
            "value": "iterations-majority",
            "empty": false
          },
          {
            "name": "height",
            "value": "0.5",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\nЕсли вначале единицы составляют большинство из "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " аргументов (напомним, "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " нечётно), то их как минимум "
    },
    {
      "include": {
        "value": "(n+1)/2"
      }
    },
    {
      "text": ", так что "
    },
    {
      "include": {
        "value": "p\\ge (n+1)/2n=1/2+1/(2n)"
      }
    },
    {
      "text": ".\nТаким образом, начальный дисбаланс составляет как минимум "
    },
    {
      "include": {
        "value": "1/2n"
      }
    },
    {
      "text": ".\nА в конце нам нужно приблизиться к краю отрезка на расстояние "
    },
    {
      "include": {
        "value": "2^{-n} "
      }
    },
    {
      "text": ".\n\n\nИтак, нам осталось доказать такую лемму (относящуюся скорее к математическому анализу):\n\n\n"
    },
    {
      "tag": {
        "name": "format:pre",
        "body": {
          "blocks": [
            {
              "text": "Лемма"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\nПусть последовательность "
    },
    {
      "include": {
        "value": "x_k\\in[0,1]"
      }
    },
    {
      "text": " задана рекуррентной формулой "
    },
    {
      "include": {
        "value": "x_{k+1}=\\varphi(x_k)"
      }
    },
    {
      "text": ", где\n"
    },
    {
      "include": {
        "value": "\n\\varphi(x)=3x^2-2x^3.\n"
      }
    },
    {
      "text": "\nПусть "
    },
    {
      "include": {
        "value": "x_0\\ge1/2+1/(2n)"
      }
    },
    {
      "text": ".\nТогда последовательность "
    },
    {
      "include": {
        "value": "x_k"
      }
    },
    {
      "text": " монотонно возрастает и приближается к "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": " на расстояние "
    },
    {
      "include": {
        "value": "2^{-n} "
      }
    },
    {
      "text": " за "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": " шагов. [Симметричное утверждение верно и при "
    },
    {
      "include": {
        "value": "x_0\\le 1/2-1/(2n)"
      }
    },
    {
      "text": ".]\n\nИдея доказательства: посмотрим на функцию вблизи точки "
    },
    {
      "include": {
        "value": "1/2"
      }
    },
    {
      "text": " и у краёв отрезка.\nВ точке "
    },
    {
      "include": {
        "value": "1/2"
      }
    },
    {
      "text": " производная больше "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ", поэтому удаление от "
    },
    {
      "include": {
        "value": "1/2"
      }
    },
    {
      "text": " растёт как геометрическая прогрессия, и точка перейдёт какую-то фиксированную границу (например, "
    },
    {
      "include": {
        "value": "0{,}51"
      }
    },
    {
      "text": ") не позднее чем за "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": " шагов.\nЗатем потребуется "
    },
    {
      "include": {
        "value": "O(1)"
      }
    },
    {
      "text": " шагов, чтобы дойти, скажем, до "
    },
    {
      "include": {
        "value": "0{,}99"
      }
    },
    {
      "text": ".\nВ единице первая производная функции равна нулю, поэтому расстояние до единицы каждый раз примерно возводится в квадрат, и потому для достижения погрешности "
    },
    {
      "include": {
        "value": "2^{-n} "
      }
    },
    {
      "text": " потребуется "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": " шагов (как в методе Ньютона отыскания корня).\nВсего получается "
    },
    {
      "include": {
        "value": "O(\\log n)+O(1)+O(\\log n)"
      }
    },
    {
      "text": " шагов, что и требовалось.\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nНа самом деле справедливо гораздо более сильное утверждение:\nсуществует схема размера "
    },
    {
      "include": {
        "value": "O(n\\log n)"
      }
    },
    {
      "text": " и глубины "
    },
    {
      "include": {
        "value": "O(\\log n)"
      }
    },
    {
      "text": ", состоящая только из элементов И и ИЛИ, которая имеет "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " входов и "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " выходов и осуществляет сортировку последовательности "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": " нулей и единиц (это означает, что на выходе столько же единиц, сколько на входе, причём выходная последовательность всегда невозрастающая).\nЯсно, что средний бит выхода в такой ситуации реализует функцию большинства.\n\n\nПри кажущейся простоте формулировки единственная известная конструкция такой схемы (сортирующая сеть AKS, придуманная Айтаи, "
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Айтаи"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nКомлошом "
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Комлош"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nи Сцемереди "
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Сцемереди"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nв 1983 году)\nвесьма сложна, и появление какой-то более простой конструкции (с логарифмической глубиной!) было бы замечательным достижением.\nНо разрешив большую глубину, мы сильно упрощаем задачу: для глубины "
    },
    {
      "include": {
        "value": "O(\\log^2 n)"
      }
    },
    {
      "text": " уже есть несколько сравнительно простых конструкций, а для глубины "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": " годится совсем простая сеть.\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПостройте сортирующую сеть глубины "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": " с "
    },
    {
      "include": {
        "value": "O(n^2)"
      }
    },
    {
      "text": " элементов И и ИЛИ.  (Указание.\nДва элемента И и ИЛИ вместе образуют сортирующую сеть для двух входов.\nВспомнив сортировку пузырьком, придумайте, как из таких сетей собрать искомую, на каждом шаге группируя переменные в пары.\nОбратите внимание, что доказательство оценки на глубину не вполне тривиально.)\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nМногие нетривиальные результаты теории алгоритмов можно переформулировать в терминах сложности каких-то булевых функций.\nНапример, есть вероятностный алгоритм проверки простоты "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Алгоритм проверки простоты"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nбольшого числа (применяемый в системах шифрования для проверки простоты чисел из нескольких тысяч цифр).\nИспользуя этот алгоритм, можно доказать такой факт: существует схема проверки простоты "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "-битового числа (на вход подаются "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "\nцифр, на выходе появляется единица, если число простое, и нуль, если число составное), размер которой ограничен полиномом от "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": ".\n\n\nВернёмся к общим утверждениям о схемах и формулах.\nМы уже говорили, что с точки зрения измерения размера схемы и формулы—\nэто разные вещи (схемы экономичнее, так как в них одинаковые подформулы учитываются только один раз).\nОказывается, что размер формулы можно связать с глубиной схемы.\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Глубина схемы из функциональных элементов"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Схема из функциональных элементов!глубина"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n\n\nБудем называть "
    },
    {
      "tag": {
        "name": "em",
        "body": {
          "blocks": [
            {
              "text": "размером"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Размер формулы|defin"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nформулы число логических связок в ней.\nМы предполагаем, что формула использует конъюнкции, дизъюнкции и отрицания, и в схемах будем использовать такие же элементы.\nНапомним, что размером схемы "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Размер схемы"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Схема из функциональных элементов!размер"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nмы называли число элементов, а сложностью "
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Сложность!булевой функции"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Булева функция!сложность"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nбулевой функции— минимальный размер схемы, её вычисляющей.\nСложность функции "
    },
    {
      "include": {
        "value": "h"
      }
    },
    {
      "text": " обозначалась "
    },
    {
      "include": {
        "value": "\\text{size}(h)"
      }
    },
    {
      "text": " (точнее "
    },
    {
      "include": {
        "value": "\\text{size}_B(h)"
      }
    },
    {
      "text": ", где "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": "— набор разрешённых функциональных элементов, но сейчас мы договорились использовать конъюнкции, дизъюнкции и отрицания и опускаем индекс "
    },
    {
      "include": {
        "value": "B"
      }
    },
    {
      "text": ").\n\n\nМинимальный размер формулы, выражающей функцию "
    },
    {
      "include": {
        "value": "h"
      }
    },
    {
      "text": ", будем обозначать "
    },
    {
      "include": {
        "value": "\\text{fsize}(h)"
      }
    },
    {
      "text": ".\nОчевидно, "
    },
    {
      "include": {
        "value": "\\text{size}(h)\\le\\text{fsize}(h)"
      }
    },
    {
      "text": ".\nБолее интересно, однако, следующее утверждение, связывающее размер схемы с глубиной формулы.\nОбозначим через "
    },
    {
      "include": {
        "value": "\\text{depth}(h)"
      }
    },
    {
      "text": "\nминимальную глубину схемы, вычисляющей функцию "
    },
    {
      "include": {
        "value": "h"
      }
    },
    {
      "text": ".\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [
          {
            "name": "key",
            "value": "formula-size-depth",
            "empty": false
          }
        ],
        "separator": ""
      }
    },
    {
      "text": "\nИмеют место оценки "
    },
    {
      "include": {
        "value": "\n\\text{fsize}(h)\\le c_1^{\\text{depth}(h)} \\quad\\text{и}\\quad \\text{depth}(h)\\le c_2\\log\\text{fsize}(h)\n"
      }
    },
    {
      "text": " (для некоторых констант "
    },
    {
      "include": {
        "value": "c_1"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "c_2"
      }
    },
    {
      "text": " и для всех "
    },
    {
      "include": {
        "value": "h"
      }
    },
    {
      "text": ").\nДругими словами, "
    },
    {
      "include": {
        "value": "\\text{depth} "
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "\\log\\text{fsize} "
      }
    },
    {
      "text": " отличаются не более чем в константу раз.\n"
    },
    {
      "tag": {
        "name": "#end:def:theorem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "#start:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nПервая оценка очевидна: если мы скопируем повторяющиеся фрагменты схемы, чтобы развернуть её в дерево, то глубина не изменится.\nЕсли она равна "
    },
    {
      "include": {
        "value": "k"
      }
    },
    {
      "text": ", то в полученном дереве будет не больше "
    },
    {
      "include": {
        "value": "2^k-1"
      }
    },
    {
      "text": " элементов и соответствующая формула имеет размер не более "
    },
    {
      "include": {
        "value": "{2^k-1} "
      }
    },
    {
      "text": ". (Напомним, что элементами являются конъюнкции, дизъюнкции и отрицания, и потому ветвление не больше "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ".)\n\n\nТо же самое можно сказать индуктивно.\nПусть глубина схемы равна "
    },
    {
      "include": {
        "value": "k"
      }
    },
    {
      "text": ".\nВыход схемы является выходом некоторого элемента.\nТогда на его входы подаются булевы функции глубины не больше "
    },
    {
      "include": {
        "value": "k-1"
      }
    },
    {
      "text": ".\nПо предположению индукции их можно записать формулами размера "
    },
    {
      "include": {
        "value": "2^{k-1}-1"
      }
    },
    {
      "text": ".\nТаких формул максимум две, так что общий размер не превосходит "
    },
    {
      "include": {
        "value": "2(2^{k-1}-1)+1=2^k-1"
      }
    },
    {
      "text": ".\n\n\nВторая оценка сложнее.\nЕсли мы будем преобразовывать формулу в схему естественным образом (введя вспомогательную переменную для каждой подформулы), то глубина получившейся схемы может быть близка к размеру формулы, а не к его логарифму.\nНапример, если формула имеет вид "
    },
    {
      "include": {
        "value": "(\\ldots((p_1\\land p_2)\\land p_3)\\land\\dots p_n)"
      }
    },
    {
      "text": ", то у нас получится цепочка элементов И, у которых каждый следующий подвешен к левому входу предыдущего, и глубина равна "
    },
    {
      "include": {
        "value": "{n-1} "
      }
    },
    {
      "text": ".\nКонечно, если использовать ассоциативность конъюнкции, скобки можно переставить и получить более сбалансированное дерево глубины примерно "
    },
    {
      "include": {
        "value": "\\log n"
      }
    },
    {
      "text": ", как и требуется.\nНо как выполнить такое преобразование в случае произвольной формулы?\n\n\nОбозначим данную нам формулу через "
    },
    {
      "include": {
        "value": "F"
      }
    },
    {
      "text": ".\nВыберем у неё некоторую подформулу "
    },
    {
      "include": {
        "value": "G"
      }
    },
    {
      "text": " (как именно, мы объясним позже).\nРассмотрим формулу "
    },
    {
      "include": {
        "value": "F_0"
      }
    },
    {
      "text": ", которая получится, если вместо "
    },
    {
      "include": {
        "value": "G"
      }
    },
    {
      "text": " подставить "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": "\n(ложь), а также формулу "
    },
    {
      "include": {
        "value": "F_1"
      }
    },
    {
      "text": ", которая получится, если подставить "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ".\nЛегко понять, что "
    },
    {
      "include": {
        "value": "F"
      }
    },
    {
      "text": " равносильна формуле "
    },
    {
      "include": {
        "value": "((F_0 \\land\\lnot G)\\lor (F_1\\land G))"
      }
    },
    {
      "text": ".\nЕсли теперь удастся заменить формулы "
    },
    {
      "include": {
        "value": "F_0, F_1, G"
      }
    },
    {
      "text": " схемами глубины не больше "
    },
    {
      "include": {
        "value": "k"
      }
    },
    {
      "text": ", то для "
    },
    {
      "include": {
        "value": "F"
      }
    },
    {
      "text": " получится схема глубины не больше "
    },
    {
      "include": {
        "value": "k+3"
      }
    },
    {
      "text": ".\n\n\nТакое преобразование полезно, если все три формулы "
    },
    {
      "include": {
        "value": "F_1, F_0, G"
      }
    },
    {
      "text": "\nимеют заметно меньший размер, чем исходная формула "
    },
    {
      "include": {
        "value": "F"
      }
    },
    {
      "text": ".\n\n\n"
    },
    {
      "tag": {
        "name": "format:pre",
        "body": {
          "blocks": [
            {
              "text": "Лемма"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\nУ любой формулы достаточно большого размера "
    },
    {
      "include": {
        "value": "n"
      }
    },
    {
      "text": "\nесть подформула размера от "
    },
    {
      "include": {
        "value": "n/4"
      }
    },
    {
      "text": " до "
    },
    {
      "include": {
        "value": "3n/4"
      }
    },
    {
      "text": ".\n\n\nДоказательство.\nКаждая формула есть конъюнкция двух подформул, дизъюнкция двух подформул или отрицание подформулы.\nНачав со всей формулы, будем переходить к её подформулам, на каждом шаге выбирая из двух подформул наибольшую.\nТогда на каждом шаге размер убывает не более чем в два раза, и потому мы не можем миновать промежуток "
    },
    {
      "include": {
        "value": "[n/4, 3n/4]"
      }
    },
    {
      "text": ", концы которого отличаются втрое. (На самом деле тут есть небольшая неточность: размер формулы может убывать чуть быстрее, чем вдвое, так как размер формулы на единицу больше суммы размеров частей, но у нас есть запас, поскольку концы промежутка отличаются втрое, а не вдвое.) Лемма доказана.\n\n\nВыбирая подформулу "
    },
    {
      "include": {
        "value": "G"
      }
    },
    {
      "text": " с помощью этой леммы, мы гарантируем, что размер всех трёх формул "
    },
    {
      "include": {
        "value": "F_0,F_1,G"
      }
    },
    {
      "text": " не превосходит "
    },
    {
      "include": {
        "value": "3/4"
      }
    },
    {
      "text": "\nразмера исходной формулы (подстановка нуля или единицы может только уменьшить размер формулы— некоторые части можно будет выбросить).\n\n\nПрименим ко всем трём формулам "
    },
    {
      "include": {
        "value": "F_0"
      }
    },
    {
      "text": ", "
    },
    {
      "include": {
        "value": "F_1"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "G"
      }
    },
    {
      "text": " тот же приём, выделим в них подформулы среднего размера и так далее, пока мы не спустимся до формул малого размера, которые можно записать в виде схем как угодно.\nВ итоге получится дерево с логарифмическим числом уровней, на каждом из которых стоят схемы глубины "
    },
    {
      "include": {
        "value": "3"
      }
    },
    {
      "text": ", а в листьях находятся схемы глубины "
    },
    {
      "include": {
        "value": "O(1)"
      }
    },
    {
      "text": ".\n\n\nДругими словами, индукцией по длине формулы, выражающей функцию "
    },
    {
      "include": {
        "value": "h"
      }
    },
    {
      "text": ", мы доказываем, что "
    },
    {
      "include": {
        "value": "\\text{depth}(h)=O(\\log\\text{fsize}(h))"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:proof",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nОпределим глубину формулы как максимальное число вложенных пар скобок; для единообразия будем окружать отрицание скобками и писать "
    },
    {
      "include": {
        "value": "(\\lnot A)"
      }
    },
    {
      "text": " вместо "
    },
    {
      "include": {
        "value": "\\lnot A"
      }
    },
    {
      "text": ".\nПокажите, что при этом не получится ничего нового: минимальная глубина формулы, записывающей некоторую функцию "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": ", совпадает с минимальной глубиной схемы, вычисляющей "
    },
    {
      "include": {
        "value": "f"
      }
    },
    {
      "text": ".\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nОпределение формульной сложности "
    },
    {
      "include": {
        "value": "\\text{fsize}(h)"
      }
    },
    {
      "text": " зависит от выбора базиса.\nОказывается, что здесь (в отличие от схемной сложности) выбор базиса может изменить "
    },
    {
      "include": {
        "value": "\\text{fsize}(h)"
      }
    },
    {
      "text": " более чем в константу раз.\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nОбъясните, почему доказательство теоремы "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "size-invariant"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nне переносится на случай формул.\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\nТак происходит с функцией "
    },
    {
      "include": {
        "value": "{p_1\\oplus p_2\\oplus\\ldots\\oplus p_n} "
      }
    },
    {
      "text": " (знак "
    },
    {
      "include": {
        "value": "\\oplus"
      }
    },
    {
      "text": " обозначает сложение по\n"
    },
    {
      "tag": {
        "name": "def:index",
        "body": {
          "blocks": [
            {
              "text": "Сложение по модулю "
            },
            {
              "include": {
                "value": "2"
              }
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nмодулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ").\nЭта функция имеет формульную сложность "
    },
    {
      "include": {
        "value": "O(n)"
      }
    },
    {
      "text": ", если сложение по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": " входит в базис.\nОднако в базисе И, ИЛИ, НЕ она имеет большую сложность, как доказала Б.А.Субботовская.\n"
    },
    {
      "tag": {
        "name": "def:glossary",
        "body": {
          "blocks": [
            {
              "text": "Субботовская"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": "\nИдея доказательства такова: если заменить случайно выбранную переменную в формуле с конъюнкциями и дизъюнкциями на случайно выбранное значение "
    },
    {
      "include": {
        "value": "0"
      }
    },
    {
      "text": " или "
    },
    {
      "include": {
        "value": "1"
      }
    },
    {
      "text": ", то формула упростится (не только эта переменная пропадёт, но с некоторой вероятностью пропадут и другие).\nЕсли делать так многократно, то от формулы останется небольшая часть— с другой стороны, эта часть всё равно должна реализовывать сложение оставшихся аргументов по модулю "
    },
    {
      "include": {
        "value": "2"
      }
    },
    {
      "text": ".\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nДокажите, что функция большинства может быть вычислена не только схемой, но и формулой полиномиального размера, содержащей только связки И и ИЛИ.\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "#start:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\nДокажите, что "
    },
    {
      "include": {
        "value": "\\text{fsize}_1(h)"
      }
    },
    {
      "text": " и "
    },
    {
      "include": {
        "value": "\\text{fsize}_2(h)"
      }
    },
    {
      "text": " для одной булевой функции "
    },
    {
      "include": {
        "value": "h"
      }
    },
    {
      "text": " и двух полных базисов полиномиально связаны: существует полином "
    },
    {
      "include": {
        "value": "P"
      }
    },
    {
      "text": " (зависящий от выбора базисов), для которого "
    },
    {
      "include": {
        "value": "\\text{fsize}_2 (h) \\le P(\\text{fsize}_1(h))"
      }
    },
    {
      "text": " при всех "
    },
    {
      "include": {
        "value": "h"
      }
    },
    {
      "text": ".\n(Указание: использовать теорему "
    },
    {
      "tag": {
        "name": "def:link",
        "body": {
          "blocks": [
            {
              "text": "formula-size-depth"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".)\n"
    },
    {
      "tag": {
        "name": "#end:def:problem",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "text": "\n"
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "header",
        "body": {
          "blocks": [
            {
              "text": "Литература"
            }
          ]
        },
        "attrList": [
          {
            "name": "level",
            "value": "2",
            "empty": false
          }
        ],
        "separator": " "
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "А.Ахо, Дж.Ульман, Дж.Хопкрофт. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Построение и анализ\nвычислительных алгоритмов"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", пер. с англ. А.О.Слисенко\nпод редакцией Ю.В.Матиясевича. М.:Мир, 1979.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "aho-hopcroft-ullman",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Дж.Булос, Р.Джеффри. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Вычислимость и логика"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ",\nпер. с англ. В.А.Душского и Е.Ю.Ногиной под\nредакцией С.Н.Артёмова.\nМ.:Мир, 1994. 396 с.\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "% COMPUTABILITY AND LOGIC\n% Third edition\n% George S. Boolos\n% Professor of Philosophy\n% Massachusetts Institute of Technology\n% Richard C. Jeffrey\n% Professor of Philosophy\n% Princeton University\n% Cambridge University Press\n% Cambridge / New York / Port Chester / Melbourne / Sydney\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "boolos-jeffrey",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Н.Бурбаки.  "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Начала математики.   Первая часть.  Основные\nструктуры анализа. Книга первая. Теория множеств"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ",\nпер. с французского Г.Н.Поварова и\nЮ.А.Шихановича под редакцией В.А.Успенского.\nМ.:Мир, 1965.\n\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "% \\'El\\'ements de math\\'ematique par N.Bourbaki\n% XVII, XX, XXII, I\n% Premiere partie\n% Les structures fondamentales de l'analyse\n% livre I\n% TH\\'EORIE DES ENSEMBLES\n% Chapitre I. Description de la math\\'ematique formelle\n% Chapritre II. Th\\'eorie des ensembles. Deuxi\\`eme \\'edition 1960\n%\n% Chapitre III. Ensembles ordonn'es -- Cardinaux -- Nombres entiers\n% 1956\n%\n% Chapitre IV. Structures\n% 1957\n%\n% Fascicules de r'esultats, Troisi\\`eme \\'edition, 1958\n%\n%  HERMANN\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "bourbaki",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "\nБ.Л. ван дер Варден. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Алгебра"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", перевод с немецкого\nА.А.Бельского. Под редакцией Ю.И.Мерзлякова. М.:Наука,\nглавная редакция физико-математической литературы, 1976.\n\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "%  B.L. van der Waerden\n%   Algebra I\n%  Achte Auflage der Modernen Algebra\n%\n%  Springer-Verlag\n%  Berlin - Heidelberg - New York\n%  1971\n%\n%  Algebra II\n%  F\\\"unfte Auflage.\n%\n%  Springer-Verlag\n%  Berlin - Heidelberg - New York\n%  1967\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "vanderwaerden",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Н.К.Верещагин, А.Шень. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Лекции по математической логике и\nтеории алгоритмов. Часть 3. Вычислимые функции"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ". 3-е изд.\nМ.:МЦНМО, 2008.\n176 с.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "computable-functions",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Н.К.Верещагин, А.Шень. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Лекции по математической логике и\nтеории алгоритмов. Часть 1. Начала теории множеств"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ". 3-изд.\nМ.:МЦНМО, 2008. 128 с.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "naive-set-theory",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "А.Гейтинг. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Интуиционизм. Введение"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", пер. с\nангл. В.А.Янкова под редакцией и с комментариями\nА.А.Маркова. М.:Мир, 1965. 200 с.\n\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "% Intuitionism. An introduction.\n% A.Heyting\n% Professor of Mathematics\n% University of Amsterdam\n% 1956\n% North-Holland Publishing Company\n% Amsterdam\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "heyting",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Д.Гильберт, П.Бернайс. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Основания математики.\nЛогические исчисления и формализация арифметики"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", перевод с\nнемецкого Н.М.Нагорного под редакцией С.И.Адяна.\nМ.:Наука, главная редакция физико-математической литературы,\n1979. 560 с.\n\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "% D.Hilbert und P.Bernays\n% Grundlagen der Mathematik. I\n% Zweite Auflage. Springer-Verlag\n% Berlin -- Heidelberg -- New york\n% 1968\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "hilbert-bernays",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "С.Г.Гиндикин. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Алгебра логики в задачах"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ". М.:Наука,\nглавная редакция физико-математической литературы, 1972.\n288 с.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "gindikin",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "А.В.Гладкий. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Математическая логика"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ". М.:Российский\nгосударственный гуманитарный университет, 1998. 479 с.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "gladky-textbook",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "М.Дэвис. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Прикладной нестандартный анализ"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", перевод с\nангл. С.Ф.Сопрунова под редакцией и с предисловием\nВ.А.Успенского. М.:Мир, 1980. 236 с.\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "% Applied Nonstandard Analysis\n% Martin Davis\n% Courant Institute of Mathematical Sciences\n% New York University\n%\n% A Wiley-Interscience Publication\n% John Wiley & Sons\n% New York - London - Sydney - Toronto\n% 1977\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "davis-nonstandard",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Ю.Л.Ершов, Е.А.Палютин. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Математическая логика"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ". 2-е изд.\nМ.:Наука, главная редакция физико-математической литературы,\n1987. 336 с.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "ershov-palyutin",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Г.Кейслер, Ч.Ч.Чэн. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Теория моделей"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ",\nперевод с англ. С.С.Гончарова, С.Д.Денисова,\nВ.А.Душского и Д.И.Свириденко. Под редакцией\nЮ.Л.Ершова и А.Д.Тайманова. М.:Мир, 1977. 614 с.\n\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "%  C.C.Chang\n%       University of California, Los Angeles\n%  H.J.Keisler\n%       University of Wisconsin, Madison\n%  Model  Theory\n%\n%  (Studies in Logic and the Foundations of Mathematics,\n%     volume 73)\n%\n%  North-Holland Publishing Company, Amsterdam - London\n%  American Elsevier Publishing Company, Inc. - New York\n%  1973\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "keisler-chang",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "А.Г.Курош. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Лекции по общей алгебре"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", 2-е изд.\nМ.:Наука, главная редакция физико-математической литературы,\n1973. 399 с.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "kurosh",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "С.К.Клини. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Введение в метаматематику"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", перевод с английского\nА.С.Есенина-Вольпина под редакцией В.А.Успенского. М.:Издательство\nиностранной литературы, 1957. 526 с.\n\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "%  Introduction to metamathematics\n%  Stephen Cole Kleene\n%  Profeccor of Mathematics at\n%  the University of Wisconsin, Madison\n%  D. van Nostrand Company, Inc. New York -- Toronto 1952\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "kleene-metamathematics",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "С.К.Клини. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Математическая логика"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", перевод с английского\nЮ.А.Гастева под редакцией Г.Е.Минца. М.:Мир, 1973. 480 с.\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "%  Mathematical Logic\n%  Stephen Cole Kleene\n%  Cyrus C. MacDuffee Profeccor Of Mathematics\n%  The University of Wisconsin, Madison\n% John Wiley & Sons, Inc. New York -- London -- Sydney, 1967\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "kleene-logic",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "С.Клини, Р.Весли. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Основания интуиционистской\nматематики с точки зрения теории рекурсивных функций"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", перевод с\nанглийского Ф.А.Кабакова и Б.А.Кушнера.\nМ.:Наука, главная редакция физико-математической литературы,\n1978. 272 с. (Серия: Математическая логика и основания математики.)\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "%  The Foundations of Intuitionistic Mathematics\n%   especially in relation to recursive functions\n%  S.C.Kleene  R.E.Vesley\n%  North-Holland Publishing Company, Amsterdam, 1965\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "kleene-vesley",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Т.Кормен, Ч.Лейзерсон, Р.Ривест. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Алгоритмы:\nпостроение и анализ"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", пер. с англ. К.Белова,\nЮ.Боравлёва, Д.Ботина, В.Горелика, Д.Дерягина,\nЮ.Калнишкана, А.Катановой, С.Львовского,\nА.Ромащенко, К.Сонина, К.Трушкина, М.Ушакова,\nА.Шеня, В.Шувалова, М.Юдашкина под ред. А.Шеня,\nВ.Ященко. М.:МЦНМО, 1999. 960 с.\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "% Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest\n%  Introduction to Algorithms\n%  The MIT Press (Cambridge, Massachusets / London, England)\n%  McGraw-Hill Book Company\n%    (New York / St.Louis / San Francisco / Montreal / Toronto)\n%  1990\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "cormen-leiserson-rivest",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "И.А.Лавров, Л.Л.Максимова. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Задачи по теории\nмножеств, математической логике и теории алгоритмов"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", издание\nвторое. М.:Наука, 1984. 224 с.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "lavrov-maksimova",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Р.Линдон. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Заметки по логике"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", пер. с английского\nЮ.А.Гастева под редакцией И.М.Яглома. М.:Мир, 1968.\n128 с.\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "%  Notes on Logic\n%       by\n%  Roger C. Lyndon\n%  The University of Michigan\n%  D. van Nostrand Company, Inc.\n%  Princeton, New Jersey\n%  Toronto    New York   London\n%  1966\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "lyndon",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Ю.И.Манин. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Доказуемое и недоказуемое"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ".\nМ.:Советское радио, 1979. 168 с.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "manin",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "А.Робинсон. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Введение в теорию моделей и метаматематику\nалгебры"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", пер. с англ. А.Б.Волынского под редакцией\nА.Д.Тайманова. М.:Наука, главная редакция физико\\д\nматематической литературы, 1967. 376 с. (Серия: Математическая\nлогика и основания математики.)\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "%  Abraham Robinson\n%   University California, Los Angeles\n%  Introduction to Model Tgeory and to the Metamathematics of Algebra\n%  North-Holland Publishing Company\n%  Amsterdam, 1963\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "robinson",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Рэймонд М.Смаллиан. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Как же называется эта книга?"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ",\nпер. с англ. Ю.А.Данилова. М.:Мир, 1981. 240 с.\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "% Raymond M. Smullyan\n% WHAT IS THE NAME OF THIS BOOK?\n% Prentice-Hall, Inc.\n% Englewood Cliffs, New Jersey, 1978\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "smullyan-informal",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Р.Смальян.\n"
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Теория формальных систем"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", перевод с английского\nН.К.Косовского под редакцией Н.А.Шанина. М.:Наука,\nглавная редакция физико-математической литературы, 1981.\n207 с. (Серия: Математическая логика и основания математики.)\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "%  THEORY OF FORMAL SYSTEMS,\n%  Raymond M. Smullyan\n%  Revised Edition\n%  Princeton, New Jersey\n%  Princeton University Press, 1962\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "smullyan-formal",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Справочная книга по математической логике в четырёх частях\nпод ред. Дж.Барвайса. Часть II. Теория множеств"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ",\nпер. с англ. В.Г.Кановея под редакцией\nВ.Н.Гришина. М.:Наука, 1982. 376 с.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "handbook-sets",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Справочная книга по математической логике в четырёх частях под\nред. Дж.Барвайса. Часть III. Теория рекурсии"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ",\nпер. с английского  С.Г.Дворникова, И.А.Лаврова.\nПод ред. Ю.Л.Ершова.\nМ.:Наука, 1982. 360 с.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "handbook-recursion",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "В.А.Успенский. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Что такое нестандартный анализ?"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": "\nМ.:Наука, главн. ред. физико-математической литературы,\n1987. 128 с.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "uspensky-nonstandard",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "В.А.Успенский.  "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Нестандартный, или неархимедов, анализ"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ".  М.:Знание, 1983. 61 с. (Новое в жизни, науке, технике.\nМатематика, кибернетика, №8.)\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "uspensky-nonstandard-small",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Х.Фрейденталь. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Язык логики"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ", перевод с английского Ю.А.Петрова\nпод редакцией Ю.А.Гастева. М.:Наука, главная редакция физико\\д\nматематической литературы, 1969. 136 с.\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "% The Language of Logic\n% Hans Freudenthal\n% Professor of Pure and Applied Mathematics\n% Utrecht University\n% Utrecht, The Netherlands\n% Elsevier Publishing Company\n% Amsterdam -- London -- New York\n% 1966\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "freudenthal",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "А.Чёрч. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Введение в математическую логику. I"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ",\nперевод с английского В.С.Чернявского под ред.\nВ.А.Успенского. М.:Издательство иностранной литературы,\n1960. 484 с.\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "% Introduction to Mathematical Logic\n%    by Alonzo Church\n%     volume I\n%  Princeton, New Jersey\n%  Princeton University Press\n%  1956\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "church",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Дж.Шенфилд. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Математическая логика"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ",\nперевод с английского И.А.Лаврова и И.А.Мальцева\nпод редакцией Ю.Л.Ершова. М.:Наука, 1975. 528 с.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "shoenfield",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "Э.Энгелер. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Метаматематика элементарной математики"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ",\nперевод с немецкого Г.Е.Минца под редакцией А.О.Слисенко.\nМ:Мир, 1987. 128 с.\n"
            },
            {
              "tag": {
                "name": "def:comment",
                "body": {
                  "blocks": [
                    {
                      "text": "%  E.Engeler. Metamathematik der Elementarmathematik. Mit 29 Abbildungen\n%  (Hochshultext)\n%  Springer-Verlag\n%  Berlin Heidelberg New York 1983\n"
                    }
                  ]
                },
                "attrList": [],
                "separator": "\n"
              }
            },
            {
              "text": "\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "engeler",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "С.В.Яблонский. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Введение в дискретную математику"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ",\nиздание второе. М.:Наука, 1986. 384 с.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "cyber",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n\n"
    },
    {
      "tag": {
        "name": "def:lit",
        "body": {
          "blocks": [
            {
              "text": "H.J.Keisler. "
            },
            {
              "tag": {
                "name": "format:i",
                "body": {
                  "blocks": [
                    {
                      "text": "Elementary Calculus"
                    }
                  ]
                },
                "attrList": [],
                "separator": " "
              }
            },
            {
              "text": ".\nWeber and Sсhmidt, Prindle, 1976.\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "key",
            "value": "keisler-nonstandard",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    },
    {
      "text": "\n"
    }
  ]
}