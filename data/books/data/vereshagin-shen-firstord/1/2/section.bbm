{def:section.key{complete-connectives} Полные системы связок}


Рассматриваемая нами система пропозициональных связок (в неё входят {{\land}}, {{\lor}}, {{\to}}, {{\lnot}}) {em полна}
{def:index Полная система связок}
в следующем смысле:


{#start:def:theorem.name{Полнота системы связок}.key{completeness-connectives}}
{def:index Теорема!о полноте системы связок ({{\land}}, {{\lor}}, {{\to}},
{{\lnot}})|defin}
Любая булева функция (с любым числом аргументов) может быть записана в виде пропозициональной формулы.
{#end:def:theorem}


{#start:def:proof}
Проще всего пояснить это на примере.
Пусть, например, булева функция {{\varphi(p,q,r)}} задана таблицей {def:link sample-truth-table}.


{#start:table.key{sample-truth-table}}
{row.head {col} {{p}} {col} {{q}} {col} {{r}} {col} {{\varphi(p,q,r)}}}
{row {col} 0 {col} 0 {col} 0 {col} 1}
{row {col} 0 {col} 0 {col} 1 {col} 0}
{row {col} 0 {col} 1 {col} 0 {col} 0}
{row {col} 0 {col} 1 {col} 1 {col} 1}
{row {col} 1 {col} 0 {col} 0 {col} 0}
{row {col} 1 {col} 0 {col} 1 {col} 0}
{row {col} 1 {col} 1 {col} 0 {col} 0}
{row {col} 1 {col} 1 {col} 1 {col} 1}

{area.align{center}
{{
\begin{aligned}
     (\lnot p \land \lnot q \land \lnot r) &\lor\\
  \lor   (\lnot p \land q \land r) &\lor\\
  \lor   (p \land q       \land r)& \phantom{\lor} \\
\end{aligned}
}}
}

Таблица {area.inline.key{sample-truth-table_link} {counter.last{chapter}}.{counter.use{table}}}. Булева функция и задающая её формула.
{#end:table}


В таблице есть три строки с единицами в правой колонке — три случая, когда булева функция истинна (равна {{1}}).
Напишем три конъюнкции, каждая из которых покрывает один случай (а в остальных строках ложна), и соединим их дизъюнкцией.
Нужная формула построена.


Ясно, что аналогичная конструкция применима для любой таблицы (с любым числом переменных).
{#end:def:proof}


Для формул подобного вида есть специальное название: формулы в {em дизъюнктивной нормальной форме}.
{def:index Дизъюнктивная нормальная форма|defin}
{def:index Нормальная форма!дизъюнктивная|defin}
Более подробно:
{em литералом}
{def:index Литерал|defin}
называется переменная или отрицание переменной,
{em конъюнктом}
{def:index Конъюнкт|defin}
называется произвольная конъюнкция литералов, а дизъюнктивной нормальной формой называется дизъюнкция конъюнктов.
В нашем случае в каждый конъюнкт входит {{n}} литералов (где {{n}} — число переменных), а число конъюнктов равно числу строк с единицами и может меняться от нуля (тогда, правда, получается не совсем формула, а «пустая дизъюнкция», и её можно заменить какой-нибудь всегда ложной формулой типа {{p\land \lnot p}}) до {{2^n}} (если булева функция всегда истинна).


{#start:def:problem}
Длина построенной в доказательстве теоремы {def:theorem:link completeness-connectives} формулы зависит от числа единиц: формула будет короткой, если единиц в таблице мало.
А как написать (сравнительно) короткую формулу, если в таблице мало нулей, а в основном единицы?
{#end:def:problem}


Иногда полезна двойственная {em конъюнктивная нормальная форма},
{def:index Конъюнктивная нормальная форма|defin}
{def:index Нормальная форма!конъюнктивная|defin}
которая представляет собой конъюнкцию {em дизъюнктов}.
{def:index Дизъюнкт|defin}
Каждый дизъюнкт состоит из литералов, соединённых дизъюнкциями.
Теорему {def:theorem:link completeness-connectives} можно теперь усилить так:


{#start:def:theorem.key{dnf-cnf}}
Всякая булева функция может быть выражена формулой, находящейся в дизъюнктивной нормальной форме, а также формулой, находящейся в конъюнктивной нормальной форме.
{#end:def:theorem}

{#start:def:proof}
Первая часть утверждения уже доказана.
Вторая часть аналогична первой, надо только для каждой строки с нулём написать подходящий дизъюнкт.


Можно также представить функцию {{\lnot \varphi}} в дизъюнктивной нормальной форме, а затем воспользоваться законами Де Моргана,
{def:index Законы (правила) Де Моргана}
чтобы внести отрицание внутрь.
{#end:def:proof}


{def:problem Проведите второй вариант рассуждения подробно.}


Вообще говоря, определение нормальной формы не требует, чтобы в каждом конъюнкте (или дизъюнкте) встречались все переменные.
(Повторять переменную больше одного раза смысла нет; если, например, переменная и её отрицание входят в одну конъюнкцию, то эта конъюнкция всегда ложна и её можно выбросить.)


{def:problem
Приведите пример булевой функции {{n}}~аргументов, у которой любая дизъюнктивная или конъюнктивная нормальная форма содержит лишь члены длины {{n}}.
(Указание: рассмотрите функцию, которая меняет своё значение при изменении значения любой переменной.)
}


Заметим, что при доказательстве теоремы {def:theorem:link completeness-connectives} мы обошлись без импликации.
Это и не удивительно, так как она выражается через дизъюнкцию и отрицание:
{{
(p\to q) \ \leftrightarrow \ (\lnot p \lor q)
}}
(проверьте!).
Мы могли бы обойтись только конъюнкцией и отрицанием, так как {{
(p\lor q) \ \leftrightarrow \ \lnot(\lnot p \land \lnot q),
}}
или только дизъюнкцией и отрицанием, так как {{
(p\land q) \ \leftrightarrow \ \lnot(\lnot p \lor \lnot q)
}}
(обе эквивалентности вытекают из законов Де Моргана; их легко проверить и непосредственно).
Как говорят, система связок {{\land, \lnot}}, а также система связок {{\lor, \lnot}} являются {em полными}.
{def:index Полная система связок|defin}
(По определению это означает, что с их помощью можно записать любую булеву функцию.)


{def:problem
Докажите, что система связок {{\lnot, \to}} полна.
(Указание: как записать через них дизъюнкцию?)
}


А вот без отрицания обойтись нельзя.
Система связок {{\land, \lor,\to}} неполна — и по очень простой причине: если все переменные истинны, то любая их комбинация, содержащая только указанные связки, истинна.
(Как говорят, все эти связки «сохраняют единицу».)
{def:index Связки, сохраняющие {{0}}/{{1}}|defin}


{#start:def:problem}
Любая формула, составленная только с помощью связок {{\land}} и {{\lor}}, задаёт монотонную булеву функцию {def:index Монотонная функция|defin}
{def:index Булева функция!монотонная|defin}
(в том смысле, что от увеличения значения любого из аргументов значение функции может только возрасти — или остаться прежним).
Покажите, что верно и обратное: любая монотонная булева функция либо постоянна (всюду истинна или всюду ложна), либо может быть выражена формулой, содержащей только {{\land}} и {{\lor}}.
{#end:def:problem}


{#start:def:problem}
Пусть {{\varphi\to\psi}} — тавтология.
Покажите, что найдётся формула {{\tau}}, которая включает в себя только общие для {{\varphi}} и {{\psi}} переменные, для которой формулы {{(\varphi\to\tau)}} и {{(\tau\to\psi)}} являются тавтологиями.
(Более общий вариант этого утверждения, в котором рассматриваются формулы с кванторами, называется {em леммой Крейга}.)
{def:index Лемма!Крейга|defin}
{def:glossary Крейг}
{#end:def:problem}


В принципе мы не обязаны ограничиваться четырьмя рассмотренными связками.
Любая булева функция может играть роль связки.
Например, можно рассмотреть связку {{(p \texttt{ notand } q)}},
{def:index \texttt{notand}|defin}
задаваемую эквивалентностью
{{
(p \texttt{ notand } q) \ \leftrightarrow \ \lnot(p\land q)
}}
(словами: {{(p\texttt{ notand }q)}} ложно, лишь если {{p}} и {{q}} истинны).
Через неё выражается отрицание ({{p \texttt{ notand }p}}), после чего можно выразить конъюнкцию, а затем, как мы знаем, и вообще любую функцию.
(Знакомые с цифровыми логическими схемами малого уровня интеграции хорошо знакомы с этим утверждением: достаточно большой запас схем И-НЕ позволяет реализовать любую требуемую зависимость выхода от входов.)


Другая интересная полная система связок — сложение по модулю {{2}}, конъюнкция и константа {{1}} (которую можно считать {{0}}-арной связкой, задающей функцию от нуля аргументов).
Представленные в этой системе булевы функции становятся полиномами с коэффициентами в кольце вычетов по модулю {{2}}.
Идея рассматривать булевы функции как полиномы (оказавшаяся неожиданно плодотворной в последние годы) была высказана в 1927~г.\ российским математиком Иваном Ивановичем Жегалкиным.
{def:glossary Жегалкин}


Назовём {em мономом}
{def:index Моном|defin}
конъюнкцию любого набора переменных или константу {{1}} (которую естественно рассматривать как конъюнкцию нуля переменных).
Название это естественно, так как при наших соглашениях ({{1}} обозначает истину, {{0}} — ложь) конъюнкция соответствует умножению.


Назовём {em полиномом}
{def:index Полиномы (Жегалкина)|defin}
сумму таких мономов по модулю {{2}} (это значит, что {{0\oplus0 =0}}, {{0\oplus 1=1\oplus 0=1}} и {{1\oplus1=0}}).
Ясно, что два повторяющихся монома можно сократить (ведь сложение по модулю {{2}}), так что будем рассматривать только полиномы без повторяющихся мономов.
При этом, естественно, порядок членов в мономе (как и порядок мономов в полиноме) роли не играет, их можно переставлять.


{def:theorem.name{о полиномах Жегалкина}.key{polynomials-boolean-functions}
{def:index Теорема!о полиномах Жегалкина|defin}
Всякая булева функция однозначно представляется таким полиномом.}


{#start:def:proof}
Существование искомого полинома следует из теоремы {def:theorem:link dnf-cnf}, так как конъюнкция есть умножение, отрицание — прибавление единицы, а дизъюнкцию можно через них выразить (получится {{p+q+pq}}).
Надо только заметить, что степени не нужны: переменные принимают значения {{0}} и {{1}}, так что {{x^n}} можно заменить на {{x}}.


Можно также сослаться на известное из алгебры утверждение о том, что всякая функция с аргументами из конечного поля (в данном случае это двухэлементное поле вычетов по модулю {{2}}) задаётся полиномом.
(Так получается новое доказательство теоремы {def:theorem:link completeness-connectives}.)


Далее можно заметить, что полиномов столько же, сколько булевых функций, а именно {{2^{2^n} }}.
В самом деле, булева функция может принимать любое из двух значений в каждой из {{2^n}} точек булева куба {{\Bbb{B}^n}}, а многочлен может включать или не включать любой из {{2^n}} мономов.
(Мономов ровно {{2^n}}, потому что каждый моном включает или не включает любую из {{n}} переменных.)
Поэтому избытка полиномов нет, и если любая функция представима полиномом, то единственным образом.


Можно и не ссылаться на сведения из алгебры и теорему {def:theorem:link dnf-cnf}, а дать явную конструкцию.
Это удобно сделать индукцией по {{n}}.
Пусть мы уже умеем представлять любую булеву функцию от {{n-1}} аргументов с помощью полинома.
Тогда {{\varphi(p_1,\dots,p_n)}} можно представить как
{{
\varphi(p_1,\dots,p_n) =
\varphi(0, p_2,\dots,p_{n})
+[\varphi(0,p_2,\dots,p_{n})+
\varphi(1,p_2,\dots,p_{n})]p_1
}}
(проверьте).
Остаётся заметить, что правую часть можно представить полиномом по предположению индукции.


Для единственности также есть другое доказательство: пусть два многочлена (имеющие степень {{1}} по каждой переменной) равны при всех значениях переменных.
Тогда их сумма (или разность —
вычисления происходят по модулю {{2}}) является ненулевым многочленом (содержит какие-то мономы), но тождественно равна нулю.
Так не бывает, и это легко доказать по индукции.
В самом деле, любой многочлен {{A(p_1,\dots,p_n)}} можно представить в виде
{{
A(p_1,\dots,p_n)=B(p_2,\dots,p_n)+p_1C(p_2,\dots,p_n),
}}
где {{B}} и {{C}} — многочлены от меньшего числа переменных.
Подставляя сначала {{p_1=0}}, а затем {{p_1=1}}, убеждаемся,
что многочлены {{B}} и {{C}} равны нулю во всех точках, и потому (согласно предположению индукции) равны нулю как многочлены (не содержат мономов).
{#end:def:proof}


{#start:def:problem}
Пусть {{F}} — произвольное поле.
{def:index Поле}
Назовём {em мультилинейной}
{def:index Мультилинейная функция|defin}
{def:index Функция!мультилинейная|defin}
функцией полином от {{n}} переменных с коэффициентами из {{F}}, в котором все показатели степеней равны либо {{0}}, либо {{1}}.
(Таким образом, каждый моном в ней есть произведение коэффициента и некоторого набора переменных без повторений.) Будем рассматривать {{\Bbb{B}=\{0,1\} }} как подмножество {{F}}.
Докажите, что всякая булева функция {{\Bbb{B}^n\to\Bbb{B} }} однозначно продолжается до мультилинейной функции {{F^n\to F}}, и коэффициенты мультилинейной функции можно считать целыми числами.
{#end:def:problem}


Если рассматривать произвольные булевы функции в качестве связок, возникает вопрос: в каком случае набор булевых функций образует полный базис? (Это значит, что любая булева функция представляется в виде композиции функций из набора,  —е записывается в виде формулы, где связками служат функции набора.) Подобные вопросы вызывали в своё время большой интерес и были хорошо изучены.
Начальным этапом явилось такое утверждение:


{#start:def:theorem.name{критерий Поста}}
{def:index Критерий!Поста|defin}
{def:glossary Пост}
Набор булевых функций является полным тогда и только тогда, когда он не содержится целиком ни в одном из пяти следующих « предполных классов»:
{def:index Предполные классы|defin}


{list
{item монотонные функции;}
{item функции, сохраняющие нуль;}
{item функции, сохраняющие единицу;}
{item линейные функции;}
{item самодвойственные функции.}
}


(Функция {{f}} {em монотонна},
{def:index Монотонная функция|defin}
{def:index Функция!монотонная|defin}
если она монотонно неубывает по каждому из своих аргументов.
Функция {{f}} {em сохраняет нуль/единицу},
{def:index Функция!сохраняющая {{0}}/{{1}}|defin}
если {{f(0,\dots,0)=0}} (соответственно {{f(1,\dots,1)=1}}).
Функция {{f}} {em линейна},
{def:index Линейная функция|defin}
{def:index Функция!линейная|defin}
если она представима многочленом, в котором все мономы содержат не более одной переменной.
Наконец, функция {{f}} называется {em самодвойственной},
{def:index Самодвойственная функция|defin}
{def:index Функция!самодвойственная|defin}
если {{f(1-p_1,\dots,1-p_n)=1-f(p_1,\dots,p_n)}}.)
{#end:def:theorem}


{#start:def:proof}
Если набор содержится в одном из классов, то и все композиции также не выходят за пределы этого класса (легко проверить для каждого из классов в отдельности) и поэтому набор не является полным.
Докажем обратное утверждение.
Пусть для каждого класса выбрана какая-то функция, в нём не лежащая.
Убедимся, что с помощью комбинаций выбранных функций можно получить все булевы функции.


У нас есть функция, не сохраняющая нуль.
Подставим вместо всех аргументов одну и ту же переменную.
Получится функция от одного аргумента, отображающая нуль в единицу, то есть либо константа {{1}}, либо отрицание.
Сделав то же самое с функцией, не сохраняющей единицу, получим либо константу нуль, либо отрицание.
Таким образом, у нас либо есть отрицание, либо обе константы {{0}} и {{1}}.


Если есть обе константы, то всё равно можно получить отрицание.
Возьмём немонотонную функцию.
Легко понять, что она должна менять значение с единицы на нуль при изменении какого-то одного аргумента с нуля на единицу (в самом деле, будем увеличивать аргументы по одному, в какой-то момент значение функции уменьшится.)
Зафиксировав значения остальных аргументов (ведь мы считаем, что константы есть), получаем отрицание.


Имея отрицание и несамодвойственную функцию, легко получить константы (если их не было).
В самом деле, несамодвойственность означает, что {{f(x_1,\dots,x_n)=f(1-x_1,\dots,1-x_n)}}
для каких-то значений {{x_1,\dots,x_n\in\{0,1\} }}.
Вместо нулевых значений переменных {{x_1,\dots,x_n}} подставим {{p}},
вместо единиц подставим {{\lnot p}}, получится одна из констант.
Вторая получится отрицанием.


Теперь у нас есть константы, отрицание и нелинейная функция {{f(p_1,\dots,p_n)}}.
Нелинейность означает, что в её представлении в виде многочлена есть моном, состоящий более чем из одной переменной.
Пусть, например, этот моном содержит переменные {{p_1}} и {{p_2}}.
Сгруппируем члены по четырём группам и получим выражение
{{
p_1p_2 A(p_3,\dots)+p_1B(p_3,\dots)+p_2C(p_3,\dots)+D(p_3,\dots).
}}
При этом многочлен {{A(p_3,\dots)}} заведомо отличен от нуля, поэтому можно так подставить константы вместо {{p_3,\dots,p_n}}, чтобы первое слагаемое не обратилось в нуль.
Тогда получим либо {{p_1p_2+d}}, либо {{p_1p_2 + p_1+d}}, либо {{p_1p_2+p_2+d}}, либо {{p_1p_2+p_1+p_2+d}}.
Свободный член {{d}} можно менять, если нужно (у нас есть отрицание), так что получается либо {{p_1p_2}}
(конъюнкция, и всё доказано), либо {{p_1p_2+p_1=p_1(p_2+1)= p_1\land\lnot p_2}} (убираем отрицание, получаем конъюнкцию, всё доказано), либо {{p_1p_2+p_2}} (аналогично), либо {{p_1p_2+p_1+p_2= (1+p_1)(1+p_2)-1=\lnot(\lnot p_1\land\lnot p_2)=p_1\lor p_2}} (дизъюнкция, всё доказано).
{#end:def:proof}
