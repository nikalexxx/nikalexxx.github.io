export default (api) => {
    const { header, book, code, image, draft, strong, em, audio, start, end, list, item, label, counter, web } = api;

    return book`
${header.level(2)`Модель`}

Модель представляет из себя структуру книги — её текст и элементы.

Также в модель входит метаинформация (оглавление, данные о картинках), но она может быть полностью получена из структуры, а значит, её можно не хранить отдельно, а генерировать при надобности.


Про текст.
Текст книги должен быть задан в кодировке UTF-8.


Про элементы.
Помимо текста, в книге есть различные элементы — для форматирования текста, для медиа (картинки, видео) и т.д.
Каждый элемент имеет имя, список аттрибутов (может быть пустым) и содержимое из текста и других элементов.
Далее полный список стандартных элементов.

${counter.start('elem').initial(1)}


${header.level(3)`${counter.use('elem')}. header`}
Заголовок раздела.

Аттрибуты:

${start(list)}
${start(item)}
${em`level`} — уровень вложенности.
Представляет из себя натуральное число.
Чем больше число, тем больше уровень вложенности.
Руководствуясь стандратом html, уровни вложенности принимают значения от 1 до 6


Ограничений на уровень нет, можно задавать сколь угодно большое число, но есть некоторые правила.
Диапазон заголовков нормализуется, то есть любые пропуски между уровнями схлапываются, а сами уровни начинаются с 1.
${end(item)}
${end(list)}


Метаинформация:
${header.level(3)`${counter.use('elem')}. title`}
Заголовок книги.

Используется для обложки и для титульной страницы.
Можно помещать в любое место в книге, но при генерации json будет помещён в начало.


${header.level(3)`${counter.use('elem')}. authors`}
Авторы книги.

Внутри может быть любой контент, который определяет авторов.
Это может быть ФИО либо никнейм со ссылкой на домашнюю страницу автора, либо всё вместе и т.д.


${header.level(3)`${counter.use('elem')}. draft`}
Черновик.
Используется во время подготовки книги для быстрого отслеживания мест в книге, которые нужно доработать.
Может включать в себя любой контент.

Пример:
${draft`
Этот текст пока не прошол проверку на правила рускава языка
`}


Блоки
${header.level(3)`${counter.use('elem')}. strong`}
Выделение важного текста.
Именно логическое выделение, визуально может выглядеть как угодно в зависимости от представления.

Пример:

В этом предложении ${strong`смысл`} выделен как важный текст.


${header.level(3)`${counter.use('elem')}. em`}
Выделение акцентов.
Иначе говоря, текста, который отличается по тем или иным причинам от окружающего текста.


Пример:

Сравните:

Я ${em`учусь`} писать книги (только учусь, ещё не умею).

Я учусь писать ${em`книги`} (книги, а не просто эссе).


${header.level(3)`${counter.use('elem')}. code`}
Программный либо любой другой код.


Аттрибуты:
${list`
${item`${em`lang`} — язык программирования.`}
${item`Аттрибуты расположения`}
`}


Пример
${code.block(true).lang('javascript')`
const message = 'hello';
console.log(message);
`}


${header.level(3)`audio`}
Звук.


Пример:

Запись голоса Ленина
${audio.src('/data/books/js-book/lenin.ogg')``}


${header.level(3)`label`}
Лейбл, который указывает на контент из книги.
В отличие от ссылки, используется для предпросмотра контента без необходимости перехода внутри книги.
Например, чтобы сослаться на изображение, можно сделать лейбл и смотреть мини-копию во всплывающем окне.


Аттрибуты:
${list.key('label-attrs')`
${item`${em`ref`} — ссылка на контент, должен совпадать с key у нужного элемента`}
`}


Пример:
Мы только что перечислили аттрибуты элемента label в ${label.ref('label-attrs')`списке`}


${header.level(2)`Пространство Web`}
${header.level(3)`web.video`}
Позволяет встраивать видео с известных сайтов.

Пример с youtube
${web.video.type('youtube').src('https://www.youtube.com/embed/i-1PqnzaxrI')}
`;
};
