[
  "\nВ современном мире книги всё чаще переходят из бумажного формата в электронный.\nК сожалению, оформлению уделяют не так много внимания.\nМы можем добиться хорошей верстки документов с помощью ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "TEX"
    ]
  },
  ",\nно они будут выглядеть хорошо только на широких экранах.\nНо на мобильных устройствах с чтением такого документа будут проблемы,\nтак как верстка на основе ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "TEX"
    ]
  },
  " не адаптируется под размер экрана.\nРазличные лёгкие \"книжные\" форматы, такие как ",
  {
    "name": "link",
    "props": {
      "href": "https://en.wikipedia.org/wiki/FictionBook"
    },
    "children": [
      "fb2"
    ]
  },
  ",\nизначально создавались для книг. Они ушли от оформления, сделав упор на семантику,\nпредоставив внешний вид программе просмотра.\nДругие, например ",
  {
    "name": "link",
    "props": {
      "href": "https://en.wikipedia.org/wiki/EPUB"
    },
    "children": [
      "epub"
    ]
  },
  ", пытались совместить всё сразу, семантику и произвольную верстку. Как следствие, epub слишком перегружен, никак не ограничивая содержимое своих контейнеров.\n\n\nНам важно получить широкие оформительские возможности в сочетании с адаптивной версткой.\nИ мир уже знает решение — ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "html"
    ]
  },
  ".\nВеб представляет нам безграничные возможности для создания интерфейсов и может служить основой для книжного формата,\nнижним уровнем реализации. Веб как основу для своего книжного формата ",
  {
    "name": "link",
    "props": {
      "href": "https://bureau.ru/books/manifesto/"
    },
    "children": [
      "использует"
    ]
  },
  " дизайнерское бюро Артёма Горбунова.\nПонятно, что нам требуется абстракция над ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "html"
    ]
  },
  ",\nчтобы определить основные компоненты формата.\nИнтересно, что исторически ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "html"
    ]
  },
  " использовался как язык разметки документов, и только потом с развитием веба он стал использоваться для создания приложений в браузере — сложных сайтов.\n\n\nОсновным и по сути единственным языком для создания абстракций в вебе служит ",
  {
    "name": "em",
    "props": {},
    "children": [
      "javascript"
    ]
  },
  ".\nЕго мы и будем использовать для реализации.\nВ итоге книгу можно будет распространять как обычную ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "html"
    ]
  },
  " страницу, через файловое представление.\nЭто значит, что её можно будет открывать локально в браузере даже без доступа к интернету, это будет обычный файл.\nНо также легко можно будет встроить книгу в сайт с помощью ",
  {
    "name": "em",
    "props": {},
    "children": [
      "javascript"
    ]
  },
  ".\nТакже книгу можно экспортировать по желанию в другой формат, с полной или частичной поддержкой функций,\nнапример простую документацию можно преобразовать в ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "markdown"
    ]
  },
  "\n\n\nПо умолчанию книга создаётся для браузера и в нём теоретически поддерживаются многие функции.\nВажно разумно ограничить функционал, исходя из целей, поэтому, например, не будет широкого взаимодействия с сервером.\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Требования, которые мы хотим соблюсти"
    ]
  },
  "\n",
  {
    "name": "list",
    "props": {},
    "children": [
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nКнига это бесконечный документ, который можно листать вертикально\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nОтсутствуют отдельные страницы, для навигации помимо структуры текста используются блоки по 1000 символов\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nОтсутствует локальная горизонтальная прокрутка любых форм, т.е. никаких каруселей изображений и вкладок\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nНет сетки, ни глобальной, ни локальной.\nТекст обтекает изображения, поток элементов движется сверху вниз\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nВозможность задать стили самостоятельно.\nНесмотря на наличие стилизации, это скорее функциональные возможности, нежели оформительские.\nНо конечно будет оформление по умолчанию, светлая и темная темы.\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nВозможность добавить любой формат для эспорта,\nдля этого нужно будет всего лишь составить \"таблицу\" соответствий между элементами книги и элементами нужного формата.\nНапример, заголовок в ",
          {
            "name": "format.pre",
            "props": {},
            "children": [
              "html"
            ]
          },
          " будет преобразован в тег ",
          {
            "name": "format.pre",
            "props": {},
            "children": [
              "<h1>"
            ]
          },
          "\n"
        ]
      },
      "\n"
    ]
  },
  "\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Возможности разметки"
    ]
  },
  "\n",
  {
    "name": "list",
    "props": {},
    "children": [
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "Тип текста: ",
          {
            "name": "strong",
            "props": {},
            "children": [
              "выделение"
            ]
          },
          ", ",
          {
            "name": "em",
            "props": {},
            "children": [
              "акцент"
            ]
          },
          ", ",
          {
            "name": "format.pre",
            "props": {},
            "children": [
              "машинопись"
            ]
          },
          ""
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "Изображения: ",
          {
            "name": "image",
            "props": {
              "src": "../assets/images/favicon/favicon-32x32.png",
              "alt": "favicon",
              "position": "inline"
            },
            "children": []
          },
          ""
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "Медиа контент: видео и тд."
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "Всплывающие подсказки"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "Спойлеры"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "Ссылки: ",
          {
            "name": "link",
            "props": {
              "href": "https://www.wikipedia.org"
            },
            "children": [
              "Wikipedia"
            ]
          },
          ""
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "..."
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nВнешние компоненты\n",
          {
            "name": "external",
            "props": {
              "scope": "parvis"
            },
            "children": [
              "({E}) => E.input.type`color`"
            ]
          },
          "\n\nВнутри таких компонентов невозможно контролировать условие на локальность.\nТребуется продумать интерфейс, при котором такие компоненты могут существовать при различных условиях(отсутствие интернета, графические форматы, печать).\nВключают в себя интерактивные объекты сторонних систем, например, встроенный плеер youtube.\n\n",
          {
            "name": "external",
            "props": {
              "scope": "parvis"
            },
            "children": [
              "({E}) => E.div.style`height: 300px; max-height: 40vw; max-width: 700px`(E.iframe\n    .src`https://www.youtube.com/embed/3s7h2MHQtxc`\n    .frameborder`0`\n    .allow`accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture`\n    .allowfullscreen(true)\n)"
            ]
          },
          "\n"
        ]
      },
      "\n"
    ]
  },
  "\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Возможности взаимодействия"
    ]
  },
  "\nПо умолчанию для браузера, так как он позволяет реализовать всё это уже сейчас.\n",
  {
    "name": "list",
    "props": {},
    "children": [
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "Закладки, + закладка по умолчанию — текущее место в книге"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "Заметки"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "Автоматическая проверка обновлений, если есть источник"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nВозможность сослаться на любой объект в книге и показать превью из другого места книги.\nСамое очевидное применение — указания на изображения.\nПревью может быть встроенное или полноразмерное.\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nНавигация: автоматическое оглавление, поиск, внутренние ссылки(якоря).\nВозможность просмотреть все типы объектов: все изображения, все ссылки и тд.\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nБазовая настройка стилей: текст с засечками или без, цвет текста, цвет фона, размер в разумных пределах.\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nВозможность сменить прокрутку на поэкранное перелистывание.\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nРаспространение: кнопка скачивания в файл, локальные сниппеты для частей книги(для вставки в другие места, перегон в картинку для отправки через каналы сообщений).\n"
        ]
      },
      "\n"
    ]
  },
  "\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Устройство разметки"
    ]
  },
  "\nОсновной контент книги — текст.\nТак как отсутствует сложная вёрстка, элементы разметки вторичны по отношению к тексту.\nТем не менее разметка обогащает сырой текст.\nЭлементы разметки определяются из практических соображений.\n\n\nВиды элементов:\n",
  {
    "name": "list",
    "props": {},
    "children": [
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nБлоки.\nКартинки, видео и тд.\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nТекстовые.\nТекст в отличие от блоков может переносится на следующие строки.\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nМета элементы. Такие как автор, дата издания, название.\nНужны, чтобы отображать информацию вне основного контента.\n"
        ]
      },
      "\n"
    ]
  },
  "\n\nСписок стандартных элементов может расширяться, текстовые и блочные расположены в корневом пространстве имён.\nМета элементы в ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "meta"
    ]
  },
  ".\nДопускается стандартизация дополнительных пространств имён.\n\n\nУ каждого элемента есть стандартные аттрибуты, например ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "href"
    ]
  },
  " у ссылки.\nТакже у каждого элемента есть атрибут ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "meta"
    ]
  },
  " для несхематизированных данных.\n\n\nПримерный вид части дерева элементов:\n",
  {
    "name": "list",
    "props": {},
    "children": [
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nb\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\ni\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\ncode\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\na ",
          {
            "name": "format.i",
            "props": {},
            "children": [
              ":href"
            ]
          },
          "\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nimg ",
          {
            "name": "format.i",
            "props": {},
            "children": [
              ":src"
            ]
          },
          " ",
          {
            "name": "format.i",
            "props": {},
            "children": [
              ":alt"
            ]
          },
          "\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nmeta\n    ",
          {
            "name": "list",
            "props": {},
            "children": [
              "\n    ",
              {
                "name": "item",
                "props": {},
                "children": [
                  "\n    author ",
                  {
                    "name": "format.i",
                    "props": {},
                    "children": [
                      ":name"
                    ]
                  },
                  "\n    "
                ]
              },
              "\n    ",
              {
                "name": "item",
                "props": {},
                "children": [
                  "\n    title\n    "
                ]
              },
              "\n    "
            ]
          },
          "\n"
        ]
      },
      "\n"
    ]
  },
  "\n\nОдна из основных задач определить стандартные элементы.\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Препроцессор"
    ]
  },
  "\nФормат записи разметки может быть любым, от xml до бинарного.\nЯ использую javascript, потому что он позволяет легко определять разметку и имеет встроенный препроцессор в виде самого себя.\n\n\nКнигу я записываю как чистую функцию:\n",
  {
    "name": "code",
    "props": {
      "block": true,
      "lang": "javascript"
    },
    "children": [
      "\nconst minibook = api => {\n    const {book, text: {i, b}} = api;\n    return book`${b`Книга`} как ${i`функция`}!`;\n};\n"
    ]
  },
  "\n\nТак как язык программирования позволяет любые вычислимые манипуляции, я могу передавать эту книгу и вкладывать в другие книги.\nДавайте вложим вышеприведённую мини книгу в текущую книгу, для этого просто вызовем её как функцию, пробросив api.\n\n\n",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "${minibook(api)}"
    ]
  },
  " >> ",
  " ",
  {
    "name": "format.b",
    "props": {},
    "children": [
      "Книга"
    ]
  },
  " как ",
  {
    "name": "format.i",
    "props": {},
    "children": [
      "функция"
    ]
  },
  "!",
  "\n\n\nМожно определять части книги заранее и вставлять их в итоговый текст, например писать главы в отдельных файлах, а потом импортировать в основную книгу.\nJavascript позволяет это делать так же легко, как и с кодом.\nЕсли реализовывать формат на основе xml, придётся либо придумывать специфические конструкции препроцессора, которые никогда не будут полны, либо вообще обходиться без препроцессора.\nТьюринг полный язык подходит как нельзя лучше.\nМожно было бы взять любой, но javascript реализован в браузерах и такую реализацию легче всего поддерживать, раз уж книга отображается в браузере.\n\n\nВот пример разных элементов, применных к одинаковому тексту.\n",
  {
    "name": "code",
    "props": {
      "block": true,
      "lang": "javascript"
    },
    "children": [
      "\n['b', 'i', 'code', 'sub', 'sup'].map(elem => api[elem]` текст `)\n"
    ]
  },
  "\n",
  {
    "name": "area",
    "props": {},
    "children": [
      {
        "name": "format.b",
        "props": {},
        "children": [
          " текст "
        ]
      },
      {
        "name": "format.i",
        "props": {},
        "children": [
          " текст "
        ]
      },
      {
        "name": "format.pre",
        "props": {},
        "children": [
          " текст "
        ]
      },
      {
        "name": "format.sub",
        "props": {},
        "children": [
          " текст "
        ]
      },
      {
        "name": "format.sup",
        "props": {},
        "children": [
          " текст "
        ]
      }
    ]
  },
  "\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Текущая реализация"
    ]
  },
  "\nВсе статьи на этом сайте, кроме одной(про Filemaker), написаны в данном формате.\nВы можете убедиться в этом, открыв в инструментах браузера вкладку Network и просмотрев исходный код этой статьи.\nРазумеется, функционал реализован далеко не весь, и есть куда расти!\n"
]