[
  "\nДля облегчения работы с ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "typescript"
    ]
  },
  " решил написать библиотеку для манипуляции типами.\n\n\nВстречайте ",
  {
    "name": "link",
    "props": {
      "href": "https://github.com/nikalexxx/ts-pro"
    },
    "children": [
      "ts-pro"
    ]
  },
  " !\n\nПо ссылке репозиторий на гитхабе, там описана установка (стандартный npm пакет) и возможности.\n\n\nНе буду повторять здесь информацию из README, расскажу, почему не удовлетворился существующими решениями.\n\nЕсть простая обертка над типами ",
  {
    "name": "link",
    "props": {
      "href": "https://github.com/piotrwitek/utility-types"
    },
    "children": [
      "utility-types"
    ]
  },
  ", но все типы оттуда слишком низкоуровневые.\nС другой стороны есть ",
  {
    "name": "link",
    "props": {
      "href": "https://gcanti.github.io/fp-ts"
    },
    "children": [
      "fp-ts"
    ]
  },
  ", но концепции там явно используют инструментарий теории категорий и в целом намечены на функциональное программирование.\nИз-за отсутствия дженериков высоких порядков их приходится эмулировать именами и подстановкой по месту использования.\nЯ хоть и большой поклонник ФП, но хотелось бы чего-то более простого, для использования в существующем коде.\n\n\nПоэтому и родилась идея ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "ts-pro"
    ]
  },
  ".\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Работа со списками"
    ]
  },
  "\nБольшую часть занимает именно она.\nУчитывается, что список может быть как массивом в терминах typescript (",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "T[]"
    ]
  },
  "), так и кортежем, то есть списком фиксированной длины с известными типами элементов (",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "[A, B, C, ...]"
    ]
  },
  ").\n\nСначала получаем голову списка и хвост, и на их основе строим все остальные функции (",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "Map, Filter, FilterMap, Find, Every"
    ]
  },
  ") с помощью рекурсии.\nОбщая механика проста — проверяем условие для головы и в зависимости от результата применяем рекурсивно тип к хвосту списка либо возвращаем некий терминальный тип (например когда дошли до конца списка).\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Остальные типы"
    ]
  },
  "\nОстальные типы тоже под капотом используют функционал списков и рекурсию, например, ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "P_Options"
    ]
  },
  " выбирает первый не ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "never"
    ]
  },
  " тип.\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Развитие"
    ]
  },
  "\nСледующим логичным шагом будет поддержка типизации для деревьев.\nПрисоединяйтесь к разработке с предложением новых идей и указанием потребностей.\n"
]