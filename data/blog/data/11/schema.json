[
  "\nКнига опубликована ",
  {
    "name": "link",
    "props": {
      "href": "/?/books/vereshagin-shen-sets"
    },
    "children": [
      "здесь"
    ]
  },
  ".\nИсходный код на гитхабе ",
  {
    "name": "link",
    "props": {
      "href": "https://github.com/nikalexxx/nikalexxx.github.io/tree/master/data/books/data/vereshagin-shen-sets"
    },
    "children": [
      "здесь"
    ]
  },
  "\n\n\n",
  {
    "name": "area",
    "props": {
      "key": "2"
    },
    "children": [
      "\nПосле первых попыток переизобрести формат электронной книги я решил взять настоящую книгу и перевести её в новый формат, чтобы показать особенности и преимущества.\n"
    ]
  },
  "\n\n\n",
  {
    "name": "area",
    "props": {
      "key": "3"
    },
    "children": [
      "\nБыла выбрана книга «Начала теории множеств» из серии «ЛЕКЦИИ ПО МАТЕМАТИЧЕСКОЙ ЛОГИКЕ И ТЕОРИИ АЛГОРИТМОВ».\nВо-первых, она мне нравится, во-вторых, она показывает преимущества формата — есть много ссылок как на предыдущие части текста, так и на последующие (теоремы, задачи, имена математиков), есть формулы и картинки.\n"
    ]
  },
  "\n\n\nПервую статью о формате электронной книги можно почитать ",
  {
    "name": "link",
    "props": {
      "href": "/?/blog/9"
    },
    "children": [
      "здесь"
    ]
  },
  ".\nТам общие идеи и краткое описание формата.\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Ссылки"
    ]
  },
  "\nСсылки в книге бывают трёх видов:\n",
  {
    "name": "list",
    "props": {},
    "children": [
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nГиперссылки — внешние ссылки, ведут на другие документы или сайты.\n",
          {
            "name": "format.pre",
            "props": {},
            "children": [
              "\na.href('https://wikipedia.org')`википедия`\n"
            ]
          },
          "\n",
          {
            "name": "link",
            "props": {
              "href": "https://wikipedia.org"
            },
            "children": [
              "википедия"
            ]
          },
          "\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nВнутренние ссылки, по которым можно перейти в другие части книги.\n",
          {
            "name": "format.pre",
            "props": {},
            "children": [
              "\nlink.ref('2')`второй абзац`\n"
            ]
          },
          "\n",
          {
            "name": "link",
            "props": {
              "ref": "2"
            },
            "children": [
              "второй абзац"
            ]
          },
          "\n"
        ]
      },
      "\n",
      {
        "name": "item",
        "props": {},
        "children": [
          "\nВнутренние ссылки на другие области, при использовании создаётся лейбл, при нажатии на который можно посмотреть выделенную область из другой части книги, и при необходимости перейти к ней.\n",
          {
            "name": "code",
            "props": {
              "lang": "javascript"
            },
            "children": [
              "\nlabel.ref('3')`третий абзац`\n"
            ]
          },
          "\n",
          {
            "name": "label",
            "props": {
              "ref": "3"
            },
            "children": [
              "третий абзац"
            ]
          },
          "\n"
        ]
      },
      "\n"
    ]
  },
  "\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Формулы"
    ]
  },
  "\nДля набора математических формул я использовал библиотеку ",
  {
    "name": "link",
    "props": {
      "href": "https://katex.org/"
    },
    "children": [
      "katex"
    ]
  },
  " для формата ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "tex"
    ]
  },
  ".\nЕсть формулы встроенные и блочные.\nДля формул завел отдельное пространство имён ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "math"
    ]
  },
  ".\n",
  {
    "name": "code",
    "props": {
      "lang": "javascript"
    },
    "children": [
      "\nconst { $, $$ } = api.math;\n"
    ]
  },
  "\n\n",
  {
    "name": "header",
    "props": {
      "level": 4
    },
    "children": [
      "Инлайновая формула"
    ]
  },
  "\n",
  {
    "name": "code",
    "props": {},
    "children": [
      "\nЗнает ${i`каждый`} космонавт — ${$`E = mc^2`}\n"
    ]
  },
  "\nЗнает ",
  {
    "name": "format.i",
    "props": {},
    "children": [
      "каждый"
    ]
  },
  " космонавт — ",
  {
    "name": "math",
    "props": {},
    "children": [
      "E = mc^2"
    ]
  },
  "\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 4
    },
    "children": [
      "Блочная формула"
    ]
  },
  "\n",
  {
    "name": "code",
    "props": {
      "lang": "javascript"
    },
    "children": [
      "\n$$`\n\\\\int_{0}^{+\\\\infin} e^{-x^2} = \\\\frac{\\\\sqrt{\\\\pi}}{2}\n`\n"
    ]
  },
  "\n",
  {
    "name": "math",
    "props": {
      "block": true
    },
    "children": [
      "\n\\int_{0}^{+\\infin} e^{-x^2} = \\frac{\\sqrt{\\pi}}{2}\n"
    ]
  },
  "\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Автоматическая нумерация"
    ]
  },
  "\nЭту фишку я подсмотрел из texa.\nВ самом деле, ни одна достаточно большая техническая книга не обходится без нумерации.\nСамый банальный пример — главы.\n\n\nРеализована нумерация пока на уровне сборки исходников за счет использования замыканий в javascript.\nОсновная идея проста: последовательные объекты и в коде записываются последовательно.\nТаким образом каждый вызов элемента параграфа использует текущее значение счетчика параграфов и увеличивает его на единицу.\nСчитать таким образом можно что угодно: главы, теоремы, задачи...\n\n\nВ будущем после проработки апи этой нумерации я включу её прямо в апи книги, например в пространство ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "control"
    ]
  },
  ".\nТогда не придется следить за тем, чтобы вызывать объекты последовательно в коде, порядок будет соответствовать порядку следования в книге.\n\n\nЧтобы ссылаться на динамические данные из любого места книги (например, из первой главы на номер задачи из десятой), я добавил отдельное хранилище для метаинформации.\nЛюбую информацию можно записать в это хранилище по ключу, и после первого прогона по книге, когда хранилище заполнится, мы находим ссылки на использование объектов из хранилища, если они есть, и подставляем информацию по требованию.\nТаким образом, место использования и записи не зависят друг от друга.\n\nСейчас технически данные никак не ограничиваются, но понятно, что надо выделить некое сериализуемое подмножество.\n\n\nТакже, не забываем, что книги могут вкладываться друг в друга.\nВся нумерация и метаинформация подставляется на самом корневом уровне, он помечается атрибутом root (",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "api.book.root"
    ]
  },
  " в отличие от обычного ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "api.book"
    ]
  },
  ")\n\n\n",
  {
    "name": "code",
    "props": {},
    "children": [
      "\n— Я знаю, что ты загадал число ${use`number`(e => e.n)}, хотя ещё его не видел.\n\n...\n\n— Пожалуй, загадаю число ${area.inline(true).key('number').meta({n: 7})(7)}.\n"
    ]
  },
  "\n— Я знаю, что ты загадал число ",
  {
    "name": "use",
    "props": {
      "ref": "number",
      "path": "n"
    },
    "children": []
  },
  ", хотя ещё его не видел.\n\n...\n\n— Пожалуй, загадаю число ",
  {
    "name": "area",
    "props": {
      "inline": true,
      "key": "number",
      "meta": {
        "n": 7
      }
    },
    "children": [
      "7"
    ]
  },
  ".\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Навигация"
    ]
  },
  "\nВсе заголовки собираются автоматически и формируют оглавление.\n\nВот как это выглядит для книги:\n",
  {
    "name": "image",
    "props": {
      "src": "/data/blog/data/11/toc.png",
      "height": 0.7
    },
    "children": [
      "Оглавление во всплывающем окне"
    ]
  },
  "\n\nТакже добавил навигацию по картинкам.\n\nПример окна картинок для мобильного экрана:\n",
  {
    "name": "image",
    "props": {
      "src": "/data/blog/data/11/images.png",
      "height": 0.7
    },
    "children": [
      "Навигация по картинкам"
    ]
  },
  "\n\n\nВ теории можно добавлять навигацию по произвольным сущностям.\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Страницы"
    ]
  },
  "\nИх нет вообще и не будет.\nПланируется в будущем дробить книгу на блоки по 1000 символов для точной навигации.\nЭта функциональность требует переписывания самого алгоритма формирования книги.\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "О процессе"
    ]
  },
  "\nСледовало бы написать конвертор из texa в новый формат, но мне показалось довольно сложным учесть все нюансы texa, и быстрее просто скопировать текст.\nЕсли есть исходники, сделать это достаточно быстро.\n\n\nНемного о картинках.\n\nВ исходной книге для картинок использовался формат ",
  {
    "name": "link",
    "props": {
      "href": "https://ru.wikipedia.org/wiki/MetaPost"
    },
    "children": [
      "METAPOST"
    ]
  },
  " и встроенные возможности texa для двух картинок.\n\n\nВсе картинки я перегонял в svg таким путём ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "mp(tex) > pdf > svg"
    ]
  },
  ".\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Обратная связь"
    ]
  },
  "\nЕсли вы заметили неточность или опечатку, создайте issue на гитхабе.\n"
]