[
  "\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Для чего?"
    ]
  },
  "\nХотя современные браузеры умеют переводить сайты прямо на лету, более старые версии делать этого не умеют.\nНо это не главная причина.\nЛичный сайт это не интернет-магазин и не промо-страница, здесь я пробую писать что-то сам.\nГлавная причина — попробовать написать что-то новое.\nПоэтому я не беру готовые библиотеки класса ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "i18n"
    ]
  },
  ".\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Как всё работает"
    ]
  },
  "\nЕсть хранилище токенов, где для каждого токена помещаются значения для нужных языков.\n\n\nХранилище имеет вид:\n",
  {
    "name": "code",
    "props": {
      "lang": "typescript"
    },
    "children": [
      "\nMap<string, string>\n"
    ]
  },
  "\n\nКаждый ключ в хранилище склеивается из языка и имени токена, например для токена ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "title"
    ]
  },
  " и языка ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "ru"
    ]
  },
  " ключ — ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "ru/title"
    ]
  },
  "\n\n\nПока поддерживается всего два языка — русский и английский\n",
  {
    "name": "code",
    "props": {
      "lang": "typescript"
    },
    "children": [
      "\ntype Lang = 'ru' | 'en'\n"
    ]
  },
  "\n\n\nПо дефолту выбран русский язык\n",
  {
    "name": "code",
    "props": {
      "lang": "typescript"
    },
    "children": [
      "\nexport const defaultLang: Lang = 'ru';\n"
    ]
  },
  "\n\nДля создания токенов используется функция ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "addToken"
    ]
  },
  "\n",
  {
    "name": "code",
    "props": {
      "lang": "typescript"
    },
    "children": [
      "\nexport function addToken(\n    name: string,\n    value: Partial<Record<Lang, string>>\n) {\n    for (const lang of Object.keys(value)) {\n        map.set(`${lang}/${name}`, value[lang]);\n    }\n}\n"
    ]
  },
  "\n\nА для использования реализована функция ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "token"
    ]
  },
  ", которая в зависимости от текущего языка возвращает значение токена, либо если для текущего языка значений нет, берёт дефолтный язык.\n",
  {
    "name": "code",
    "props": {
      "lang": "typescript"
    },
    "children": [
      "\nexport const token = (name: string) => {\n    return (\n        map.get(`${currentLang}/${name}`) ?? map.get(`${defaultLang}/${name}`)\n    );\n};\n"
    ]
  },
  "\n\nТекущий язык хранится в замыкании и мутируется выделенной функцией ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "setLang"
    ]
  },
  "\n",
  {
    "name": "code",
    "props": {
      "lang": "typescript"
    },
    "children": [
      "\nlet currentLang: Lang = defaultLang;\n\n/**\n * первый раз вызывать перед первым применением функции token\n */\nexport const setLang = (lang: Lang) => (currentLang = lang);\n"
    ]
  },
  "\n\nЭто всё.\nПока никакой шаблонизации самих строк.\nВсе переводы хранятся в коде в качестве аргументов при вызове функции ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "addToken"
    ]
  },
  "\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Поддержка рендера и смены языка"
    ]
  },
  "\nСмена языка представлена обычным селектом в шапке справа от переключения темы.\n\nТак как текущий язык хранится в замыкании модуля переводов, то при его смене новое значение токена появится только при следующем вызове функции ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "token"
    ]
  },
  ".\nТак как в текущем движке пока нет аналога контекста, чтобы пробрасывать вниз по дереву компонентов данные, минуя все промежуточные узлы, я задействовал встроенную в браузер систему событий.\nПри каждой смене языка я генерирую кастомное событие, и компонент, который отображает токены, обрабатывает событие и обновляется.\n\n\nПодробнее про сам компонент обертку.\nТак как каждый токен представляет из себя строку, а в интерфейсе требуется часто показать больше, чем просто текст, то помимо собственно имени токена в свойствах компонента можно задать кастомное отображение ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "view"
    ]
  },
  " для рендера.\n\n\nНапример, на ",
  {
    "name": "link",
    "props": {
      "href": "/?/design"
    },
    "children": [
      "странице дизайна"
    ]
  },
  " плитка раздела ",
  {
    "name": "format.b",
    "props": {},
    "children": [
      "Цвета"
    ]
  },
  " раскрашивала каждую букву в свой цвет.\nЧтобы сделать это независимо от языка, я задаю рендер специального вида\n",
  {
    "name": "code",
    "props": {
      "lang": "typescript"
    },
    "children": [
      "\nLang.token`tile/colors`.view(value =>\n    E.span(value\n        .split('')\n        .map((char, i) =>\n            E.span.style(\n                `color: ${colorList[i % colorList.length]}`\n            )(char)\n        )\n    )\n)\n"
    ]
  },
  "\n\nГде просто по кругу для каждой буквы беру значения из списка цветов\n",
  {
    "name": "code",
    "props": {
      "lang": "typescript"
    },
    "children": [
      "\nconst colorList = [\n    'var(--color-red)',\n    'var(--color-green-light)',\n    'var(--color-blue-sky)',\n    'var(--color-violet-light)',\n    'var(--color-orange-light)',\n];\n"
    ]
  },
  "\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Что дальше?"
    ]
  },
  "\nНе все разделы сайта я перевёл, да и системы для сбора всех переводов у меня нет.\nБуду итеративно переводить все страницы, по крайней мере интерфейс.\nМожет добавлю итальянский язык (как наиболее знакомый, а не популярный).\n"
]