import { BookApi } from "@bookbox/preset-web";

export default (api: BookApi) => {
    const {book, code, header, link, format: {pre}} = api;
    return book`
Когда впервые видишь клеточные автоматы, первая мысль — хочу это запрограммировать.
Один из первых и точно самый популярный клеточный автомат в 1970 придумал ${link.href('https://en.wikipedia.org/wiki/John_Horton_Conway')('Джон Конвей')} и назвал его ${link.href('https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life')('Игра Жизнь')}.
В то время не было достаточно быстрых компьютеров для просчёта эволюции, поэтому многие конфигурации находили вручную посредством анализа.
Сейчас же можно насладиться эволюцией автомата прямо в браузере.
Также сегодня есть достаточно быстрая программа ${link.href('https://en.wikipedia.org/wiki/Golly_(program)')('Golly')}, которая оптимизирует расчёты.


${link.href('/?/projects/game-of-life')('Реализация')} лежит в разделе ${link.href('/?/projects')('Проекты')}. Вообще в раздел Проекты будут попадать все новые вещи, пока я не решу выделить им отдельное пространство имён.


${header.level(3)('Игровое поле')}
По умолчанию поле имеет размер 1000x500 и топологию тора(правый край склеивается с левым, верх с низом).
Ячейки прямоугольные.
У клеток только два состояния: живая(красная) и мёртвая(чёрная).
Для каждого из состояний следующее состояние определяется суммой живых клеток в ${link.href('https://en.wikipedia.org/wiki/Moore_neighborhood')('окрестности Мура')}.
Размер клетки — 1 квадратный пиксель.
Поле расположено на ${pre('canvas')}.
Показаны номер текущего поколения и количество живых клеток(популяция).


${header.level(3)('Что можно делать')}
Запускать и останавливать эволюцию.

Просчитывать каждый шаг отдельно.

Рисовать на поле.

Очищать поле.


${header.level(3)('Управление правилами')}
Менять правила для сумм можно прямо во время эволюции.
Видно, как даже одно дополнительное условие кардинально меняет эволюцию автомата.
Например, при переходе от ${pre('B3/S23')} к ${pre('B3/S234')}(нажмите галочку с цифрой 4 в нижнем ряду).


${header.level(3)('Начальные конфигурации')}
За десятилетия энтузиастами были найдены много интересных конфигураций.
Космические корабли могут передвигаться по полю, сохраняя форму.
Паровозы передвигаясь, оставляют за собой след.
Ружья неподвижны, но стреляют другими фигурами.
Осцилляторы колеблются с разным периодом, возвращаясь в изначальную форму.


С ${link.href('https://www.conwaylife.com/wiki/Main_Page')('тематического сайта')} я отобрал наиболее интересные мне экземпляры.
По умолчанию выбрана самая сложная конфигурация из представленных.
Все конфигурации записаны в коде ${link.href('https://www.conwaylife.com/wiki/Run_Length_Encoded')('RLE')}, его также можно посмотреть, нажав галочку код конфигурации.
В будущем думаю добавить возможность задавать произвольные конфигурации в поле ввода.


${header.level(3)('Как устроено')}
Поле представлено массивом длиной 500000(1000*500) со значениями ${pre('boolean')}.
${pre('true')} соответствует живая клетка, ${pre('false')} — мёртвая.
Поле обсчитывается в лоб в цикле.
Новое поколение пишется во второй массив, которые по окончанию вычислений переносится в основной.

Есть простор для оптимизаций: с помощью типизированных массивов и битовых операций, либо с использованием WebAssembly.
Сам алгоритм можно улучшить, не трогая неизменные клетки.
Но у меня была задача сделать рабочее решение, а не самый быстрый алгоритм(хотя к этому надо стремиться).


Для начальных конфигураций функция преобразует RLE код в массив координат живых клеток и считает высоту и ширину.
Затем конфигурация выставляется по центру в поле, в указанные координаты(со смещением относительно центра) выставляя ${pre('true')}.


Каждый тик происходит ререндер.
Я хотел убедится, что ${link.href('/?/blog/3')('движок')}(ещё сырой) справится с нагрузкой.
В будущем это также можно оптимизировать, перерисовывая только нужные части.


Для интерфейса понадобилось создать два новых базовый компонента-блока: Checkbox и Select.
Для стилизации галочки был использован известный приём с label(скрываем input, рисуем кастомную галочку для :checked).
А вот выпадающее меню стилизовано наполовину, только основная часть(рисуем стрелочку с абсолютным позиционированием и делаем её невидимой для событий мыши), но не список значений.
Это связано с техническими ограничениями, а переизобретать выпадающий список не хотелось при наличии нативного.

Также были использованы новые иконки из бесплатного ${link.href('https://fontawesome.com/icons?d=gallery&m=free')('набора')} Font Awesome.


Для интересующихся всегда есть ${link.href('https://github.com/nikalexxx/nikalexxx.github.io/blob/master/components/GameOfLife/GameOfLife.js')('исходники')}.
`;
}
