[
  "\nКогда впервые видишь клеточные автоматы, первая мысль — хочу это запрограммировать.\nОдин из первых и точно самый популярный клеточный автомат в 1970 придумал ",
  {
    "name": "link",
    "props": {
      "href": "https://en.wikipedia.org/wiki/John_Horton_Conway"
    },
    "children": [
      "Джон Конвей"
    ]
  },
  " и назвал его ",
  {
    "name": "link",
    "props": {
      "href": "https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"
    },
    "children": [
      "Игра Жизнь"
    ]
  },
  ".\nВ то время не было достаточно быстрых компьютеров для просчёта эволюции, поэтому многие конфигурации находили вручную посредством анализа.\nСейчас же можно насладиться эволюцией автомата прямо в браузере.\nТакже сегодня есть достаточно быстрая программа ",
  {
    "name": "link",
    "props": {
      "href": "https://en.wikipedia.org/wiki/Golly_(program)"
    },
    "children": [
      "Golly"
    ]
  },
  ", которая оптимизирует расчёты.\n\n\n",
  {
    "name": "link",
    "props": {
      "href": "/?/projects/game-of-life"
    },
    "children": [
      "Реализация"
    ]
  },
  " лежит в разделе ",
  {
    "name": "link",
    "props": {
      "href": "/?/projects"
    },
    "children": [
      "Проекты"
    ]
  },
  ". Вообще в раздел Проекты будут попадать все новые вещи, пока я не решу выделить им отдельное пространство имён.\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Игровое поле"
    ]
  },
  "\nПо умолчанию поле имеет размер 1000x500 и топологию тора(правый край склеивается с левым, верх с низом).\nЯчейки прямоугольные.\nУ клеток только два состояния: живая(красная) и мёртвая(чёрная).\nДля каждого из состояний следующее состояние определяется суммой живых клеток в ",
  {
    "name": "link",
    "props": {
      "href": "https://en.wikipedia.org/wiki/Moore_neighborhood"
    },
    "children": [
      "окрестности Мура"
    ]
  },
  ".\nРазмер клетки — 1 квадратный пиксель.\nПоле расположено на ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "canvas"
    ]
  },
  ".\nПоказаны номер текущего поколения и количество живых клеток(популяция).\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Что можно делать"
    ]
  },
  "\nЗапускать и останавливать эволюцию.\n\nПросчитывать каждый шаг отдельно.\n\nРисовать на поле.\n\nОчищать поле.\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Управление правилами"
    ]
  },
  "\nМенять правила для сумм можно прямо во время эволюции.\nВидно, как даже одно дополнительное условие кардинально меняет эволюцию автомата.\nНапример, при переходе от ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "B3/S23"
    ]
  },
  " к ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "B3/S234"
    ]
  },
  "(нажмите галочку с цифрой 4 в нижнем ряду).\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Начальные конфигурации"
    ]
  },
  "\nЗа десятилетия энтузиастами были найдены много интересных конфигураций.\nКосмические корабли могут передвигаться по полю, сохраняя форму.\nПаровозы передвигаясь, оставляют за собой след.\nРужья неподвижны, но стреляют другими фигурами.\nОсцилляторы колеблются с разным периодом, возвращаясь в изначальную форму.\n\n\nС ",
  {
    "name": "link",
    "props": {
      "href": "https://www.conwaylife.com/wiki/Main_Page"
    },
    "children": [
      "тематического сайта"
    ]
  },
  " я отобрал наиболее интересные мне экземпляры.\nПо умолчанию выбрана самая сложная конфигурация из представленных.\nВсе конфигурации записаны в коде ",
  {
    "name": "link",
    "props": {
      "href": "https://www.conwaylife.com/wiki/Run_Length_Encoded"
    },
    "children": [
      "RLE"
    ]
  },
  ", его также можно посмотреть, нажав галочку код конфигурации.\nВ будущем думаю добавить возможность задавать произвольные конфигурации в поле ввода.\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Как устроено"
    ]
  },
  "\nПоле представлено массивом длиной 500000(1000*500) со значениями ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "boolean"
    ]
  },
  ".\n",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "true"
    ]
  },
  " соответствует живая клетка, ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "false"
    ]
  },
  " — мёртвая.\nПоле обсчитывается в лоб в цикле.\nНовое поколение пишется во второй массив, которые по окончанию вычислений переносится в основной.\n\nЕсть простор для оптимизаций: с помощью типизированных массивов и битовых операций, либо с использованием WebAssembly.\nСам алгоритм можно улучшить, не трогая неизменные клетки.\nНо у меня была задача сделать рабочее решение, а не самый быстрый алгоритм(хотя к этому надо стремиться).\n\n\nДля начальных конфигураций функция преобразует RLE код в массив координат живых клеток и считает высоту и ширину.\nЗатем конфигурация выставляется по центру в поле, в указанные координаты(со смещением относительно центра) выставляя ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "true"
    ]
  },
  ".\n\n\nКаждый тик происходит ререндер.\nЯ хотел убедится, что ",
  {
    "name": "link",
    "props": {
      "href": "/?/blog/3"
    },
    "children": [
      "движок"
    ]
  },
  "(ещё сырой) справится с нагрузкой.\nВ будущем это также можно оптимизировать, перерисовывая только нужные части.\n\n\nДля интерфейса понадобилось создать два новых базовый компонента-блока: Checkbox и Select.\nДля стилизации галочки был использован известный приём с label(скрываем input, рисуем кастомную галочку для :checked).\nА вот выпадающее меню стилизовано наполовину, только основная часть(рисуем стрелочку с абсолютным позиционированием и делаем её невидимой для событий мыши), но не список значений.\nЭто связано с техническими ограничениями, а переизобретать выпадающий список не хотелось при наличии нативного.\n\nТакже были использованы новые иконки из бесплатного ",
  {
    "name": "link",
    "props": {
      "href": "https://fontawesome.com/icons?d=gallery&m=free"
    },
    "children": [
      "набора"
    ]
  },
  " Font Awesome.\n\n\nДля интересующихся всегда есть ",
  {
    "name": "link",
    "props": {
      "href": "https://github.com/nikalexxx/nikalexxx.github.io/blob/master/components/GameOfLife/GameOfLife.js"
    },
    "children": [
      "исходники"
    ]
  },
  ".\n"
]