[
  "\nИзначально тёмная тема была, потому что я вдохновлялся тёмными темами VSCode.\nЯ даже взял оттуда палитру.\nНо не всем привычна тёмная тема, да и сделать светлую тему с помощью css оказалось легко.\n\nПрежде всего я навёл порядок в ",
  {
    "name": "link",
    "props": {
      "href": "/?/design/colors"
    },
    "children": [
      "цветах"
    ]
  },
  ", особенно в градациях серого.\n\n\nТёмная тема осталась по умолчанию, а светлая тема включается классом ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "theme_light"
    ]
  },
  " на элементе body.\nДля каждой темы я перечисляю цвета для текста, фонов и границ:\n",
  {
    "name": "code",
    "props": {
      "lang": "css"
    },
    "children": [
      "\n:root {\n    --color-text: var(--color-gray-light);\n    --color-text-active: var(--color-blue);\n    --color-text-accent: var(--color-red);\n    --color-background: var(--color-dark);\n    --color-background-second: var(--color-dark-black);\n    --color-background-prime: var(--color-dark-gray);\n    --color-background-accent: var(--color-black);\n    --color-border: var(--color-black);\n    --color-border-contrast: var(--color-gray-light);\n}\n\n.theme_light {\n    --color-text: var(--color-dark-gray);\n    --color-text-active: var(--color-blue);\n    --color-text-accent: var(--color-red-light);\n    --color-background: var(--color-white);\n    --color-background-second: var(--color-light-white);\n    --color-background-prime: var(--color-light);\n    --color-background-accent: var(--color-light-gray);\n    --color-border: var(--color-light-gray-medium);\n    --color-border-contrast: var(--color-gray-light);\n}\n"
    ]
  },
  "\nПришлось у всех компонентов поменять цвета в стилях, чтобы они автоматически менялись при смене темы.\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Смена темы"
    ]
  },
  "\nКроме смены класса body, разумно сохранять тему в localStorage, чтобы запоминать выбор.\n",
  {
    "name": "code",
    "props": {
      "lang": "javascript"
    },
    "children": [
      "\nfunction setTheme() {\n    const {theme} = state();\n    localStorage.setItem('theme', theme);\n    const classList = document.body.classList;\n    if (theme === 'light') {\n        classList.add('theme_light');\n    } else {\n        classList.remove('theme_light');\n    }\n    window.dispatchEvent(new CustomEvent('theme', {detail: {theme}}));\n}"
    ]
  },
  "\nВ этой реализации state — состояние компонента шапки(там переключатель тем).\nТакже здесь я активирую событие, чтобы другие компоненты могли узнать об этом.\n\n\nПри первой загрузке мы смотрим в localStorage, и если там есть тема, берём её, иначе берём тему по умолчанию(dark).\n",
  {
    "name": "code",
    "props": {
      "lang": "javascript"
    },
    "children": [
      "\nstate.init({\n    theme: 'dark'\n});\n\nhooks.didMount(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n        state.set({theme: savedTheme});\n    }\n    setTheme();\n});\n"
    ]
  },
  "\n\nДобавим функцию переключения тем\n",
  {
    "name": "code",
    "props": {
      "lang": "javascript"
    },
    "children": [
      "\nfunction toogleTheme() {\n    state.set(prevState => ({\n        theme: prevState.theme === 'dark' ? 'light' : 'dark'\n    }), () => setTheme());\n}"
    ]
  },
  "\nИ будем вызывать её при клике на кнопку в шапке\n",
  {
    "name": "code",
    "props": {
      "lang": "javascript"
    },
    "children": [
      "\nButton.onClick(toogleTheme)(getIcon())\n"
    ]
  },
  "\ngetIcon — функция для отрисовки иконок.\nИконки я взял среди бесплатного набора ",
  {
    "name": "link",
    "props": {
      "href": "https://fontawesome.com/icons?d=gallery&m=free"
    },
    "children": [
      "Font Awesome"
    ]
  },
  ".\nДля тёмной темы это луна, для светлой — солнце.\nЧтобы иконки были компонентами, пришлось скопировать код svg и представить в виде прокси в js аналогично другим элементам.\nЕдинственное отличие от обычных элементов, это пространство имён svg, для этого в движке реализован прокси ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "S"
    ]
  },
  ".\nКомпонент нужен для того, чтобы прокидывать свойства с уровня выше при использовании иконки.\nНапример, установить цвет иконки или размер.\n\n\nВот реализация компонента для иконки луны:\n",
  {
    "name": "code",
    "props": {
      "lang": "javascript"
    },
    "children": [
      "\nimport {\n    S,\n    Component\n} from '../utils/index.js';\n\nexport default Component.MoonIcon(({props}) => () =>\n    S.svg\n        ['aria-hidden']`true`\n        .focusable`false`\n        .role`img`\n        .xmlns`http://www.w3.org/2000/svg`\n        .viewBox`0 0 512 512`\n        ._props(props)\n    (\n        S.path\n            .fill`currentColor`\n            .d`M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z`\n    )\n)\n"
    ]
  },
  "\n"
]