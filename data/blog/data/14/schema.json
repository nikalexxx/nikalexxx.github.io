[
  "\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Зачем мне иконки сайтов?"
    ]
  },
  "\nВ разделе ",
  {
    "name": "link",
    "props": {
      "href": "/?/catalog"
    },
    "children": [
      "Каталог"
    ]
  },
  " я собираю разные полезные ссылки.\nЧтобы быстро по ним ориентироваться, с самого начала я добавил к каждой ссылке иконку соответствующего сайта.\n\n\nНо с иконками возникли проблемы.\nНе на каждом сайте была иконка ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "favicon.ico"
    ]
  },
  ", некоторые были доступны только по прямой ссылке href из ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "<link rel=\"icon\" href=\"...\" />"
    ]
  },
  ".\nЧасто эта ссылка в имени содержала хэш в результате работы сборщика.\nДля таких сайтов я искал исходные картинки и сохранял себе.\nНе очень красиво, да и следить приходиться за актуальностью иконок, вдруг поменяют (как Яндекс недавно).\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Автоматическое обновление иконок"
    ]
  },
  "\nКонечно, хочется автоматизировать ручной процесс поиска иконки для каждого сайта.\nНам нужно рассмотреть в том числе такие случаи, когда ссылка на иконку присутсвует только внутри ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "<head>"
    ]
  },
  " сайта.\nСредствами внутри браузера это сделать не получиться, так как доступ к ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "DOM"
    ]
  },
  " стороннего сайта запрещён.\nКроссдоменные запросы через ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "XHR"
    ]
  },
  " или ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "fetch"
    ]
  },
  " будут блокироваться политиками безопасности, а если воспользоваться ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "iframe"
    ]
  },
  ", доступ к его содержимому также будет закрыт для стороннего домена.\n\n\nПоэтому все необходимые ссылки получим заранее, до этапа сборки.\nЯ буду использовать ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "ruby"
    ]
  },
  " и библиотеку ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "nokogiri"
    ]
  },
  " для парсинга html.\n\n\nДалее опишу основной алгоритм, детали реализации можно посмотреть в исходниках.\n\n\nДля каждого адреса ",
  {
    "name": "format.pre",
    "props": {},
    "children": [
      "url"
    ]
  },
  " получим дерево html.\n",
  {
    "name": "code",
    "props": {
      "lang": "ruby"
    },
    "children": [
      "\nresponse = Net::HTTP.get_response(URI(url))\ndoc = Nokogiri::HTML(response.body)\n"
    ]
  },
  "\n\n\nСмотрим все ссылки, в которых описаны иконки\n",
  {
    "name": "code",
    "props": {
      "lang": "ruby"
    },
    "children": [
      "\ndoc.css('head link[rel~=icon]').each do |link|\n    ...\nend\n"
    ]
  },
  "\n\nЕсли попалась svg иконка, то нам повезло, берём её и уходим\n",
  {
    "name": "code",
    "props": {
      "lang": "ruby"
    },
    "children": [
      "\nif link['type'].to_s.start_with?('image/svg')\n    href = link['href']\n    break\nend\n"
    ]
  },
  "\n\n\nИз оставшихся выбираем иконку максимального размера\n",
  {
    "name": "code",
    "props": {
      "lang": "ruby"
    },
    "children": [
      "\nsizes = link['sizes'] || '1x1'\nsize = sizes.split('x')[0].to_i\nif size > max_size\n    href = link['href']\n    max_size = size\nend\n"
    ]
  },
  "\n\n\nЕсли ни одна ссылка не была найдена, возьмём дефолтную\n",
  {
    "name": "code",
    "props": {
      "lang": "ruby"
    },
    "children": [
      "\nif href == ''\n    href = '/favicon.ico'\nend\n"
    ]
  },
  "\n\n\n",
  {
    "name": "header",
    "props": {
      "level": 3
    },
    "children": [
      "Использование"
    ]
  },
  "\nЗапишем наши результаты в js файл и сразу экспортируем как переменную.\nЭто будет простой объект, где ключ это адрес сайта, а значение — адрес иконки.\n",
  {
    "name": "code",
    "props": {
      "lang": "javascript"
    },
    "children": [
      "\nexport const icons = {/* ... */} // Record<string, string>\n"
    ]
  },
  "\n\nТеперь можно импортировать этот объект в нужные компоненты стандартным способом.\n"
]